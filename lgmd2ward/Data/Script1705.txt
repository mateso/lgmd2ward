/****** Object:  UserDefinedFunction [dbo].[cnProdSkin]    Script Date: 08/01/2013 12:29:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[cnProdSkin]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[cnProdSkin]
GO
/****** Object:  UserDefinedFunction [dbo].[cnTarget]    Script Date: 08/01/2013 12:29:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[cnTarget]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[cnTarget]
GO
/****** Object:  UserDefinedFunction [dbo].[cnLivestockSlaughtered]    Script Date: 08/01/2013 12:29:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[cnLivestockSlaughtered]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[cnLivestockSlaughtered]
GO
/****** Object:  UserDefinedFunction [dbo].[cnProdMilk]    Script Date: 08/01/2013 12:29:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[cnProdMilk]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[cnProdMilk]
GO
/****** Object:  StoredProcedure [dbo].[fgAnimalFeeds]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgAnimalFeeds]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgAnimalFeeds]
GO
/****** Object:  View [dbo].[uvwDistrictReportPeriods]    Script Date: 08/01/2013 12:29:21 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwDistrictReportPeriods]'))
DROP VIEW [dbo].[uvwDistrictReportPeriods]
GO
/****** Object:  View [dbo].[uvwDistrictReportPeriodsSubmission]    Script Date: 08/01/2013 12:29:21 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwDistrictReportPeriodsSubmission]'))
DROP VIEW [dbo].[uvwDistrictReportPeriodsSubmission]
GO
/****** Object:  View [dbo].[uvwWardReportPeriods]    Script Date: 08/01/2013 12:29:21 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwWardReportPeriods]'))
DROP VIEW [dbo].[uvwWardReportPeriods]
GO
/****** Object:  View [dbo].[uvwWardReportPeriodsSubmission]    Script Date: 08/01/2013 12:29:21 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwWardReportPeriodsSubmission]'))
DROP VIEW [dbo].[uvwWardReportPeriodsSubmission]
GO
/****** Object:  UserDefinedFunction [dbo].[cnLivestockMarketing]    Script Date: 08/01/2013 12:29:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[cnLivestockMarketing]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[cnLivestockMarketing]
GO
/****** Object:  View [dbo].[uvwMainReportPeriods]    Script Date: 08/01/2013 12:29:21 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwMainReportPeriods]'))
DROP VIEW [dbo].[uvwMainReportPeriods]
GO
/****** Object:  View [dbo].[uvwMainSubmissionReportPeriods]    Script Date: 08/01/2013 12:29:21 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwMainSubmissionReportPeriods]'))
DROP VIEW [dbo].[uvwMainSubmissionReportPeriods]
GO
/****** Object:  View [dbo].[uvwReportPeriods]    Script Date: 08/01/2013 12:29:21 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwReportPeriods]'))
DROP VIEW [dbo].[uvwReportPeriods]
GO
/****** Object:  StoredProcedure [dbo].[fgSearchFigureAnalysis]    Script Date: 08/01/2013 12:29:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgSearchFigureAnalysis]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgSearchFigureAnalysis]
GO
/****** Object:  StoredProcedure [dbo].[fgSearchFigureAnalysisIndicator]    Script Date: 08/01/2013 12:29:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgSearchFigureAnalysisIndicator]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgSearchFigureAnalysisIndicator]
GO
/****** Object:  StoredProcedure [dbo].[fgGetDistrictsPerRegion]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgGetDistrictsPerRegion]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgGetDistrictsPerRegion]
GO
/****** Object:  StoredProcedure [dbo].[fgGrazingLand]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgGrazingLand]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgGrazingLand]
GO
/****** Object:  StoredProcedure [dbo].[fgHideAndSkin]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgHideAndSkin]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgHideAndSkin]
GO
/****** Object:  StoredProcedure [dbo].[fgImplements]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgImplements]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgImplements]
GO
/****** Object:  StoredProcedure [dbo].[fgImprovedPasture]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgImprovedPasture]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgImprovedPasture]
GO
/****** Object:  StoredProcedure [dbo].[fgIrrigation]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgIrrigation]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgIrrigation]
GO
/****** Object:  StoredProcedure [dbo].[fgIrrigationScheme]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgIrrigationScheme]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgIrrigationScheme]
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockInfrastructure]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockInfrastructure]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgLivestockInfrastructure]
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockInfrastructure05]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockInfrastructure05]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgLivestockInfrastructure05]
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockMarketing]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockMarketing]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgLivestockMarketing]
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockMovement]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockMovement]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgLivestockMovement]
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockPopulation]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockPopulation]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgLivestockPopulation]
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockPopulationLargeScale]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockPopulationLargeScale]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgLivestockPopulationLargeScale]
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockSlaughtered]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockSlaughtered]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgLivestockSlaughtered]
GO
/****** Object:  StoredProcedure [dbo].[fgMachineryDrawn]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgMachineryDrawn]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgMachineryDrawn]
GO
/****** Object:  StoredProcedure [dbo].[fgMachines]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgMachines]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgMachines]
GO
/****** Object:  StoredProcedure [dbo].[fgMeatInspection]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgMeatInspection]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgMeatInspection]
GO
/****** Object:  StoredProcedure [dbo].[fgMilk]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgMilk]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgMilk]
GO
/****** Object:  StoredProcedure [dbo].[fgPlanningCommittee]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgPlanningCommittee]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgPlanningCommittee]
GO
/****** Object:  StoredProcedure [dbo].[fgProcessingMachines]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgProcessingMachines]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgProcessingMachines]
GO
/****** Object:  StoredProcedure [dbo].[fgProdLand]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgProdLand]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgProdLand]
GO
/****** Object:  StoredProcedure [dbo].[fgProdLandMasika]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgProdLandMasika]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgProdLandMasika]
GO
/****** Object:  StoredProcedure [dbo].[fgProdLandVuli]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgProdLandVuli]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgProdLandVuli]
GO
/****** Object:  StoredProcedure [dbo].[fgProductProcessing]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgProductProcessing]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgProductProcessing]
GO
/****** Object:  StoredProcedure [dbo].[fgProductsMovement]    Script Date: 08/01/2013 12:29:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgProductsMovement]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgProductsMovement]
GO
/****** Object:  StoredProcedure [dbo].[fgReproductionInput]    Script Date: 08/01/2013 12:29:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgReproductionInput]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgReproductionInput]
GO
/****** Object:  StoredProcedure [dbo].[fgSaccoss]    Script Date: 08/01/2013 12:29:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgSaccoss]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgSaccoss]
GO
/****** Object:  StoredProcedure [dbo].[fgAnnualTarget]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgAnnualTarget]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgAnnualTarget]
GO
/****** Object:  StoredProcedure [dbo].[fgChemicalControl]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgChemicalControl]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgChemicalControl]
GO
/****** Object:  StoredProcedure [dbo].[fgContractFarming]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgContractFarming]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgContractFarming]
GO
/****** Object:  StoredProcedure [dbo].[fgCropResidue]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgCropResidue]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgCropResidue]
GO
/****** Object:  StoredProcedure [dbo].[fgDistrictInfo]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgDistrictInfo]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgDistrictInfo]
GO
/****** Object:  StoredProcedure [dbo].[fgEducationLevel]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgEducationLevel]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgEducationLevel]
GO
/****** Object:  StoredProcedure [dbo].[fgExtensionOfficers]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgExtensionOfficers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgExtensionOfficers]
GO
/****** Object:  StoredProcedure [dbo].[fgExtensionOfficersTrained]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgExtensionOfficersTrained]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgExtensionOfficersTrained]
GO
/****** Object:  StoredProcedure [dbo].[fgExtensionServiceProviders]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgExtensionServiceProviders]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgExtensionServiceProviders]
GO
/****** Object:  StoredProcedure [dbo].[fgExtensionServices]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgExtensionServices]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgExtensionServices]
GO
/****** Object:  StoredProcedure [dbo].[fgFarmers]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgFarmers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgFarmers]
GO
/****** Object:  StoredProcedure [dbo].[fgFertilizer]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgFertilizer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgFertilizer]
GO
/****** Object:  StoredProcedure [dbo].[fgFFS]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgFFS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgFFS]
GO
/****** Object:  StoredProcedure [dbo].[fgFoodSituation]    Script Date: 08/01/2013 12:29:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgFoodSituation]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgFoodSituation]
GO
/****** Object:  StoredProcedure [dbo].[fgSearchFigureAnalysisResult]    Script Date: 08/01/2013 12:29:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgSearchFigureAnalysisResult]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgSearchFigureAnalysisResult]
GO
/****** Object:  StoredProcedure [dbo].[fgSearchTimePeriods]    Script Date: 08/01/2013 12:29:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgSearchTimePeriods]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgSearchTimePeriods]
GO
/****** Object:  StoredProcedure [dbo].[fgTarget]    Script Date: 08/01/2013 12:29:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgTarget]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgTarget]
GO
/****** Object:  StoredProcedure [dbo].[fgTelecommunication]    Script Date: 08/01/2013 12:29:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgTelecommunication]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgTelecommunication]
GO
/****** Object:  StoredProcedure [dbo].[fgTVAndRadio]    Script Date: 08/01/2013 12:29:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgTVAndRadio]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgTVAndRadio]
GO
/****** Object:  StoredProcedure [dbo].[fgWorkingEquipments]    Script Date: 08/01/2013 12:29:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgWorkingEquipments]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgWorkingEquipments]
GO
/****** Object:  StoredProcedure [dbo].[fgWorkingFacilities]    Script Date: 08/01/2013 12:29:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgWorkingFacilities]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[fgWorkingFacilities]
GO
/****** Object:  StoredProcedure [dbo].[fgWorkingFacilities]    Script Date: 08/01/2013 12:29:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgWorkingFacilities]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgWorkingFacilities]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM  
Areas,       
RecordInfo 
INNER JOIN
WorkingFacilities05 ON RecordInfo.RecordID = WorkingFacilities05.AnnuallyRecordID 
INNER JOIN
TwoDList ON WorkingFacilities05.StationID = TwoDList.ListID   
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
TwoDList.ListItemEn LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo               
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgWorkingEquipments]    Script Date: 08/01/2013 12:29:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgWorkingEquipments]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgWorkingEquipments]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM  
Areas,       
RecordInfo 
INNER JOIN
WorkingEquipments05 ON RecordInfo.RecordID = WorkingEquipments05.AnnuallyRecordID 
INNER JOIN
TwoDList ON WorkingEquipments05.StationID = TwoDList.ListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
TwoDList.ListItemEn LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgTVAndRadio]    Script Date: 08/01/2013 12:29:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgTVAndRadio]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgTVAndRadio]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
MediaList.MediaName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM 
Areas,        
RecordInfo 
INNER JOIN
TVAndRadioStation03 ON RecordInfo.RecordID = TVAndRadioStation03.AnnualRecordID 
INNER JOIN
MediaList ON TVAndRadioStation03.StationID = MediaList.MediaListID 
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
MediaList.MediaName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
MediaList.MediaName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgTelecommunication]    Script Date: 08/01/2013 12:29:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgTelecommunication]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgTelecommunication]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
TelecomCompaList.MediaName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM
Areas,         
RecordInfo 
INNER JOIN
Telecommunication03 ON RecordInfo.RecordID = Telecommunication03.AnnualRecordID 
INNER JOIN
TelecomCompaList ON Telecommunication03.TelecomCompID = TelecomCompaList.TelecomCompaListID                 
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
TelecomCompaList.MediaName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
TelecomCompaList.MediaName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgTarget]    Script Date: 08/01/2013 12:29:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgTarget]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgTarget]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
EXEC(''
SELECT
NId,
ParentNId,
ID,
Name,
CropGroupList.CropName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM
Areas,     
RecordInfo
INNER JOIN
TargetImplementationAndCropPrices01 ON RecordInfo.RecordID = TargetImplementationAndCropPrices01.MonthlyRecordID 
INNER JOIN
CropGroupList ON TargetImplementationAndCropPrices01.CropID = CropGroupList.CropGroupListID 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
CropGroupList.CropName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
CropGroupList.CropName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
ORDER BY
CropGroupList.CropName
'')

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgSearchTimePeriods]    Script Date: 08/01/2013 12:29:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgSearchTimePeriods]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgSearchTimePeriods]
	-- Add the parameters for the stored procedure here
	@foreigntable varchar(50),
    @foreignkey varchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
exec(''
SELECT  
distinct
(
convert(varchar(15),RecordInfo.PeriodFrom,106)
+'''' - ''''+
convert(varchar(15),RecordInfo.PeriodTo,106)
) as TimePeriods
FROM         
RecordInfo 
INNER JOIN
''+@foreigntable+'' ON RecordInfo.RecordID = ''+@foreigntable+''.''+@foreignkey+''
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgSearchFigureAnalysisResult]    Script Date: 08/01/2013 12:29:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgSearchFigureAnalysisResult]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgSearchFigureAnalysisResult]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@SearchKeyword varchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

EXEC(''SELECT * FROM ''+@SearchKeyword+'''')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgFoodSituation]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgFoodSituation]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgFoodSituation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
ThreeDList.ListItemEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM   
Areas,      
RecordInfo 
INNER JOIN
FoodSituation05 ON RecordInfo.RecordID = FoodSituation05.AnnuallyRecordID 
INNER JOIN
ThreeDList ON FoodSituation05.FoodTypeID = ThreeDList.ListID  
WHERE  
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
ThreeDList.ListItemEn LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
ThreeDList.ListItemEn,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo  
'')               
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgFFS]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgFFS]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgFFS]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
FFSGroup.GroupName,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + '' 
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID 
INNER JOIN
FarmersFieldSchool03 ON RecordInfo.RecordID = FarmersFieldSchool03.AnnualRecordID 
INNER JOIN
FFSGroup ON FarmersFieldSchool03.FieldID = FFSGroup.GroupID
WHERE
Areas.ID LIKE ''''%'' + @AreaID + ''%''''
GROUP BY
NId,
ParentNId,
ID,
Name,
FFSGroup.GroupName,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgFertilizer]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgFertilizer]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgFertilizer]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
Areas.Name, 
FertilizerList.FertilizerName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID 
INNER JOIN
Fertilizer03 ON RecordInfo.RecordID = Fertilizer03.AnnualRecordID 
INNER JOIN
FertilizerList ON Fertilizer03.FertilizerID = FertilizerList.FertilizerListID
WHERE
Areas.ID LIKE ''''%'' + @AreaID + ''%''''
GROUP BY
Areas.Name, 
FertilizerList.FertilizerName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgFarmers]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgFarmers]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgFarmers]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
Areas.Name, 
CoopGroup.GroupName, 
CoopGroupList.GroupDetails, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID 
INNER JOIN
CoopGroup02 ON RecordInfo.RecordID = CoopGroup02.RecordID 
INNER JOIN
CoopGroupList ON CoopGroup02.CoopID = CoopGroupList.CoopGroupListID 
INNER JOIN
CoopGroup ON CoopGroupList.GroupID = CoopGroup.GroupID  
WHERE
Areas.ID LIKE ''''%'' + @AreaID + ''%''''
GROUP BY
Areas.Name, 
CoopGroup.GroupName, 
CoopGroupList.GroupDetails, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo                    
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgExtensionServices]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgExtensionServices]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgExtensionServices]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
FFSGroup.GroupName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM
Areas,         
RecordInfo 
INNER JOIN
FarmersFieldSchool02 ON RecordInfo.RecordID = FarmersFieldSchool02.RecordID 
INNER JOIN
FFSGroup ON FarmersFieldSchool02.FieldID = FFSGroup.GroupID 
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
FFSGroup.GroupName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
FFSGroup.GroupName,  
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')                   
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgExtensionServiceProviders]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgExtensionServiceProviders]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgExtensionServiceProviders]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
Areas.Name, 
ExtensionServiceProviders05.NameOfServiceProvider, 
ExtensionServiceProviders05.TypeOfServiceProvider, 
ExtensionServiceProviders05.TypeOfService, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID 
INNER JOIN
ExtensionServiceProviders05 ON RecordInfo.RecordID = ExtensionServiceProviders05.AnnuallyRecordID 
AND 
RecordInfo.RecordID = ExtensionServiceProviders05.AnnuallyRecordID
WHERE
Areas.ID LIKE ''''%'' + @AreaID + ''%''''
GROUP BY
Areas.Name, 
ExtensionServiceProviders05.NameOfServiceProvider, 
ExtensionServiceProviders05.TypeOfServiceProvider, 
ExtensionServiceProviders05.TypeOfService, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgExtensionOfficersTrained]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgExtensionOfficersTrained]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgExtensionOfficersTrained]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
FFSGroup.GroupName,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM  
Areas,       
RecordInfo 
INNER JOIN
ExtensionOfficersTrained05 ON RecordInfo.RecordID = ExtensionOfficersTrained05.AnnuallyRecordID 
INNER JOIN
FFSGroup ON ExtensionOfficersTrained05.FieldID = FFSGroup.GroupID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
FFSGroup.GroupName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
FFSGroup.GroupName,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgExtensionOfficers]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgExtensionOfficers]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgExtensionOfficers]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
ThreeDList.ListItemEn,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + '' 
FROM    
Areas,     
RecordInfo 
INNER JOIN
ExtensionOfficers05 ON RecordInfo.RecordID = ExtensionOfficers05.AnnuallyRecordID 
INNER JOIN
ThreeDList ON ExtensionOfficers05.SpecilizationID = ThreeDList.ListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
ThreeDList.ListItemEn LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
ThreeDList.ListItemEn,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgEducationLevel]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgEducationLevel]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgEducationLevel]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + '' 
FROM
Areas,         
RecordInfo
INNER JOIN
EducationLevel05 ON RecordInfo.RecordID = EducationLevel05.AnnuallyRecordID 
INNER JOIN
TwoDList ON EducationLevel05.LevelID = TwoDList.ListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
TwoDList.ListItemEn LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgDistrictInfo]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgDistrictInfo]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgDistrictInfo]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT
NId,
ParentNId,
ID,
Name,     
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + '' 
FROM 
Areas,        
RecordInfo 
INNER JOIN
DistrictInfo05 ON RecordInfo.RecordID = DistrictInfo05.AnnuallyRecordID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgCropResidue]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgCropResidue]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgCropResidue]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT
NId,
ParentNId,
ID,
Name,
CropResidue03.TypeOfCrop, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM
Areas,         
RecordInfo 
INNER JOIN
CropResidue03 ON RecordInfo.RecordID = CropResidue03.AnnualRecordID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
CropResidue03.TypeOfCrop LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
CropResidue03.TypeOfCrop, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgContractFarming]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgContractFarming]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgContractFarming]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT  
NId,
ParentNId,
ID,
Name,   
Group2D.GroupName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM 
Areas,        
RecordInfo 
INNER JOIN
ContractFarming03 ON RecordInfo.RecordID = ContractFarming03.AnnualRecordID 
INNER JOIN
Group2D ON ContractFarming03.ActivityID = Group2D.GroupID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
Group2D.GroupName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
Group2D.GroupName,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgChemicalControl]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgChemicalControl]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgChemicalControl]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
EXEC(''	
SELECT     
NId,
ParentNId,
ID,
Name,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM    
Areas,     
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo 
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgAnnualTarget]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgAnnualTarget]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgAnnualTarget]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
EXEC(''
SELECT
NId,
ParentNId,
ID,
Name,
CropGroupList.CropName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM
Areas,     
RecordInfo
INNER JOIN
TargetImplementationAndCropPrices06 ON RecordInfo.RecordID = TargetImplementationAndCropPrices06.AnnualRecordID 
INNER JOIN
CropGroupList ON TargetImplementationAndCropPrices06.CropID = CropGroupList.CropGroupListID 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
CropGroupList.CropName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
CropGroupList.CropName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
ORDER BY
CropGroupList.CropName
'')

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgSaccoss]    Script Date: 08/01/2013 12:29:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgSaccoss]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgSaccoss]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM
Areas,
RecordInfo 
INNER JOIN
CoopSaccos02 ON RecordInfo.RecordID = CoopSaccos02.RecordID   
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgReproductionInput]    Script Date: 08/01/2013 12:29:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgReproductionInput]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgReproductionInput]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC
(''	
SELECT     
NId,
ParentNId,
ID,
Name, 
TwoDList.ListItemEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM   
Areas,      
RecordInfo 
INNER JOIN
ReproductionInputs04 ON RecordInfo.RecordID = ReproductionInputs04.QuarterlyRecordID 
INNER JOIN
TwoDList ON ReproductionInputs04.InputID = TwoDList.ListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
TwoDList.ListItemEn LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
''
)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgProductsMovement]    Script Date: 08/01/2013 12:29:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgProductsMovement]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgProductsMovement]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''	
SELECT     
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM  
Areas,       
RecordInfo 
INNER JOIN
ProductsMovement04 ON RecordInfo.RecordID = ProductsMovement04.QuarterlyRecordID 
INNER JOIN
TwoDList ON ProductsMovement04.ProductID = TwoDList.ListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
TwoDList.ListItemEn LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgProductProcessing]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgProductProcessing]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgProductProcessing]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId, 
ParentNId,
ID,
Name,
TwoDList.ListItemEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM 
Areas,        
RecordInfo 
INNER JOIN
ProductsProcessing05 ON RecordInfo.RecordID = ProductsProcessing05.AnnuallyRecordID 
INNER JOIN
TwoDList ON ProductsProcessing05.ProcessingID = TwoDList.ListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
TwoDList.ListItemEn LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId, 
ParentNId,
ID,
Name,
TwoDList.ListItemEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgProdLandVuli]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgProdLandVuli]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgProdLandVuli]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

EXEC(''
SELECT    
NId,
ParentNId,
ID,
Name,  
ActivityList.ActivityDetails, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM   
Areas,      
RecordInfo 
INNER JOIN
ProdLand02 ON RecordInfo.RecordID = ProdLand02.RecordID 
INNER JOIN
ActivityList ON ProdLand02.ActivityID = ActivityList.ActivityListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
ActivityList.ActivityDetails LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
AND
ProdLand02.ActivityID <= 4
GROUP BY
NId,
ParentNId,
ID,
Name, 
ActivityList.ActivityDetails, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgProdLandMasika]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgProdLandMasika]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgProdLandMasika]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

EXEC(''
SELECT 
NId,
ParentNId,
ID,
Name,     
ActivityList.ActivityDetails, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM  
Areas,       
RecordInfo 
INNER JOIN
ProdLand02 ON RecordInfo.RecordID = ProdLand02.RecordID 
INNER JOIN
ActivityList ON ProdLand02.ActivityID = ActivityList.ActivityListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
ActivityList.ActivityDetails LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY 
NId,
ParentNId,
ID,
Name,
ActivityList.ActivityDetails, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgProdLand]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgProdLand]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgProdLand]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

EXEC(''
SELECT  
NId,
ParentNId,
ID,    
ActivityList.ActivityDetails, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM    
Areas,     
RecordInfo 
INNER JOIN
ProdLand02 ON RecordInfo.RecordID = ProdLand02.RecordID 
INNER JOIN
ActivityList ON ProdLand02.ActivityID = ActivityList.ActivityListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
ActivityList.ActivityDetails LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY 
NId,
ParentNId,
ID,
ActivityList.ActivityDetails, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgProcessingMachines]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgProcessingMachines]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgProcessingMachines]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT  
NId,
ParentNId,
ID,
Name,   
ProcessingMachinesList.MachineName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM   
Areas,      
RecordInfo 
INNER JOIN
ProcessingMachines03 ON RecordInfo.RecordID = ProcessingMachines03.AnnualRecordID 
INNER JOIN
ProcessingMachinesList ON ProcessingMachines03.MachineID = ProcessingMachinesList.ProcessingMachineListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
ProcessingMachinesList.MachineName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,   
ProcessingMachinesList.MachineName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgPlanningCommittee]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgPlanningCommittee]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgPlanningCommittee]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM 
Areas,        
RecordInfo 
INNER JOIN
PlanningCommitee05 ON RecordInfo.RecordID = PlanningCommitee05.AnnuallyRecordID 
INNER JOIN
TwoDList ON PlanningCommitee05.SexID = TwoDList.ListID 
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
TwoDList.ListItemEn LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name, 
TwoDList.ListItemEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo                    
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgMilk]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgMilk]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgMilk]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''	
SELECT     
NId,
ParentNId,
ID,
Name,
ProdMilkList.ProdName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM   
Areas,      
RecordInfo 
INNER JOIN
ProdMilk01 ON RecordInfo.RecordID = ProdMilk01.MonthlyRecordID 
INNER JOIN
ProdMilkList ON ProdMilk01.ProdTypeID = ProdMilkList.ProdMilkListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
ProdMilkList.ProdName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
ProdMilkList.ProdName,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgMeatInspection]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgMeatInspection]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgMeatInspection]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
CropGroupList.CropName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM  
Areas,       
RecordInfo 
INNER JOIN
MeatInspection01 ON RecordInfo.RecordID = MeatInspection01.MonthlyRecordID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
CropGroupList.CropName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
CropGroupList.CropName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgMachines]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgMachines]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgMachines]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT
NId,
ParentNId,
ID,
Name,
MachineryList.MachineryName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM 
Areas,        
RecordInfo 
INNER JOIN
Machines03 ON RecordInfo.RecordID = Machines03.AnnualRecordID 
INNER JOIN
MachineryList ON Machines03.MachineryID = MachineryList.MachineryListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
MachineryList.MachineryName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
MachineryList.MachineryName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
ORDER BY
MachineryList.MachineryName
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgMachineryDrawn]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgMachineryDrawn]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgMachineryDrawn]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
DrawnList.DrawnName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM 
Areas,        
RecordInfo 
INNER JOIN
MachineryDrawn03 ON RecordInfo.RecordID = MachineryDrawn03.AnnualRecordID 
INNER JOIN
DrawnList ON MachineryDrawn03.DrawnID = DrawnList.DrawnListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
DrawnList.DrawnName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
DrawnList.DrawnName,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockSlaughtered]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockSlaughtered]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgLivestockSlaughtered]

	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''	
SELECT     
NId,
ParentNId,
ID,
Name,
LivestockSlaughList.LivestockName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM 
Areas,        
RecordInfo 
INNER JOIN
LivestockSlaughtered01 ON RecordInfo.RecordID = LivestockSlaughtered01.MonthlyRecordID 
INNER JOIN
LivestockSlaughList ON LivestockSlaughtered01.LivestockID = LivestockSlaughList.LivestockListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
LivestockSlaughList.LivestockName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
LivestockSlaughList.LivestockName,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockPopulationLargeScale]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockPopulationLargeScale]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgLivestockPopulationLargeScale]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
NameOfFarm,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM   
Areas,      
RecordInfo 
INNER JOIN
LivestockPopulation05 ON RecordInfo.RecordID = LivestockPopulation05.AnnuallyRecordID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
NameOfFarm LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
NameOfFarm,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockPopulation]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockPopulation]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgLivestockPopulation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
Areas.Name, 
AnimalsList.AnimalName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM        
RecordInfo INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID 
INNER JOIN
Livestock03 ON RecordInfo.RecordID = Livestock03.AnnualRecordID 
INNER JOIN
AnimalsList ON Livestock03.AnimalID = AnimalsList.AnimalListID
WHERE
Areas.ID LIKE ''''%'' + @AreaID + ''%''''
GROUP BY
Areas.Name, 
AnimalsList.AnimalName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockMovement]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockMovement]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgLivestockMovement]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
LivestockList.LivestockName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM
Areas,
RecordInfo 
INNER JOIN
LivestockMovement04 ON RecordInfo.RecordID = LivestockMovement04.QuarterlyRecordID 
INNER JOIN
LivestockList ON LivestockMovement04.LivestockID = LivestockList.LivestockListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
LivestockList.LivestockName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
LivestockList.LivestockName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockMarketing]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockMarketing]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgLivestockMarketing]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

EXEC(''	
SELECT     
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM         
Areas,
RecordInfo 
INNER JOIN
LivestockMarketing04 ON RecordInfo.RecordID = LivestockMarketing04.QuarterlyRecordID 
INNER JOIN
TwoDList ON LivestockMarketing04.LivestockID = TwoDList.ListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
TwoDList.ListItemEn LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockInfrastructure05]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockInfrastructure05]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgLivestockInfrastructure05]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM  
Areas,       
RecordInfo 
INNER JOIN
LivestockInfrastructure05 ON RecordInfo.RecordID = LivestockInfrastructure05.AnnuallyRecordID 
INNER JOIN
TwoDList ON LivestockInfrastructure05.InfraID = TwoDList.ListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
TwoDList.ListItemEn LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
TwoDList.ListItemEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgLivestockInfrastructure]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgLivestockInfrastructure]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgLivestockInfrastructure]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
InfraList.InfraName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM  
Areas,       
RecordInfo 
INNER JOIN
LivestockInfrastructure03 ON RecordInfo.RecordID = LivestockInfrastructure03.AnnualRecordID 
INNER JOIN
InfraList ON LivestockInfrastructure03.InfraID = InfraList.InfraListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
InfraList.InfraName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
InfraList.InfraName,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgIrrigationScheme]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgIrrigationScheme]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgIrrigationScheme]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
SchemeGroup.GroupName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM
Areas,
RecordInfo 
INNER JOIN
IrrigationScheme03 ON RecordInfo.RecordID = IrrigationScheme03.AnnualRecordID 
INNER JOIN
SchemeGroup ON IrrigationScheme03.SchemeID = SchemeGroup.GroupID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
SchemeGroup.GroupName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
SchemeGroup.GroupName,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgIrrigation]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgIrrigation]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgIrrigation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
Areas.Name, 
Irrigation02.CropID, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM        
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID 
INNER JOIN
Irrigation02 ON RecordInfo.RecordID = Irrigation02.RecordID
WHERE
Areas.ID LIKE ''''%'' + @AreaID + ''%''''
GROUP BY
Areas.Name, 
Irrigation02.CropID, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgImprovedPasture]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgImprovedPasture]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgImprovedPasture]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM   
Areas,      
RecordInfo 
INNER JOIN
ImprovedPasture03 ON RecordInfo.RecordID = ImprovedPasture03.AnnualRecordID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgImplements]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgImplements]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgImplements]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
ImplementsList.ImplementNameEn, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM     
Areas,    
RecordInfo 
INNER JOIN
HandOperatedImplements03 ON RecordInfo.RecordID = HandOperatedImplements03.AnnualRecordID 
INNER JOIN
ImplementsList ON HandOperatedImplements03.ImplementID = ImplementsList.ImplementsListID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
ImplementsList.ImplementNameEn LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
ImplementsList.ImplementNameEn,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgHideAndSkin]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgHideAndSkin]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgHideAndSkin]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
ProdSkinList.ProdName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM     
Areas,    
RecordInfo 
INNER JOIN
ProdSkin01 ON RecordInfo.RecordID = ProdSkin01.MonthlyRecordID 
INNER JOIN
ProdSkinList ON ProdSkin01.TypeOfProdID = ProdSkinList.ProdSkinID
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
ProdSkinList.ProdName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
ProdSkinList.ProdName,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgGrazingLand]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgGrazingLand]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgGrazingLand]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
EXEC(''
SELECT     
NId,
ParentNId,
ID,
Name,
AnimalsGrazedList.AnimalName, 
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo,
SUM('' + @ColumnName + '') AS '' + @ColumnName + ''
FROM  
Areas,       
RecordInfo 
INNER JOIN
GrazingLand03 ON RecordInfo.RecordID = GrazingLand03.AnnualRecordID 
INNER JOIN
AnimalsGrazedList ON GrazingLand03.LivestockID = AnimalsGrazedList.AnimalsListID 
WHERE
ID LIKE '''''' + @AreaID + ''''''
AND
AreaLevel BETWEEN 4 AND 5
AND
AnimalsGrazedList.AnimalName LIKE ''''%'' + @ColumnItem + ''%''''
AND
(
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodFrom + ''%''''
OR
RecordInfo.PeriodFrom LIKE ''''%'' + @PeriodTo + ''%''''
)
GROUP BY
NId,
ParentNId,
ID,
Name,
AnimalsGrazedList.AnimalName,
RecordInfo.PeriodFrom, 
RecordInfo.PeriodTo              
'')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgGetDistrictsPerRegion]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgGetDistrictsPerRegion]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgGetDistrictsPerRegion]
	-- Add the parameters for the stored procedure here
	@AreaID nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

select area_name from tbl_setup_areas where area_parent_nid in (SELECT Area_NId from tbl_setup_areas where Area_ID = @AreaID)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgSearchFigureAnalysisIndicator]    Script Date: 08/01/2013 12:29:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgSearchFigureAnalysisIndicator]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgSearchFigureAnalysisIndicator]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@SearchKeyword varchar(50)=null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
IndicatorTable,IndicatorColumn,IndicatorSP
FROM         
Indicators
WHERE
IndicatorDescription LIKE ''%'' + @SearchKeyword + ''%''
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[fgSearchFigureAnalysis]    Script Date: 08/01/2013 12:29:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgSearchFigureAnalysis]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgSearchFigureAnalysis]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@SearchKeyword varchar(50) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
DISTINCT(IndicatorDescription)
FROM         
Indicators
WHERE
IndicatorTable LIKE ''%''+@SearchKeyword+''%''
AND
IndicatorDescription not like ''Animal Feeds''+''%''
AND
IndicatorDescription not like ''Extension Service Providers''+''%''
END' 
END
GO
/****** Object:  View [dbo].[uvwReportPeriods]    Script Date: 08/01/2013 12:29:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwReportPeriods]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[uvwReportPeriods]

AS




 -- Main




SELECT listCode,Description,Category,parent FROM tblList where category=''report''  and (description <>''other reports'')  and isnumeric(Listcode)=0 

and listcode not in (''Qtrpg1'',''Anpg1'')




union all




-- Start Month Records

 

select ''M''+ case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 

 ,case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 

 ,''Report''  ,  ''Mwpg1'' FROM RecordInfo--[dbo].[tbl_data_forms_submitted] 

 where formTypeNumber=1 group by 

case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 




union all




 select 

''rMnpg'' + CAST(DATEPART(yyyy, PeriodFrom) AS nvarchar(4)) +  cast(month([PeriodFrom])   as nvarchar(9))

,datename(month,[PeriodFrom]),''Report'' 

, ''M''+ case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' 

+cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))  end   

 FROM RecordInfo--[dbo].[tbl_data_forms_submitted] 

 

 where formTypeNumber=1 group by          case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' 

+cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))  end   

   ,''rMnpg'' + CAST(DATEPART(yyyy, PeriodFrom) AS nvarchar(4)) + +  cast(month([PeriodFrom])   as nvarchar(9))

   ,datename(month,[PeriodFrom])

   

union all




 select 

	''53217''

	,''Tanzania''

	, ''Report''

	,''rMnpg'' + CAST(DATEPART(yyyy, PeriodFrom) AS nvarchar(4)) +  cast(month([PeriodFrom]) as nvarchar(2))  

 FROM RecordInfo

 where formTypeNumber=1 group by   PeriodFrom




-- End Month Records







-- Start Quarter Records

 Union all

select ''Q''+case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 

 ,case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 

 ,''Report''  ,  ''Qwpg1'' FROM RecordInfo--[dbo].[tbl_data_forms_submitted] 

 where formTypeNumber=2 group by 

case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 




union all




  select 

''rQtrpg'' + CAST(DATEPART(yyyy, PeriodFrom) AS nvarchar(4)) + CASE WHEN month([PeriodFrom]) > 6 THEN CAST(DATEPART(q,PeriodFrom)-2 AS nvarchar(1))  else CAST(DATEPART(q,PeriodFrom)+2 AS nvarchar(1)) end 

,datename(month,[PeriodFrom]) +''-''+ datename(month,[Periodto]) +'' '' + datename(year,[Periodto]) ,''Report'' 

, ''Q''+ case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' 

+cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))  end   

 FROM RecordInfo--[dbo].[tbl_data_forms_submitted] 

 

 where formTypeNumber=2 group by   case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end  ,datename(month,[PeriodFrom]) +''-''+ datename(month,[Periodto]) +'' '' + datename(year,[Periodto])    ,''rQtrpg'' + CAST(DATEPART(yyyy, PeriodFrom) AS nvarchar(4)) + CASE WHEN month([PeriodFrom]) > 6 THEN 

CAST(DATEPART(q,PeriodFrom)-2 AS nvarchar(1))  else CAST(DATEPART(q,PeriodFrom)+2 AS nvarchar(1)) end 




union all

  select 

''53217''

,''Tanzania''--datename(month,[PeriodFrom]) +''-''+ datename(month,[Periodto]) +'' '' + datename(year,[Periodto]) ,''Report'' 

, ''Report''

-- case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' 

--+cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))  end   

,''rQtrpg'' + CAST(DATEPART(yyyy, PeriodFrom) AS nvarchar(4)) + CASE WHEN month([PeriodFrom]) > 6 THEN CAST(DATEPART(q,PeriodFrom)-2 AS nvarchar(1))  else CAST(DATEPART(q,PeriodFrom)+2 AS nvarchar(1)) end 

 FROM RecordInfo--[dbo].[tbl_data_forms_submitted] 

 where formTypeNumber=2 group by   case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end  ,datename(month,[PeriodFrom]) +''-''+ datename(month,[Periodto]) +'' '' + datename(year,[Periodto])    ,''rQtrpg'' + CAST(DATEPART(yyyy, PeriodFrom) AS nvarchar(4)) + CASE WHEN month([PeriodFrom]) > 6 THEN 

CAST(DATEPART(q,PeriodFrom)-2 AS nvarchar(1))  else CAST(DATEPART(q,PeriodFrom)+2 AS nvarchar(1)) end 

-- End Quarter Records

union all

-- Start Annual records

select ''Y''+ case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1    as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,

[PeriodFrom])  as nvarchar(4)) end , case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1    as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 

,''Report''   ,   ''Awpg1''  

FROM RecordInfo

 where formTypeNumber=3 group by  

 case when month([PeriodFrom])>6 

 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)

 ) end  

union all

select ''53217'',''Tanzania'',''Report'',''Y''+case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 

FROM RecordInfo where  

formTypeNumber=3 group by  case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 
-- End Annual Records

'
GO
/****** Object:  View [dbo].[uvwMainSubmissionReportPeriods]    Script Date: 08/01/2013 12:29:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwMainSubmissionReportPeriods]'))
EXEC dbo.sp_executesql @statement = N'

CREATE VIEW [dbo].[uvwMainSubmissionReportPeriods]
AS


SELECT 0 as form, listCode,Description,Category,parent FROM tblList where category=''report''  and (description <>''other reports'')  and isnumeric(Listcode)=0 
and listcode  in (''Qtrpg1'',''Anpg1'',''Reports'')
 -- Main

-- Start Quarter Records
 Union all
select FormTypeNumber, ''Q''+case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 
 ,case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 
 ,''Report''  ,  ''Qtrpg1'' FROM RecordInfo--[dbo].[tbl_data_forms_submitted] 
 where formTypeNumber=4 group by 
case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 
,FormTypeNumber

union all

  select FormTypeNumber,
''rQtrpg'' + CAST(DATEPART(yyyy, PeriodFrom) AS nvarchar(4)) + CASE WHEN month([PeriodFrom]) > 6 THEN CAST(DATEPART(q,PeriodFrom)-2 AS nvarchar(1))  else CAST(DATEPART(q,PeriodFrom)+2 AS nvarchar(1)) end 
,datename(month,[PeriodFrom]) +''-''+ datename(month,[Periodto]) +'' '' + datename(year,[Periodto]) ,''Report'' 
, ''Q''+ case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' 
+cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))  end   
 FROM RecordInfo--[dbo].[tbl_data_forms_submitted] 
 
 where formTypeNumber=4 group by   case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end  ,datename(month,[PeriodFrom]) +''-''+ datename(month,[Periodto]) +'' '' + datename(year,[Periodto])    ,''rQtrpg'' + CAST(DATEPART(yyyy, PeriodFrom) AS nvarchar(4)) + CASE WHEN month([PeriodFrom]) > 6 THEN 
CAST(DATEPART(q,PeriodFrom)-2 AS nvarchar(1))  else CAST(DATEPART(q,PeriodFrom)+2 AS nvarchar(1)) end 
,FormTypeNumber

union all

-- Start Annual records

select  FormTypeNumber, ''Y''+ case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1    as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,
[PeriodFrom])  as nvarchar(4)) end , case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1    as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 
,''Report''   ,   ''Anpg1''  
FROM RecordInfo
 where formTypeNumber=5 group by  
 case when month([PeriodFrom])>6 
 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)
 ) end  ,
FormTypeNumber

'
GO
/****** Object:  View [dbo].[uvwMainReportPeriods]    Script Date: 08/01/2013 12:29:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwMainReportPeriods]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[uvwMainReportPeriods]
AS


SELECT 0 as form, listCode,Description,Category,parent FROM tblList where category=''report''  and (description <>''other reports'')  and isnumeric(Listcode)=0 
and listcode  in (''Qtrpg1'',''Anpg1'',''Reports'')
 -- Main

-- Start Quarter Records
 Union all
select FormTypeNumber, ''Q''+case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 
 ,case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 
 ,''Report''  ,  ''Qtrpg1'' FROM RecordInfo--[dbo].[tbl_data_forms_submitted] 
 where formTypeNumber=4 group by 
case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 
,FormTypeNumber

union all

  select FormTypeNumber,
''rQtrpg'' + CAST(DATEPART(yyyy, PeriodFrom) AS nvarchar(4)) + CASE WHEN month([PeriodFrom]) > 6 THEN CAST(DATEPART(q,PeriodFrom)-2 AS nvarchar(1))  else CAST(DATEPART(q,PeriodFrom)+2 AS nvarchar(1)) end 
,datename(month,[PeriodFrom]) +''-''+ datename(month,[Periodto]) +'' '' + datename(year,[Periodto]) ,''Report'' 
, ''Q''+ case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' 
+cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))  end   
 FROM RecordInfo--[dbo].[tbl_data_forms_submitted] 
 
 where formTypeNumber=4 group by   case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end  ,datename(month,[PeriodFrom]) +''-''+ datename(month,[Periodto]) +'' '' + datename(year,[Periodto])    ,''rQtrpg'' + CAST(DATEPART(yyyy, PeriodFrom) AS nvarchar(4)) + CASE WHEN month([PeriodFrom]) > 6 THEN 
CAST(DATEPART(q,PeriodFrom)-2 AS nvarchar(1))  else CAST(DATEPART(q,PeriodFrom)+2 AS nvarchar(1)) end 
,FormTypeNumber

union all
  select FormTypeNumber,
''53217''
,''Tanzania''--datename(month,[PeriodFrom]) +''-''+ datename(month,[Periodto]) +'' '' + datename(year,[Periodto]) ,''Report'' 
, ''Report''
-- case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' 
--+cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4))  else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))  end   
,''rQtrpg'' + CAST(DATEPART(yyyy, PeriodFrom) AS nvarchar(4)) + CASE WHEN month([PeriodFrom]) > 6 THEN CAST(DATEPART(q,PeriodFrom)-2 AS nvarchar(1))  else CAST(DATEPART(q,PeriodFrom)+2 AS nvarchar(1)) end 
 FROM RecordInfo--[dbo].[tbl_data_forms_submitted] 
 where formTypeNumber=4 group by   case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end  ,datename(month,[PeriodFrom]) +''-''+ datename(month,[Periodto]) +'' '' + datename(year,[Periodto])    ,''rQtrpg'' + CAST(DATEPART(yyyy, PeriodFrom) AS nvarchar(4)) + CASE WHEN month([PeriodFrom]) > 6 THEN 
CAST(DATEPART(q,PeriodFrom)-2 AS nvarchar(1))  else CAST(DATEPART(q,PeriodFrom)+2 AS nvarchar(1)) end 
,FormTypeNumber

-- End Quarter Records

union all

-- Start Annual records

select  FormTypeNumber, ''Y''+ case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1    as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,
[PeriodFrom])  as nvarchar(4)) end , case when month([PeriodFrom])>6 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1    as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 
,''Report''   ,   ''Anpg1''  
FROM RecordInfo
 where formTypeNumber=5 group by  
 case when month([PeriodFrom])>6 
 then cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)
 ) end  ,
FormTypeNumber

union all



select FormTypeNumber, ''53217'',''Tanzania'',''Report'',''Y''+case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end 
FROM RecordInfo where  
formTypeNumber=5 group by  case when month([PeriodFrom])>6 then         cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])+1  as nvarchar(4)) else  cast(datepart(yyyy,[PeriodFrom])-1  as nvarchar(4))+''/'' +cast(datepart(yyyy,[PeriodFrom])  as nvarchar(4)) end  
,FormTypeNumber
-- End Annual Records



union all

--General  Location Details
select 0,listCode,Description,Category,parent from (
SELECT * FROM tblList where category=''report''  and isnumeric(Listcode)=1 and listcode not in (''Qtrpg1'',''Anpg1'')) tmpTbl 
where listcode in  ( select AREA_NID from tbl_setup_areas
	where Area_id in  ( select Area_id from tbl_setup_areas where area_id in (select config_value from tbl_config where config_name=''Area_id'') 

union all
select left(Area_id,len(Area_id)-3) from tbl_setup_areas where area_id in (select config_value from tbl_config where config_name=''Area_id'') 

union all
select left(Area_id,len(Area_id)-6) from tbl_setup_areas where area_id in (select config_value from tbl_config where config_name=''Area_id'') 
))

'
GO
/****** Object:  UserDefinedFunction [dbo].[cnLivestockMarketing]    Script Date: 08/01/2013 12:29:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[cnLivestockMarketing]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION [dbo].[cnLivestockMarketing]
(	
	-- Add the parameters for the function here
	@FormSerialNumber varchar(50),
	@startDate varchar(20),
	@endDate varchar(20)
)
RETURNS TABLE 
AS
RETURN 
(
	-- Add the SELECT statement with parameter references here
SELECT     
TwoDList.ListID,  
SUM(LivestockMarketing04.WarmThisQuarter) AS cnWarmThisQuarter, 
SUM(LivestockMarketing04.ChilledThisQuarter) AS cnChilledThisQuarter, 
SUM(LivestockMarketing04.FrozenThisQuarter) AS cnFrozenThisQuarter
FROM         
TwoDList 
INNER JOIN
LivestockMarketing04 ON TwoDList.ListID = LivestockMarketing04.LivestockID 
INNER JOIN
RecordInfo ON LivestockMarketing04.QuarterlyRecordID = RecordInfo.RecordID
WHERE 
RecordInfo.PeriodFrom between cast(''01-07-''+convert(varchar(10),datepart(yyyy,@startDate))as date) and @endDate
and 
RecordInfo.AreaID like substring(@FormSerialNumber,1,len(@FormSerialNumber)-12)
GROUP BY 
TwoDList.ListID
)
' 
END
GO
/****** Object:  View [dbo].[uvwWardReportPeriodsSubmission]    Script Date: 08/01/2013 12:29:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwWardReportPeriodsSubmission]'))
EXEC dbo.sp_executesql @statement = N'

CREATE VIEW [dbo].[uvwWardReportPeriodsSubmission]
AS

 -- Main

 select [listCode]

      ,[Description]

      ,[Category]

      ,[parent]

from uvwReportPeriods where listcode <> ''53217''

union all




--General  Location Details




select listCode,Description,Category,parent from (

SELECT * FROM tblList where category in (''report'',''ReportWaAndVil'')   and

 isnumeric(Listcode)=1 and listcode not in (''Qtrpg1'',''Anpg1'')) tmpTbl 

where listcode in  ( select AREA_NID from tbl_setup_areas

where Area_id in  ( 

--Ward	

select Area_id--left(Area_id,len(Area_id)) 

from tbl_setup_areas where area_id like (select config_value from tbl_config where config_name=''Area_id'') + ''%'' and

Area_Level =6




----District

--union all

--select Area_id from tbl_setup_areas where area_id in (select config_value from tbl_config where config_name=''Area_id'') 




----Region

--union all

--select left(Area_id,len(Area_id)-3) from tbl_setup_areas where area_id in (select config_value from tbl_config where config_name=''Area_id'') 




--National

--union all

--select left(Area_id,len(Area_id)-6) from tbl_setup_areas where area_id in 

--(select config_value from tbl_config where config_name=''Area_id'') 

-- and Area_Level =5

))


'
GO
/****** Object:  View [dbo].[uvwWardReportPeriods]    Script Date: 08/01/2013 12:29:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwWardReportPeriods]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[uvwWardReportPeriods]

AS

 -- Main

 select [listCode]

      ,[Description]

      ,[Category]

      ,[parent]

from uvwReportPeriods

union all




--General  Location Details




select listCode,Description,Category,parent from (

SELECT * FROM tblList where category in (''report'',''ReportWaAndVil'')   and

 isnumeric(Listcode)=1 and listcode not in (''Qtrpg1'',''Anpg1'')) tmpTbl 

where listcode in  ( select AREA_NID from tbl_setup_areas

where Area_id in  ( 

--Ward	

select Area_id--left(Area_id,len(Area_id)) 

from tbl_setup_areas where area_id like (select config_value from tbl_config where config_name=''Area_id'') + ''%'' and

Area_Level =6




--District

union all

select Area_id from tbl_setup_areas where area_id in (select config_value from tbl_config where config_name=''Area_id'') 




--Region

union all

select left(Area_id,len(Area_id)-3) from tbl_setup_areas where area_id in (select config_value from tbl_config where config_name=''Area_id'') 




--National

union all

select left(Area_id,len(Area_id)-6) from tbl_setup_areas where area_id in 

(select config_value from tbl_config where config_name=''Area_id'') 

 and Area_Level =5

))

'
GO
/****** Object:  View [dbo].[uvwDistrictReportPeriodsSubmission]    Script Date: 08/01/2013 12:29:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwDistrictReportPeriodsSubmission]'))
EXEC dbo.sp_executesql @statement = N'

CREATE VIEW [dbo].[uvwDistrictReportPeriodsSubmission]

AS




 -- Main

 select [listCode]

      ,[Description]

      ,[Category]

      ,[parent]

from uvwReportPeriods where listcode <> ''53217''

union all




--General  Location Details

select listCode,Description,Category,parent from (

SELECT * FROM tblList where category=''report''  and isnumeric(Listcode)=1 and listcode not in (''Qtrpg1'',''Anpg1'')) tmpTbl 

where listcode in  ( select AREA_NID from tbl_setup_areas

	where Area_id in  ( select Area_id from tbl_setup_areas where area_id in (select config_value from tbl_config where config_name=''Area_id'') 




--union all

--select left(Area_id,len(Area_id)-3) from tbl_setup_areas where area_id in (select config_value from tbl_config where config_name=''Area_id'') 




--union all

--select left(Area_id,len(Area_id)-6) from tbl_setup_areas where area_id in (select config_value from tbl_config where config_name=''Area_id'') 

))


'
GO
/****** Object:  View [dbo].[uvwDistrictReportPeriods]    Script Date: 08/01/2013 12:29:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[uvwDistrictReportPeriods]'))
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [dbo].[uvwDistrictReportPeriods]

AS




 -- Main

 select [listCode]

      ,[Description]

      ,[Category]

      ,[parent]

from uvwReportPeriods

union all




--General  Location Details

select listCode,Description,Category,parent from (

SELECT * FROM tblList where category=''report''  and isnumeric(Listcode)=1 and listcode not in (''Qtrpg1'',''Anpg1'')) tmpTbl 

where listcode in  ( select AREA_NID from tbl_setup_areas

	where Area_id in  ( select Area_id from tbl_setup_areas where area_id in (select config_value from tbl_config where config_name=''Area_id'') 




union all

select left(Area_id,len(Area_id)-3) from tbl_setup_areas where area_id in (select config_value from tbl_config where config_name=''Area_id'') 




union all

select left(Area_id,len(Area_id)-6) from tbl_setup_areas where area_id in (select config_value from tbl_config where config_name=''Area_id'') 

))

'
GO
/****** Object:  StoredProcedure [dbo].[fgAnimalFeeds]    Script Date: 08/01/2013 12:29:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fgAnimalFeeds]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[fgAnimalFeeds]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AreaID nvarchar(50) = null,
@ColumnName nvarchar(50),
@ColumnItem nvarchar(100) = null,
@PeriodFrom datetime = null,
@PeriodTo datetime = null 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
Areas.Name, 
TwoDList.ListItemEn, 
AnimalsFeeds04.GenericName, 
AnimalsFeeds04.TradeName, 
AnimalsFeeds04.Source, 
AnimalsFeeds04.MeasurementUnit, 
AnimalsFeeds04.QuarterlyRequirement, 
AnimalsFeeds04.QuarterlyAmountUsed, 
AnimalsFeeds04.LowPrice, 
AnimalsFeeds04.HighPrice, 
AnimalsFeeds04.Remarks
FROM         
RecordInfo 
INNER JOIN
AnimalsFeeds04 ON RecordInfo.RecordID = AnimalsFeeds04.QuarterlyRecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID 
INNER JOIN
TwoDList ON AnimalsFeeds04.FeedsID = TwoDList.ListID
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[cnProdMilk]    Script Date: 08/01/2013 12:29:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[cnProdMilk]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION [dbo].[cnProdMilk] 
(	
	-- Add the parameters for the function here
	@FormSerialNumber varchar(50),
	@startDate varchar(20),
	@endDate varchar(20)
)
RETURNS TABLE 
AS
RETURN 
(
	-- Add the SELECT statement with parameter references here
SELECT     
ProdMilkList.ProdMilkListID, 
SUM(ProdMilk01.AmountThisMonth) AS cnAmountThisMonth
FROM         
ProdMilkList 
INNER JOIN
ProdMilk01 ON ProdMilkList.ProdMilkListID = ProdMilk01.ProdTypeID 
INNER JOIN
RecordInfo ON ProdMilk01.MonthlyRecordID = RecordInfo.RecordID
WHERE 
RecordInfo.PeriodFrom between cast(''01-07-''+convert(varchar(10),datepart(yyyy,@startDate))as date) and @endDate
and 
RecordInfo.AreaID like substring(@FormSerialNumber,1,len(@FormSerialNumber)-12)
GROUP BY 
ProdMilkList.ProdMilkListID
)
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[cnLivestockSlaughtered]    Script Date: 08/01/2013 12:29:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[cnLivestockSlaughtered]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[cnLivestockSlaughtered](@FormSerialNumber varchar(50),@startMonth varchar(20),@endMonth varchar(20)) returns table
as return
select
LivestockSlaughList.LivestockListID,
SUM(LivestockSlaughtered01.TotalNumberSlaughteredThisMonth) as CN
FROM         
LivestockSlaughList 
INNER JOIN
LivestockSlaughtered01 ON LivestockSlaughList.LivestockListID = LivestockSlaughtered01.LivestockID 
INNER JOIN
RecordInfo ON LivestockSlaughtered01.MonthlyRecordID = RecordInfo.RecordID
WHERE 
RecordInfo.PeriodFrom between cast(''01-07-''+convert(varchar(10),datepart(yyyy,@startMonth))as date) and @endMonth
and 
RecordInfo.AreaID like substring(@FormSerialNumber,1,len(@FormSerialNumber)-12)
GROUP BY 
LivestockSlaughList.LivestockListID' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[cnTarget]    Script Date: 08/01/2013 12:29:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[cnTarget]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'
CREATE function [dbo].[cnTarget](@FormSerialNumber varchar(50),@startDate varchar(20),@endDate varchar(20)) returns table
as return
SELECT
CropGroupList.CropGroupListID,
SUM(TargetImplementationAndCropPrices01.AreaDone) as cnAreaDone, 
SUM(TargetImplementationAndCropPrices01.ProdDone) as cnProdDone
FROM         
CropGroup 
INNER JOIN
CropGroupList ON CropGroup.GroupID = CropGroupList.GroupID 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID
WHERE 
(
(RecordInfo.PeriodFrom between cast(convert(varchar(10),datepart(yyyy,@startDate))+''-07-01'' as datetime) and @endDate)
and 
RecordInfo.AreaID like substring(@FormSerialNumber,1,len(@FormSerialNumber)-12)
)
Group by
CropGroupList.CropGroupListID
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[cnProdSkin]    Script Date: 08/01/2013 12:29:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[cnProdSkin]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION [dbo].[cnProdSkin]
(	
	-- Add the parameters for the function here
	@FormSerialNumber varchar(50),
	@startDate varchar(20),
	@endDate varchar(20)
)
RETURNS TABLE 
AS
RETURN 
(
	-- Add the SELECT statement with parameter references here
SELECT     
ProdSkinList.ProdSkinID, 
SUM(ProdSkin01.DrySuspended) AS cnDrySuspended, 
SUM(ProdSkin01.DrySalted) AS cnDrySalted, 
SUM(ProdSkin01.WetBlue) AS cnWetBlue
FROM         
RecordInfo 
INNER JOIN
ProdSkin01 ON RecordInfo.RecordID = ProdSkin01.MonthlyRecordID 
INNER JOIN
ProdSkinList ON ProdSkin01.TypeOfProdID = ProdSkinList.ProdSkinID
WHERE 
RecordInfo.PeriodFrom between cast(''01-07-''+convert(varchar(10),datepart(yyyy,@startDate))as date) and @endDate
and 
RecordInfo.AreaID like substring(@FormSerialNumber,1,len(@FormSerialNumber)-12)
GROUP BY 
ProdSkinList.ProdSkinID
)
' 
END
GO

/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyLivestockSlaughtered]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspQuarterlyLivestockSlaughtered]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[rptUspQuarterlyLivestockSlaughtered]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyProdSkin]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspQuarterlyProdSkin]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[rptUspQuarterlyProdSkin]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyTarget]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspQuarterlyTarget]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[rptUspQuarterlyTarget]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyProdMilk]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspQuarterlyProdMilk]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[rptUspQuarterlyProdMilk]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyProdSkin]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspMonthlyProdSkin]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[rptUspMonthlyProdSkin]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyLivestockMarketing]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspQuarterlyLivestockMarketing]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[rptUspQuarterlyLivestockMarketing]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillPlanningCommitee]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillPlanningCommitee]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillPlanningCommitee]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingAnimal]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillProductsProcessingAnimal]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingAnimal]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingHide]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillProductsProcessingHide]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingHide]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingMeat]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillProductsProcessingMeat]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingMeat]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingMilk]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillProductsProcessingMilk]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingMilk]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateLivestockInfrastructure]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualUpdateLivestockInfrastructure]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[appUspDistrictAnnualUpdateLivestockInfrastructure]
GO
/****** Object:  StoredProcedure [dbo].[rptUspDistrictReportSubmissionStatus]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspDistrictReportSubmissionStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[rptUspDistrictReportSubmissionStatus]
GO
/****** Object:  StoredProcedure [dbo].[rptUspWardReportSubmissionStatus]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspWardReportSubmissionStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[rptUspWardReportSubmissionStatus]
GO
/****** Object:  StoredProcedure [dbo].[udp_forms_submitted]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[udp_forms_submitted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[udp_forms_submitted]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupNameOfPestsDisease]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspMonthlyLookupNameOfPestsDisease]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[appUspMonthlyLookupNameOfPestsDisease]
GO
/****** Object:  StoredProcedure [dbo].[appUspExportData]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspExportData]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[appUspExportData]
GO
/****** Object:  StoredProcedure [dbo].[appUspImportData]    Script Date: 08/01/2013 14:08:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspImportData]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[appUspImportData]
GO
/****** Object:  StoredProcedure [dbo].[appUspImportData]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspImportData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspImportData] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@dbNational nvarchar(100),
@dbImported nvarchar(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

--Delete from Monthly Tables
EXEC(''DELETE FROM ChemicalControl01 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ChemicalControl01)'')
EXEC(''DELETE FROM CommentsOfVillageOfficer01 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.CommentsOfVillageOfficer01)'') 
EXEC(''DELETE FROM DippingSprayingVaccination01 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.DippingSprayingVaccination01)'') 
EXEC(''DELETE FROM LivestockService01 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.LivestockService01)'')  
EXEC(''DELETE FROM LivestockSlaughtered01 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.LivestockSlaughtered01)'')  
EXEC(''DELETE FROM MeatInspection01 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.MeatInspection01)'')  
EXEC(''DELETE FROM Medication01 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.Medication01)'')  
EXEC(''DELETE FROM PeopleWhoVisitTheVillage01 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.PeopleWhoVisitTheVillage01)'')  
EXEC(''DELETE FROM ProdMilk01 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ProdMilk01)'')  
EXEC(''DELETE FROM ProdSkin01 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ProdSkin01)'')  
EXEC(''DELETE FROM TargetImplementationAndCropPrices01 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.TargetImplementationAndCropPrices01)'')  
EXEC(''DELETE FROM WeatherCondition01 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.WeatherCondition01)'')  

--Delete from Quarterly Tables
EXEC(''DELETE FROM CoopGroup02 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.CoopGroup02)'') 
EXEC(''DELETE FROM CoopSaccos02 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.CoopSaccos02)'')
EXEC(''DELETE FROM FarmersFieldSchool02 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.FarmersFieldSchool02)'')
EXEC(''DELETE FROM FoodCondition02 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.FoodCondition02)'')
EXEC(''DELETE FROM Irrigation02 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.Irrigation02)'')
EXEC(''DELETE FROM PlantHealth02 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.PlantHealth02)'')
EXEC(''DELETE FROM ProdLand02 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ProdLand02)'')
EXEC(''DELETE FROM SoilErosion02 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.SoilErosion02)'')

--Delete from Annually Table
EXEC(''DELETE FROM AiredPrograms03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.AiredPrograms03)'') 
EXEC(''DELETE FROM AnimalDrawn03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.AnimalDrawn03)'')
EXEC(''DELETE FROM BasicInformation03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.BasicInformation03)'')
EXEC(''DELETE FROM ContractFarming03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ContractFarming03)'')
EXEC(''DELETE FROM CropResidue03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.CropResidue03)'')
EXEC(''DELETE FROM FarmersFieldSchool03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.FarmersFieldSchool03)'')
EXEC(''DELETE FROM Fertilizer03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.Fertilizer03)'')
EXEC(''DELETE FROM GrazingLand03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.GrazingLand03)'')
EXEC(''DELETE FROM HandOperatedImplements03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.HandOperatedImplements03)'')
EXEC(''DELETE FROM ImprovedPasture03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ImprovedPasture03)'')
EXEC(''DELETE FROM ImprovedSeeds03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ImprovedSeeds03)'')
EXEC(''DELETE FROM IrrigationScheme03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.IrrigationScheme03)'')
EXEC(''DELETE FROM Livestock03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.Livestock03)'')
EXEC(''DELETE FROM LivestockInfrastructure03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.LivestockInfrastructure03)'')
EXEC(''DELETE FROM MachineryDrawn03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.MachineryDrawn03)'')
EXEC(''DELETE FROM Machines03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.Machines03)'')
EXEC(''DELETE FROM Pestcide03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.Pestcide03)'')
EXEC(''DELETE FROM ProcessingMachines03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ProcessingMachines03)'')
EXEC(''DELETE FROM Telecommunication03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.Telecommunication03)'')
EXEC(''DELETE FROM TVAndRadioStation03 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.TVAndRadioStation03)'')

--Delete from District Quarter
EXEC(''DELETE FROM AnimalsFeeds04 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.AnimalsFeeds04)'')
EXEC(''DELETE FROM LivestockMarketing04 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.LivestockMarketing04)'')
EXEC(''DELETE FROM LivestockMovement04 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.LivestockMovement04)'')
EXEC(''DELETE FROM ProductsMovement04 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ProductsMovement04)'')
EXEC(''DELETE FROM ReproductionInputs04 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ReproductionInputs04)'')

--Delete from District Annual
EXEC(''DELETE FROM DistrictInfo05 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.DistrictInfo05)'')
EXEC(''DELETE FROM EducationLevel05 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.EducationLevel05)'') 
EXEC(''DELETE FROM ExtensionOfficers05 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ExtensionOfficers05)'')
EXEC(''DELETE FROM ExtensionOfficersTrained05 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ExtensionOfficersTrained05)'')
EXEC(''DELETE FROM ExtensionServiceProviders05 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ExtensionServiceProviders05)'')
EXEC(''DELETE FROM FoodSituation05 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.FoodSituation05)'')
EXEC(''DELETE FROM LivestockInfrastructure05 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.LivestockInfrastructure05)'')
EXEC(''DELETE FROM LivestockPopulation05 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.LivestockPopulation05)'')
EXEC(''DELETE FROM Oxenizing05 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.Oxenizing05)'')
EXEC(''DELETE FROM PlanningCommitee05 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.PlanningCommitee05)'')
EXEC(''DELETE FROM ProductsProcessing05 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.ProductsProcessing05)'')
EXEC(''DELETE FROM WorkingEquipments05 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.WorkingEquipments05)'')
EXEC(''DELETE FROM WorkingFacilities05 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.WorkingFacilities05)'')

--Delete from Annual Target
EXEC(''DELETE FROM TargetImplementationAndCropPrices06 WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.TargetImplementationAndCropPrices06)'')

--Delete on Top Four
EXEC(''DELETE FROM AnnualRecord WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.AnnualRecord)'')
EXEC(''DELETE FROM QuarterlyRecord WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.QuarterlyRecord)'')
EXEC(''DELETE FROM MonthlyRecord WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.MonthlyRecord)'')
EXEC(''DELETE FROM RecordInfo WHERE FormSerialID IN (SELECT FormSerialID FROM '' + @dbImported + ''.dbo.RecordInfo)'')

--Insert into Top Four
--Check on AnnualRecord RowVersionID column	
EXEC(''INSERT INTO RecordInfo([RecordID],[AreaID],[OfficerName],[SubmissionDate],[PeriodFrom],[PeriodTo],[FormTypeNumber],[DateCaptured],[CapturedByUserID],[DateApproved],[ApprovedByUserID],[Comments],[OrganisationID],[FormSerialID],[FormSerialNumber],[FormSerialNumberIQ],[FormSerialNumberIA]) SELECT [RecordID],[AreaID],[OfficerName],[SubmissionDate],[PeriodFrom],[PeriodTo],[FormTypeNumber],[DateCaptured],[CapturedByUserID],[DateApproved],[ApprovedByUserID],[Comments],[OrganisationID],[FormSerialID],[FormSerialNumber],[FormSerialNumberIQ],[FormSerialNumberIA] FROM '' + @dbImported + ''.dbo.RecordInfo '')
EXEC(''INSERT INTO MonthlyRecord([RecordID],[Month],[FormSerialID]) SELECT [RecordID],[Month],[FormSerialID] FROM '' + @dbImported + ''.dbo.MonthlyRecord '')
EXEC(''INSERT INTO QuarterlyRecord([RecordID],[Quarter],[MonthInterval],[FormSerialID]) SELECT [RecordID],[Quarter],[MonthInterval],[FormSerialID] FROM '' + @dbImported + ''.dbo.QuarterlyRecord '')
EXEC(''INSERT INTO AnnualRecord([RecordID],[FormSerialID]) SELECT [RecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.AnnualRecord '')

--Insert into Monthly Table
EXEC(''INSERT INTO ChemicalControl01([ChemicalControlID],[PestID],[CropID],[Severity],[AffectedArea],[NumberOfVillageAffected],[PestcideApplied],[AmountOfPestcideApplied],[Unit],[NumberOfVillagesServed],[NumberOfHouseHoldServed],[AreaRescued],[Remarks],[MonthlyRecordID],[FormSerialID]) SELECT [ChemicalControlID],[PestID],[CropID],[Severity],[AffectedArea],[NumberOfVillageAffected],[PestcideApplied],[AmountOfPestcideApplied],[Unit],[NumberOfVillagesServed],[NumberOfHouseHoldServed],[AreaRescued],[Remarks],[MonthlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ChemicalControl01 '') 
EXEC(''INSERT INTO CommentsOfVillageOfficer01([CommentsOfVillageOfficerID],[Achievement],[Challenges],[MonthlyRecordID],[FormSerialID]) SELECT [CommentsOfVillageOfficerID],[Achievement],[Challenges],[MonthlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.CommentsOfVillageOfficer01 '')
EXEC(''INSERT INTO DippingSprayingVaccination01([DippingSprayingVaccinationID],[LivestockListID],[NumberDipped],[DippingMedicineApplied],[NumberSprayed],[SprayMedicineApplied],[NumberVaccinated],[VaccineApplied],[MonthlyRecordID],[FormSerialID]) SELECT [DippingSprayingVaccinationID],[LivestockListID],[NumberDipped],[DippingMedicineApplied],[NumberSprayed],[SprayMedicineApplied],[NumberVaccinated],[VaccineApplied],[MonthlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.DippingSprayingVaccination01 '')
EXEC(''INSERT INTO LivestockService01([LivestockServiceID],[LivestockID],[CuttingHoof],[Castration],[AI],[CuttingHorn],[Branding],[CuttingTail],[CuttingTeeth],[CuttingBillBeak],[MonthlyRecordID],[FormSerialID]) SELECT [LivestockServiceID],[LivestockID],[CuttingHoof],[Castration],[AI],[CuttingHorn],[Branding],[CuttingTail],[CuttingTeeth],[CuttingBillBeak],[MonthlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.LivestockService01 '')
EXEC(''INSERT INTO LivestockSlaughtered01([LivestockSlaughteredID],[LivestockID],[TotalNumberSlaughteredThisMonth],[AverageRetailPriceKg],[MonthlyRecordID],[FormSerialID]) SELECT [LivestockSlaughteredID],[LivestockID],[TotalNumberSlaughteredThisMonth],[AverageRetailPriceKg],[MonthlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.LivestockSlaughtered01 '')
EXEC(''INSERT INTO MeatInspection01([MeatInspectionID],[NameofPlaceForSlaughter],[TypeOfAnimal],[NumberOfAnimalsAffected],[ReasonsForCondemnations],[NumberOfCases],[MonthlyRecordID],[FormSerialID]) SELECT [MeatInspectionID],[NameofPlaceForSlaughter],[TypeOfAnimal],[NumberOfAnimalsAffected],[ReasonsForCondemnations],[NumberOfCases],[MonthlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.MeatInspection01 '')
EXEC(''INSERT INTO Medication01([MedicationID],[LivestockListID],[PestDiseaseListID],[NumberAffected],[NumberTreated],[NumberRecovered],[NumberDied],[TreatmentMedicineApplied],[MonthlyRecordID],[FormSerialID]) SELECT [MedicationID],[LivestockListID],[PestDiseaseListID],[NumberAffected],[NumberTreated],[NumberRecovered],[NumberDied],[TreatmentMedicineApplied],[MonthlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.Medication01 '')
EXEC(''INSERT INTO PeopleWhoVisitTheVillage01([PeopleWhoVisitTheVillageID],[VisitingDate],[NameOfVisitor],[Address],[MainPurposeOfVisit],[InstructionsAdviceProvided],[MonthlyRecordID],[FormSerialID]) SELECT [PeopleWhoVisitTheVillageID],[VisitingDate],[NameOfVisitor],[Address],[MainPurposeOfVisit],[InstructionsAdviceProvided],[MonthlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.PeopleWhoVisitTheVillage01 '')
EXEC(''INSERT INTO ProdMilk01([ProdMilkID],[ProdTypeID],[AmountThisMonth],[MonthlyRecordID],[FormSerialID]) SELECT [ProdMilkID],[ProdTypeID],[AmountThisMonth],[MonthlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ProdMilk01 '')
EXEC(''INSERT INTO ProdSkin01([HideAndSkinID],[TypeOfProdID],[DrySuspended],[DrySalted],[WetBlue],[Remarks],[MonthlyRecordID],[FormSerialID]) SELECT [HideAndSkinID],[TypeOfProdID],[DrySuspended],[DrySalted],[WetBlue],[Remarks],[MonthlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ProdSkin01 '')
EXEC(''INSERT INTO TargetImplementationAndCropPrices01([TargetImplementationAndCropPricesID],[CropID],[ExpectedArea],[ExpectedProd],[AreaDone],[ProdDone],[Price],[Explanation],[MonthlyRecordID],[FormSerialID]) SELECT [TargetImplementationAndCropPricesID],[CropID],[ExpectedArea],[ExpectedProd],[AreaDone],[ProdDone],[Price],[Explanation],[MonthlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.TargetImplementationAndCropPrices01 '')
EXEC(''INSERT INTO WeatherCondition01([WeatherCondition],[NumberOfDays],[AmountOfRain],[Explanation],[Disaster],[Activity],[MonthlyRecordID],[FormSerialID]) SELECT [WeatherCondition],[NumberOfDays],[AmountOfRain],[Explanation],[Disaster],[Activity],[MonthlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.WeatherCondition01 '')

--Insert into Quarterly Table
EXEC(''INSERT INTO CoopGroup02([CoopGroupID],[CoopID],[NumberOfGroups],[NumberOfMaleMembers],[NumberOfFemaleMembers],[NumberOfTotalMembers],[TotalNumberRegistered],[TotalNumberWithBankAccount],[RecordID],[FormSerialID]) SELECT [CoopGroupID],[CoopID],[NumberOfGroups],[NumberOfMaleMembers],[NumberOfFemaleMembers],[NumberOfTotalMembers],[TotalNumberRegistered],[TotalNumberWithBankAccount],[RecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.CoopGroup02 '') 
EXEC(''INSERT INTO CoopSaccos02([CoopSaccosID],[NumberOfSaccoss],[MembersMale],[MembersFemale],[MembersGroups],[LoanCrop],[LoanLivestock],[LoanFishery],[LoanMarketing],[RecordID],[FormSerialID]) SELECT [CoopSaccosID],[NumberOfSaccoss],[MembersMale],[MembersFemale],[MembersGroups],[LoanCrop],[LoanLivestock],[LoanFishery],[LoanMarketing],[RecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.CoopSaccos02 '')
EXEC(''INSERT INTO FarmersFieldSchool02([FarmersFieldSchoolID],[FieldID],[FieldActivity],[NumberOfFarmersTrainedMale],[NumberOfFarmersTrainedFemale],[NumberOfFarmersTrainedLessThanWeek],[NumberOfFarmersTrainedMoreThanWeek],[MethodOfTraining],[NameOfTrainingPersonell],[Remarks],[RecordID],[FormSerialID]) SELECT [FarmersFieldSchoolID],[FieldID],[FieldActivity],[NumberOfFarmersTrainedMale],[NumberOfFarmersTrainedFemale],[NumberOfFarmersTrainedLessThanWeek],[NumberOfFarmersTrainedMoreThanWeek],[MethodOfTraining],[NameOfTrainingPersonell],[Remarks],[RecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.FarmersFieldSchool02 '')
EXEC(''INSERT INTO FoodCondition02([FoodConditionID],[FoodStatustID],[Remarks],[FamilyNoFood],[FamilyLessFood],[FamilyEnoughFood],[FamilyExcessFood],[RecordID],[FormSerialID]) SELECT [FoodConditionID],[FoodStatustID],[Remarks],[FamilyNoFood],[FamilyLessFood],[FamilyEnoughFood],[FamilyExcessFood],[RecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.FoodCondition02 '')
EXEC(''INSERT INTO Irrigation02([IrrigationID],[CropID],[PlantedAreaRainySeason],[PlantedAreaDrySeason],[ProductionRainySeason],[ProductionDrySeason],[YieldRainySeason],[YieldDrySeason],[RecordID],[FormSerialID]) SELECT [IrrigationID],[CropID],[PlantedAreaRainySeason],[PlantedAreaDrySeason],[ProductionRainySeason],[ProductionDrySeason],[YieldRainySeason],[YieldDrySeason],[RecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.Irrigation02 '')
EXEC(''INSERT INTO PlantHealth02([PlantHealthID],[DiseaseID],[CropID],[ControlMeasures],[AreaControled],[HouseholdsInvolved],[Comments],[RecordID],[FormSerialID]) SELECT [PlantHealthID],[DiseaseID],[CropID],[ControlMeasures],[AreaControled],[HouseholdsInvolved],[Comments],[RecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.PlantHealth02 '')
EXEC(''INSERT INTO ProdLand02([ProdLandID],[ActivityID],[Tractor],[Animals],[Hand],[NoFarming],[Total],[RecordID],[FormSerialID]) SELECT [ProdLandID],[ActivityID],[Tractor],[Animals],[Hand],[NoFarming],[Total],[RecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ProdLand02 '')
EXEC(''INSERT INTO SoilErosion02([SoilErosionID],[SoilErosionListID],[VillagesInvolved],[AreaDestroyed],[ControlMeasures],[AreaControlled],[Remarks],[RecordID],[FormSerialID]) SELECT [SoilErosionID],[SoilErosionListID],[VillagesInvolved],[AreaDestroyed],[ControlMeasures],[AreaControlled],[Remarks],[RecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.SoilErosion02 '')

--Insert into Annually Table
--Check RowVersionID column
EXEC(''INSERT INTO AiredPrograms03([AiredProgramsID],[NameOfStation],[NameOfProgram],[FrequencyTimeInAWeek],[TypeOfInformation],[AnnualRecordID],[FormSerialID]) SELECT [AiredProgramsID],[NameOfStation],[NameOfProgram],[FrequencyTimeInAWeek],[TypeOfInformation],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.AiredPrograms03 '') 
EXEC(''INSERT INTO AnimalDrawn03([AnimalDrawnID],[DrawnID],[WorkingIndividuallyOwned],[WorkingGroupowned],[AnnualRecordID],[FormSerialID]) SELECT [AnimalDrawnID],[DrawnID],[WorkingIndividuallyOwned],[WorkingGroupowned],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.AnimalDrawn03 '')
EXEC(''INSERT INTO BasicInformation03([BasicInformationID],[MaleHeadedHousehold],[FemaleHeadedHousehold],[NumberOfHouseholdEngagingInAgriculture],[PopulationMale],[PopulationFemale],[PopulationEngagingInAgriculture],[AnnualRecordID],[FormSerialID]) SELECT [BasicInformationID],[MaleHeadedHousehold],[FemaleHeadedHousehold],[NumberOfHouseholdEngagingInAgriculture],[PopulationMale],[PopulationFemale],[PopulationEngagingInAgriculture],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.BasicInformation03 '')
EXEC(''INSERT INTO ContractFarming03([ContractFarmingID],[ActivityID],[ContractNumberOfHouseholdInvolved],[ContractNumberOfContractorsInvolved],[ContractMajorProducts],[OutgrowersNumberOfHouseholdInvolved],[OutgrowersNumberOfContractorsInvolved],[OutgrowersMajorProducts],[AnnualRecordID],[FormSerialID]) SELECT [ContractFarmingID],[ActivityID],[ContractNumberOfHouseholdInvolved],[ContractNumberOfContractorsInvolved],[ContractMajorProducts],[OutgrowersNumberOfHouseholdInvolved],[OutgrowersNumberOfContractorsInvolved],[OutgrowersMajorProducts],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ContractFarming03 '')
EXEC(''INSERT INTO CropResidue03([CropResidueID],[TypeOfCrop],[AmountOfHayBales],[AreaOfFarmsPlotsGazedinSitu],[Remarks],[AnnualRecordID],[FormSerialID]) SELECT [CropResidueID],[TypeOfCrop],[AmountOfHayBales],[AreaOfFarmsPlotsGazedinSitu],[Remarks],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.CropResidue03 '')
EXEC(''INSERT INTO FarmersFieldSchool03([FarmersFieldSchoolID],[FieldID],[FieldActivity],[NumberOfFieldSchool],[NumberOfFarmersStartedMale],[NumberOfFarmersStartedFemale],[AverageDuration],[NumberOfFarmersCompletedMale],[NumberOfFarmersCompletedFemale],[NumberOfVillagesCovered],[NumberOfFarmersWhoAppliedTheTechniquesLearned],[Remarks],[AnnualRecordID],[FormSerialID]) SELECT [FarmersFieldSchoolID],[FieldID],[FieldActivity],[NumberOfFieldSchool],[NumberOfFarmersStartedMale],[NumberOfFarmersStartedFemale],[AverageDuration],[NumberOfFarmersCompletedMale],[NumberOfFarmersCompletedFemale],[NumberOfVillagesCovered],[NumberOfFarmersWhoAppliedTheTechniquesLearned],[Remarks],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.FarmersFieldSchool03 '')
EXEC(''INSERT INTO Fertilizer03([Fertilizer03ID],[FertilizerID],[AnnualNeeds],[AnnualUsage],[Explanation],[AnnualRecordID],[FormSerialID]) SELECT [Fertilizer03ID],[FertilizerID],[AnnualNeeds],[AnnualUsage],[Explanation],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.Fertilizer03 '')
EXEC(''INSERT INTO GrazingLand03([GrazingLandID],[LivestockID],[NumberOfAnimals],[TotalGrazingLandInTheVillage],[UtilizedLand],[TotalDemarcatedLand],[TotalAreaLeased],[AnnualRecordID],[FormSerialID]) SELECT [GrazingLandID],[LivestockID],[NumberOfAnimals],[TotalGrazingLandInTheVillage],[UtilizedLand],[TotalDemarcatedLand],[TotalAreaLeased],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.GrazingLand03 '')
EXEC(''INSERT INTO HandOperatedImplements03([HandOperatedImplementsID],[ImplementID],[NumberOfImplements],[AnnualRecordID],[FormSerialID]) SELECT [HandOperatedImplementsID],[ImplementID],[NumberOfImplements],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.HandOperatedImplements03 '')
EXEC(''INSERT INTO ImprovedPasture03([ImprovedPastureID],[NumberOfFarms],[Area],[SeedProduction],[AmountOfHayBales],[Remarks],[AnnualRecordID],[FormSerialID]) SELECT [ImprovedPastureID],[NumberOfFarms],[Area],[SeedProduction],[AmountOfHayBales],[Remarks],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ImprovedPasture03 '')
EXEC(''INSERT INTO ImprovedSeeds03([ImprovedSeedsID],[CropID],[CropNameOthers],[AnnualRequirementForTheReportingYear],[NameOfImprovedVariety],[AmountUsedInTheReportingYearQualityDeclareSeed],[AmountUsedInTheReportingYearCertifiedSeed],[Remarks],[AnnualRecordID],[FormSerialID]) SELECT [ImprovedSeedsID],[CropID],[CropNameOthers],[AnnualRequirementForTheReportingYear],[NameOfImprovedVariety],[AmountUsedInTheReportingYearQualityDeclareSeed],[AmountUsedInTheReportingYearCertifiedSeed],[Remarks],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ImprovedSeeds03 '')
EXEC(''INSERT INTO IrrigationScheme03([IrrigationSchemeID],[SchemeID],[SchemeName],[NameOfWaterSource],[PotentialArea],[AreaUnderImprovedIrrigation],[Seasonirrigated],[StatusOfScheme],[NumberOfMembersInIrrigationSchemeMale],[NumberOfMembersInIrrigationSchemeFemale],[NumberOfFarmersUsingInfrastructureMale],[NumberOfFarmersUsingInfrastructureFemale],[AnnualRecordID],[FormSerialID]) SELECT [IrrigationSchemeID],[SchemeID],[SchemeName],[NameOfWaterSource],[PotentialArea],[AreaUnderImprovedIrrigation],[Seasonirrigated],[StatusOfScheme],[NumberOfMembersInIrrigationSchemeMale],[NumberOfMembersInIrrigationSchemeFemale],[NumberOfFarmersUsingInfrastructureMale],[NumberOfFarmersUsingInfrastructureFemale],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.IrrigationScheme03 '')
EXEC(''INSERT INTO Livestock03([LivestockID],[AnimalID],[NumberOfIndigenous],[NumberOfImprovedMeat],[NumberOfImprovedDairy],[TotalRegistered],[Remarks],[AnnualRecordID],[FormSerialID]) SELECT [LivestockID],[AnimalID],[NumberOfIndigenous],[NumberOfImprovedMeat],[NumberOfImprovedDairy],[TotalRegistered],[Remarks],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.Livestock03 '')
EXEC(''INSERT INTO LivestockInfrastructure03([LivestockInfrastructureID],[InfraID],[Working],[NotWorking],[NumberRequired],[NumberOfRegistered],[ReasonsForNotWorking],[AnnualRecordID],[FormSerialID]) SELECT [LivestockInfrastructureID],[InfraID],[Working],[NotWorking],[NumberRequired],[NumberOfRegistered],[ReasonsForNotWorking],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.LivestockInfrastructure03 '')
EXEC(''INSERT INTO MachineryDrawn03([MachineryDrawnID],[DrawnID],[WorkingIndividuallyOwned],[WorkingGroupowned],[AnnualRecordID],[FormSerialID]) SELECT [MachineryDrawnID],[DrawnID],[WorkingIndividuallyOwned],[WorkingGroupowned],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.MachineryDrawn03 '')
EXEC(''INSERT INTO Machines03([MachinesID],[MachineryID],[WorkingIndividuallyOwned],[WorkingGroupOwned],[NotWorkingIndividuallyOwned],[NotWorkingGroupowned],[ReasonForNotWorking],[AnnualRecordID],[FormSerialID]) SELECT [MachinesID],[MachineryID],[WorkingIndividuallyOwned],[WorkingGroupOwned],[NotWorkingIndividuallyOwned],[NotWorkingGroupowned],[ReasonForNotWorking],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.Machines03 '')
EXEC(''INSERT INTO Pestcide03([Pestcide03ID],[PesticideID],[Pestcide03Name],[Measurement],[UsagePerYear],[Remarks],[AnnualRecordID],[FormSerialID]) SELECT [Pestcide03ID],[PesticideID],[Pestcide03Name],[Measurement],[UsagePerYear],[Remarks],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.Pestcide03 '')
EXEC(''INSERT INTO ProcessingMachines03([ProcessingMachinesID],[MachineID],[WorkingIndividuallyOwned],[WorkingGroupowned],[NotWorkingIndividuallyOwned],[NotWorkingGroupowned],[ReasonForNotWorking],[AnnualRecordID],[FormSerialID]) SELECT [ProcessingMachinesID],[MachineID],[WorkingIndividuallyOwned],[WorkingGroupowned],[NotWorkingIndividuallyOwned],[NotWorkingGroupowned],[ReasonForNotWorking],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ProcessingMachines03 '')
EXEC(''INSERT INTO Telecommunication03([TelecommunicationID],[TelecomCompID],[NumberOfVillagesCovered],[AnnualRecordID],[FormSerialID]) SELECT [TelecommunicationID],[TelecomCompID],[NumberOfVillagesCovered],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.Telecommunication03 '')
EXEC(''INSERT INTO TVAndRadioStation03([TVAndRadioStationID],[StationID],[NumberOfVillagesCovered],[AnnualRecordID],[FormSerialID]) SELECT [TVAndRadioStationID],[StationID],[NumberOfVillagesCovered],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.TVAndRadioStation03 '')

--Insert into District Quarterly Table
--Check row versionID column
EXEC(''INSERT INTO AnimalsFeeds04([AnimalsFeedsID],[FeedsID],[GenericName],[TradeName],[Source],[MeasurementUnit],[QuarterlyRequirement],[QuarterlyAmountUsed],[LowPrice],[HighPrice],[Remarks],[QuarterlyRecordID],[FormSerialID]) SELECT [AnimalsFeedsID],[FeedsID],[GenericName],[TradeName],[Source],[MeasurementUnit],[QuarterlyRequirement],[QuarterlyAmountUsed],[LowPrice],[HighPrice],[Remarks],[QuarterlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.AnimalsFeeds04 '')
EXEC(''INSERT INTO LivestockMarketing04([LivestockMarketingID],[LivestockID],[WarmThisQuarter],[ChilledThisQuarter],[FrozenThisQuarter],[Comments],[QuarterlyRecordID],[FormSerialID]) SELECT [LivestockMarketingID],[LivestockID],[WarmThisQuarter],[ChilledThisQuarter],[FrozenThisQuarter],[Comments],[QuarterlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.LivestockMarketing04 '')
EXEC(''INSERT INTO LivestockMovement04([LivestockMovementID],[LivestockID],[AnimalsIntoNonTrade],[AnimalsIntoTradeFromLGA],[AnimalsIntoTradeFromCountries],[AnimalsToNonTrade],[AnimalsToTradeLGA],[AnimalsToTradeCountries],[AnimalsTransNonTrade],[AnimalsTransTrade],[QuarterlyRecordID],[FormSerialID]) SELECT [LivestockMovementID],[LivestockID],[AnimalsIntoNonTrade],[AnimalsIntoTradeFromLGA],[AnimalsIntoTradeFromCountries],[AnimalsToNonTrade],[AnimalsToTradeLGA],[AnimalsToTradeCountries],[AnimalsTransNonTrade],[AnimalsTransTrade],[QuarterlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.LivestockMovement04 '')
EXEC(''INSERT INTO ProductsMovement04([ProductMovementID],[ProductID],[SoldWithinDistricts],[SoldOtherDistricts],[SoldOtherCountries],[QuarterlyRecordID],[FormSerialID]) SELECT [ProductMovementID],[ProductID],[SoldWithinDistricts],[SoldOtherDistricts],[SoldOtherCountries],[QuarterlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ProductsMovement04 '')
EXEC(''INSERT INTO ReproductionInputs04([ReproductionInputsID],[InputID],[Breed],[AmountRequired],[AmountAvailable],[Remarks],[QuarterlyRecordID],[FormSerialID]) SELECT [ReproductionInputsID],[InputID],[Breed],[AmountRequired],[AmountAvailable],[Remarks],[QuarterlyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ReproductionInputs04 '')

--Insert into District Annually Table
EXEC(''INSERT INTO DistrictInfo05([DistrictInfoID],[NumberOfWards],[NumberOfVillages],[NumberOfHousehold],[NumberOfHouseholdAgriculture],[DistrictPopulation],[ModeOfInternetAccess],[NumberOfOfficersTrained],[NumberOfResourceCentres],[AnnuallyRecordID],[FormSerialID]) SELECT [DistrictInfoID],[NumberOfWards],[NumberOfVillages],[NumberOfHousehold],[NumberOfHouseholdAgriculture],[DistrictPopulation],[ModeOfInternetAccess],[NumberOfOfficersTrained],[NumberOfResourceCentres],[AnnuallyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.DistrictInfo05 '') 
EXEC(''INSERT INTO EducationLevel05([EducationLevelID],[LevelID],[HQMale],[HQFemale],[WardMale],[WardFemale],[VillageMale],[VillageFemale],[Total],[AnnuallyRecordID],[FormSerialID]) SELECT [EducationLevelID],[LevelID],[HQMale],[HQFemale],[WardMale],[WardFemale],[VillageMale],[VillageFemale],[Total],[AnnuallyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.EducationLevel05 '')
EXEC(''INSERT INTO ExtensionOfficers05([ExtensionServiceID],[SpecilizationID],[NumberOfDistrictMale],[NumberOfDistrictFemale],[NumberOfWardsMale],[NumberOfWardsFemale],[NumberOfVillagesMale],[NumberOfVillagesFemale],[TotalRegisterd],[AnnuallyRecordID],[FormSerialID]) SELECT [ExtensionServiceID],[SpecilizationID],[NumberOfDistrictMale],[NumberOfDistrictFemale],[NumberOfWardsMale],[NumberOfWardsFemale],[NumberOfVillagesMale],[NumberOfVillagesFemale],[TotalRegisterd],[AnnuallyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ExtensionOfficers05 '')
EXEC(''INSERT INTO ExtensionOfficersTrained05([ExtensionOfficersTrainedID],[FieldID],[FieldActivity],[NumberOfMaleOfficersTrained],[NumberOfFemaleOfficersTrained],[NumberOfOfficersTrainedLessThanSixMonths],[NumberOfOfficersTrainedMoreThanSixMonths],[TrainingMethods],[TrainingProviders],[Remarks],[AnnuallyRecordID],[FormSerialID]) SELECT [ExtensionOfficersTrainedID],[FieldID],[FieldActivity],[NumberOfMaleOfficersTrained],[NumberOfFemaleOfficersTrained],[NumberOfOfficersTrainedLessThanSixMonths],[NumberOfOfficersTrainedMoreThanSixMonths],[TrainingMethods],[TrainingProviders],[Remarks],[AnnuallyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ExtensionOfficersTrained05 '')
EXEC(''INSERT INTO ExtensionServiceProviders05([ExtensionServiceProviderID],[NameOfServiceProvider],[TypeOfServiceProvider],[TypeOfService],[NumberOFVillages],[AnnuallyRecordID],[FormSerialID]) SELECT [ExtensionServiceProviderID],[NameOfServiceProvider],[TypeOfServiceProvider],[TypeOfService],[NumberOFVillages],[AnnuallyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ExtensionServiceProviders05 '')
EXEC(''INSERT INTO FoodSituation05([FoodSituationID],[FoodTypeID],[FoodCropsID],[TotalProduction],[Factor],[CerealEquivalent],[TotalCerealEquivalent],[RequirementCerealEquivalent],[SurplusDeficit],[AnnuallyRecordID],[FormSerialID]) SELECT [FoodSituationID],[FoodTypeID],[FoodCropsID],[TotalProduction],[Factor],[CerealEquivalent],[TotalCerealEquivalent],[RequirementCerealEquivalent],[SurplusDeficit],[AnnuallyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.FoodSituation05 '')
EXEC(''INSERT INTO LivestockInfrastructure05([LivestockInfrastructureID],[InfraID],[NumberWorking],[NumberNotWorking],[NumberRequired],[NumberRegistered],[ReasonsForNotWorking],[AnnuallyRecordID],[FormSerialID]) SELECT [LivestockInfrastructureID],[InfraID],[NumberWorking],[NumberNotWorking],[NumberRequired],[NumberRegistered],[ReasonsForNotWorking],[AnnuallyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.LivestockInfrastructure05 '')
EXEC(''INSERT INTO LivestockPopulation05([LivestockPopulationID],[NameOfFarm],[TypeOfOwnership],[RegistrationNumber],[NumberOfCattle],[NumberOfSheep],[NumberOfGoats],[NumberOfPigs],[NumberOfLayers],[NumberOfBloilers],[Remarks],[AnnuallyRecordID],[FormSerialID]) SELECT [LivestockPopulationID],[NameOfFarm],[TypeOfOwnership],[RegistrationNumber],[NumberOfCattle],[NumberOfSheep],[NumberOfGoats],[NumberOfPigs],[NumberOfLayers],[NumberOfBloilers],[Remarks],[AnnuallyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.LivestockPopulation05 '')
EXEC(''INSERT INTO Oxenizing05([OxenizingID],[CentresID],[Working],[NotWorking],[ReasonsForNotWorking],[AnnuallyRecordID],[FormSerialID]) SELECT [OxenizingID],[CentresID],[Working],[NotWorking],[ReasonsForNotWorking],[AnnuallyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.Oxenizing05 '')
EXEC(''INSERT INTO PlanningCommitee05([PlanningCommiteeID],[SexID],[Number],[Percentage],[AnnuallyRecordID],[FormSerialID]) SELECT [PlanningCommiteeID],[SexID],[Number],[Percentage],[AnnuallyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.PlanningCommitee05 '')
EXEC(''INSERT INTO ProductsProcessing05([ProductProcessingID],[ProcessingID],[NameOfBussiness],[RegistrationNumber],[TypeOfProduct],[MeasurementUnit],[InstalledProduction],[UtilizedProduction],[AnnuallyRecordID],[FormSerialID]) SELECT [ProductProcessingID],[ProcessingID],[NameOfBussiness],[RegistrationNumber],[TypeOfProduct],[MeasurementUnit],[InstalledProduction],[UtilizedProduction],[AnnuallyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.ProductsProcessing05 '')
EXEC(''INSERT INTO WorkingEquipments05([WorkingEquipmentsID],[StationID],[NumberOfExtensionKitRequired],[NumberOfExtensionKitAvailable],[NumberOfPhotocopierRequired],[NumberOfPhotocopierAvailable],[NumberOfComputerRequired],[NumberOfComputerAvailable],[NumberOfOtherAvailable],[NumberOfOtherRequired],[AnnuallyRecordID],[FormSerialID]) SELECT [WorkingEquipmentsID],[StationID],[NumberOfExtensionKitRequired],[NumberOfExtensionKitAvailable],[NumberOfPhotocopierRequired],[NumberOfPhotocopierAvailable],[NumberOfComputerRequired],[NumberOfComputerAvailable],[NumberOfOtherAvailable],[NumberOfOtherRequired],[AnnuallyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.WorkingEquipments05 '')
EXEC(''INSERT INTO WorkingFacilities05([WorkingFacilitiesID],[StationID],[NumberOfVehicleRequired],[NumberOfVehicleAvailable],[NumberOfMotorcycleRequired],[NumberOfMotorcycleAvailable],[NumberOfBicycleRequired],[NumberOfBicycleAvailable],[NumberOfHousingRequired],[NumberOfHousingAvailable],[AnnuallyRecordID],[FormSerialID]) SELECT [WorkingFacilitiesID],[StationID],[NumberOfVehicleRequired],[NumberOfVehicleAvailable],[NumberOfMotorcycleRequired],[NumberOfMotorcycleAvailable],[NumberOfBicycleRequired],[NumberOfBicycleAvailable],[NumberOfHousingRequired],[NumberOfHousingAvailable],[AnnuallyRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.WorkingFacilities05 '')

--Insert into Annual Target Table
EXEC(''INSERT INTO TargetImplementationAndCropPrices06([TargetImplementationAndCropPricesID],[CropID],[ExpectedArea],[ExpectedProd],[Explanation],[AnnualRecordID],[FormSerialID]) SELECT [TargetImplementationAndCropPricesID],[CropID],[ExpectedArea],[ExpectedProd],[Explanation],[AnnualRecordID],[FormSerialID] FROM '' + @dbImported + ''.dbo.TargetImplementationAndCropPrices06 '')
END

' 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspExportData]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspExportData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspExportData]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@DatabaseName varchar(100),
@strCriteria nvarchar(100) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
EXEC(''SELECT [RecordID],[AreaID],[OfficerName],[SubmissionDate],[PeriodFrom],[PeriodTo],[FormTypeNumber],[DateCaptured],[CapturedByUserID],[DateApproved],[ApprovedByUserID],[Comments],[OrganisationID],[FormSerialID],[FormSerialNumber],[FormSerialNumberIQ],[FormSerialNumberIA] INTO ''+@DatabaseName+''.dbo.RecordInfo FROM RecordInfo '' + @strCriteria + '''')
EXEC(''SELECT [RecordID],[Month],[FormSerialID] INTO ''+@DatabaseName+''.dbo.MonthlyRecord FROM MonthlyRecord '' + @strCriteria + '''')
EXEC(''SELECT [RecordID],[Quarter],[MonthInterval],[FormSerialID] INTO ''+@DatabaseName+''.dbo.QuarterlyRecord FROM QuarterlyRecord '' + @strCriteria + '''')
EXEC(''SELECT RecordID,FormSerialID INTO ''+@DatabaseName+''.dbo.AnnualRecord FROM AnnualRecord ''  + @strCriteria + '''')

--Monthly Table

EXEC(''SELECT [ChemicalControlID],[PestID],[CropID],[Severity],[AffectedArea],[NumberOfVillageAffected],[PestcideApplied],[AmountOfPestcideApplied],[Unit],[NumberOfVillagesServed],[NumberOfHouseHoldServed],[AreaRescued],[Remarks],[MonthlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.ChemicalControl01 FROM ChemicalControl01 '' + @strCriteria + '''')
EXEC(''SELECT [CommentsOfVillageOfficerID],[Achievement],[Challenges],[MonthlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.CommentsOfVillageOfficer01 FROM CommentsOfVillageOfficer01 WHERE FormSerialID=''''@FormSerialNumber'''' '')
EXEC(''SELECT [DippingSprayingVaccinationID],[LivestockListID],[NumberDipped],[DippingMedicineApplied],[NumberSprayed],[SprayMedicineApplied],[NumberVaccinated],[VaccineApplied],[MonthlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.DippingSprayingVaccination01 FROM DippingSprayingVaccination01 '' + @strCriteria + '''')
EXEC(''SELECT [LivestockServiceID],[LivestockID],[CuttingHoof],[Castration],[AI],[CuttingHorn],[Branding],[CuttingTail],[CuttingTeeth],[CuttingBillBeak],[MonthlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.LivestockService01 FROM LivestockService01 '' + @strCriteria + '''')
EXEC(''SELECT [LivestockSlaughteredID],[LivestockID],[TotalNumberSlaughteredThisMonth],[AverageRetailPriceKg],[MonthlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.LivestockSlaughtered01 FROM LivestockSlaughtered01 '' + @strCriteria + '''')
EXEC(''SELECT [MeatInspectionID],[NameofPlaceForSlaughter],[TypeOfAnimal],[NumberOfAnimalsAffected],[ReasonsForCondemnations],[NumberOfCases],[MonthlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.MeatInspection01 FROM MeatInspection01 '' + @strCriteria + '''')
EXEC(''SELECT [MedicationID],[LivestockListID],[PestDiseaseListID],[NumberAffected],[NumberTreated],[NumberRecovered],[NumberDied],[TreatmentMedicineApplied],[MonthlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.Medication01 FROM Medication01 '' + @strCriteria + '''')
EXEC(''SELECT [PeopleWhoVisitTheVillageID],[VisitingDate],[NameOfVisitor],[Address],[MainPurposeOfVisit],[InstructionsAdviceProvided],[MonthlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.PeopleWhoVisitTheVillage01 FROM PeopleWhoVisitTheVillage01 '' + @strCriteria + '''')
EXEC(''SELECT [ProdMilkID],[ProdTypeID],[AmountThisMonth],[MonthlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.ProdMilk01 FROM ProdMilk01 '' + @strCriteria + '''')
EXEC(''SELECT [HideAndSkinID],[TypeOfProdID],[DrySuspended],[DrySalted],[WetBlue],[Remarks],[MonthlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.ProdSkin01 FROM ProdSkin01 '' + @strCriteria + '''')
EXEC(''SELECT [TargetImplementationAndCropPricesID],[CropID],[ExpectedArea],[ExpectedProd],[AreaDone],[ProdDone],[Price],[Explanation],[MonthlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.TargetImplementationAndCropPrices01 FROM TargetImplementationAndCropPrices01 '' + @strCriteria + '''')
EXEC(''SELECT [WeatherCondition],[NumberOfDays],[AmountOfRain],[Explanation],[Disaster],[Activity],[MonthlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.WeatherCondition01 FROM WeatherCondition01 '' + @strCriteria + '''')

--Quareterly table

EXEC(''SELECT [CoopGroupID],[CoopID],[NumberOfGroups],[NumberOfMaleMembers],[NumberOfFemaleMembers],[NumberOfTotalMembers],[TotalNumberRegistered],[TotalNumberWithBankAccount],[RecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.CoopGroup02 FROM CoopGroup02 '' + @strCriteria + '''')
EXEC(''SELECT [CoopSaccosID],[NumberOfSaccoss],[MembersMale],[MembersFemale],[MembersGroups],[LoanCrop],[LoanLivestock],[LoanFishery],[LoanMarketing],[RecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.CoopSaccos02 FROM CoopSaccos02 '' + @strCriteria + '''')
EXEC(''SELECT [FarmersFieldSchoolID],[FieldID],[FieldActivity],[NumberOfFarmersTrainedMale],[NumberOfFarmersTrainedFemale],[NumberOfFarmersTrainedLessThanWeek],[NumberOfFarmersTrainedMoreThanWeek],[MethodOfTraining],[NameOfTrainingPersonell],[Remarks],[RecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.FarmersFieldSchool02 FROM FarmersFieldSchool02 '' + @strCriteria + '''')
EXEC(''SELECT [FoodConditionID],[FoodStatustID],[Remarks],[FamilyNoFood],[FamilyLessFood],[FamilyEnoughFood],[FamilyExcessFood],[RecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.FoodCondition02 FROM FoodCondition02 '' + @strCriteria + '''')
EXEC(''SELECT [IrrigationID],[CropID],[PlantedAreaRainySeason],[PlantedAreaDrySeason],[ProductionRainySeason],[ProductionDrySeason],[YieldRainySeason],[YieldDrySeason],[RecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.Irrigation02 FROM Irrigation02 '' + @strCriteria + '''')
EXEC(''SELECT [PlantHealthID],[DiseaseID],[CropID],[ControlMeasures],[AreaControled],[HouseholdsInvolved],[Comments],[RecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.PlantHealth02 FROM PlantHealth02 '' + @strCriteria + '''')
EXEC(''SELECT [ProdLandID],[ActivityID],[Tractor],[Animals],[Hand],[NoFarming],[Total],[RecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.ProdLand02 FROM ProdLand02 '' + @strCriteria + '''')
EXEC(''SELECT [SoilErosionID],[SoilErosionListID],[VillagesInvolved],[AreaDestroyed],[ControlMeasures],[AreaControlled],[Remarks],[RecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.SoilErosion02 FROM SoilErosion02 '' + @strCriteria + '''')

--Annually table

EXEC(''SELECT [AiredProgramsID],[NameOfStation],[NameOfProgram],[FrequencyTimeInAWeek],[TypeOfInformation],[AnnualRecordID],[FormSerialID],[RowVersionID] INTO ''+@DatabaseName+''.dbo.AiredPrograms03 FROM AiredPrograms03 '' + @strCriteria + '''')
EXEC(''SELECT [AnimalDrawnID],[DrawnID],[WorkingIndividuallyOwned],[WorkingGroupowned],[AnnualRecordID],[FormSerialID],[RowVersionID] INTO ''+@DatabaseName+''.dbo.AnimalDrawn03 FROM AnimalDrawn03 '' + @strCriteria + '''')
EXEC(''SELECT [BasicInformationID],[MaleHeadedHousehold],[FemaleHeadedHousehold],[NumberOfHouseholdEngagingInAgriculture],[PopulationMale],[PopulationFemale],[PopulationEngagingInAgriculture],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.BasicInformation03 FROM BasicInformation03 '' + @strCriteria + '''')
EXEC(''SELECT [ContractFarmingID],[ActivityID],[ContractNumberOfHouseholdInvolved],[ContractNumberOfContractorsInvolved],[ContractMajorProducts],[OutgrowersNumberOfHouseholdInvolved],[OutgrowersNumberOfContractorsInvolved],[OutgrowersMajorProducts],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.ContractFarming03 FROM ContractFarming03 '' + @strCriteria + '''')
EXEC(''SELECT [CropResidueID],[TypeOfCrop],[AmountOfHayBales],[AreaOfFarmsPlotsGazedinSitu],[Remarks],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.CropResidue03 FROM CropResidue03 '' + @strCriteria + '''')
EXEC(''SELECT [FarmersFieldSchoolID],[FieldID],[FieldActivity],[NumberOfFieldSchool],[NumberOfFarmersStartedMale],[NumberOfFarmersStartedFemale],[AverageDuration],[NumberOfFarmersCompletedMale],[NumberOfFarmersCompletedFemale],[NumberOfVillagesCovered],[NumberOfFarmersWhoAppliedTheTechniquesLearned],[Remarks],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.FarmersFieldSchool03 FROM FarmersFieldSchool03 '' + @strCriteria + '''')
EXEC(''SELECT [Fertilizer03ID],[FertilizerID],[AnnualNeeds],[AnnualUsage],[Explanation],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.Fertilizer03 FROM Fertilizer03 '' + @strCriteria + '''')
EXEC(''SELECT [GrazingLandID],[LivestockID],[NumberOfAnimals],[TotalGrazingLandInTheVillage],[UtilizedLand],[TotalDemarcatedLand],[TotalAreaLeased],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.GrazingLand03 FROM GrazingLand03 '' + @strCriteria + '''')
EXEC(''SELECT [HandOperatedImplementsID],[ImplementID],[NumberOfImplements],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.HandOperatedImplements03 FROM HandOperatedImplements03 '' + @strCriteria + '''')
EXEC(''SELECT [ImprovedPastureID],[NumberOfFarms],[Area],[SeedProduction],[AmountOfHayBales],[Remarks],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.ImprovedPasture03 FROM ImprovedPasture03 '' + @strCriteria + '''')
EXEC(''SELECT [ImprovedSeedsID],[CropID],[CropNameOthers],[AnnualRequirementForTheReportingYear],[NameOfImprovedVariety],[AmountUsedInTheReportingYearQualityDeclareSeed],[AmountUsedInTheReportingYearCertifiedSeed],[Remarks],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.ImprovedSeeds03 FROM ImprovedSeeds03 '' + @strCriteria + '''')
EXEC(''SELECT [IrrigationSchemeID],[SchemeID],[SchemeName],[NameOfWaterSource],[PotentialArea],[AreaUnderImprovedIrrigation],[Seasonirrigated],[StatusOfScheme],[NumberOfMembersInIrrigationSchemeMale],[NumberOfMembersInIrrigationSchemeFemale],[NumberOfFarmersUsingInfrastructureMale],[NumberOfFarmersUsingInfrastructureFemale],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.IrrigationScheme03 FROM IrrigationScheme03 '' + @strCriteria + '''')
EXEC(''SELECT [LivestockID],[AnimalID],[NumberOfIndigenous],[NumberOfImprovedMeat],[NumberOfImprovedDairy],[TotalRegistered],[Remarks],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.Livestock03 FROM Livestock03 '' + @strCriteria + '''')
EXEC(''SELECT [LivestockInfrastructureID],[InfraID],[Working],[NotWorking],[NumberRequired],[NumberOfRegistered],[ReasonsForNotWorking],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.LivestockInfrastructure03 FROM LivestockInfrastructure03 '' + @strCriteria + '''')
EXEC(''SELECT [MachineryDrawnID],[DrawnID],[WorkingIndividuallyOwned],[WorkingGroupowned],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.MachineryDrawn03 FROM MachineryDrawn03 '' + @strCriteria + '''')
EXEC(''SELECT [MachinesID],[MachineryID],[WorkingIndividuallyOwned],[WorkingGroupOwned],[NotWorkingIndividuallyOwned],[NotWorkingGroupowned],[ReasonForNotWorking],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.Machines03 FROM Machines03 '' + @strCriteria + '''')
EXEC(''SELECT [Pestcide03ID],[PesticideID],[Pestcide03Name],[Measurement],[UsagePerYear],[Remarks],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.Pestcide03 FROM Pestcide03 '' + @strCriteria + '''')
EXEC(''SELECT [ProcessingMachinesID],[MachineID],[WorkingIndividuallyOwned],[WorkingGroupowned],[NotWorkingIndividuallyOwned],[NotWorkingGroupowned],[ReasonForNotWorking],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.ProcessingMachines03 FROM ProcessingMachines03 '' + @strCriteria + '''')
EXEC(''SELECT [TelecommunicationID],[TelecomCompID],[NumberOfVillagesCovered],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.Telecommunication03 FROM Telecommunication03 '' + @strCriteria + '''')
EXEC(''SELECT [TVAndRadioStationID],[StationID],[NumberOfVillagesCovered],[AnnualRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.TVAndRadioStation03 FROM TVAndRadioStation03 '' + @strCriteria + '''')

--District Q Report

EXEC(''SELECT [AnimalsFeedsID],[FeedsID],[GenericName],[TradeName],[Source],[MeasurementUnit],[QuarterlyRequirement],[QuarterlyAmountUsed],[LowPrice],[HighPrice],[Remarks],[QuarterlyRecordID],[FormSerialID],[RowVersionID] INTO ''+@DatabaseName+''.dbo.AnimalsFeeds04 FROM AnimalsFeeds04 '' + @strCriteria + '''')
EXEC(''SELECT [LivestockMarketingID],[LivestockID],[WarmThisQuarter],[ChilledThisQuarter],[FrozenThisQuarter],[Comments],[QuarterlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.LivestockMarketing04 FROM LivestockMarketing04 '' + @strCriteria + '''')
EXEC(''SELECT [LivestockMovementID],[LivestockID],[AnimalsIntoNonTrade],[AnimalsIntoTradeFromLGA],[AnimalsIntoTradeFromCountries],[AnimalsToNonTrade],[AnimalsToTradeLGA],[AnimalsToTradeCountries],[AnimalsTransNonTrade],[AnimalsTransTrade],[QuarterlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.LivestockMovement04 FROM LivestockMovement04 '' + @strCriteria + '''')
EXEC(''SELECT [ProductMovementID],[ProductID],[SoldWithinDistricts],[SoldOtherDistricts],[SoldOtherCountries],[QuarterlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.ProductsMovement04 FROM ProductsMovement04 '' + @strCriteria + '''')
EXEC(''SELECT [ReproductionInputsID],[InputID],[Breed],[AmountRequired],[AmountAvailable],[Remarks],[QuarterlyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.ReproductionInputs04 FROM ReproductionInputs04 '' + @strCriteria + '''')

--District A Report

EXEC(''SELECT [DistrictInfoID],[NumberOfWards],[NumberOfVillages],[NumberOfHousehold],[NumberOfHouseholdAgriculture],[DistrictPopulation],[ModeOfInternetAccess],[NumberOfOfficersTrained],[NumberOfResourceCentres],[AnnuallyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.DistrictInfo05 FROM DistrictInfo05 '' + @strCriteria + '''')
EXEC(''SELECT [EducationLevelID],[LevelID],[HQMale], HQFemale, WardMale, WardFemale, VillageMale, VillageFemale, Total, AnnuallyRecordID, FormSerialID INTO ''+@DatabaseName+''.dbo.EducationLevel05 FROM EducationLevel05 '' + @strCriteria + '''')
EXEC(''SELECT ExtensionServiceID, SpecilizationID, NumberOfDistrictMale, NumberOfDistrictFemale, NumberOfWardsMale, NumberOfWardsFemale, NumberOfVillagesMale,NumberOfVillagesFemale, TotalRegisterd, AnnuallyRecordID, FormSerialID INTO ''+@DatabaseName+''.dbo.ExtensionOfficers05 FROM ExtensionOfficers05 '' + @strCriteria + '''')
EXEC(''SELECT ExtensionOfficersTrained05.* INTO ''+@DatabaseName+''.dbo.ExtensionOfficersTrained05 FROM ExtensionOfficersTrained05 '' + @strCriteria + '''')
EXEC(''SELECT [ExtensionServiceProviderID],[NameOfServiceProvider],[TypeOfServiceProvider],[TypeOfService],[NumberOFVillages],[AnnuallyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.ExtensionServiceProviders05 FROM ExtensionServiceProviders05 '' + @strCriteria + '''')
EXEC(''SELECT [FoodSituationID],[FoodTypeID],[FoodCropsID],[TotalProduction],[Factor],[CerealEquivalent],[TotalCerealEquivalent],[RequirementCerealEquivalent],[SurplusDeficit],[AnnuallyRecordID],[FormSerialID] INTO ''+@DatabaseName+''.dbo.FoodSituation05 FROM FoodSituation05 '' + @strCriteria + '''')
EXEC(''SELECT LivestockInfrastructure05.* INTO ''+@DatabaseName+''.dbo.LivestockInfrastructure05 FROM LivestockInfrastructure05 '' + @strCriteria + '''')
EXEC(''SELECT LivestockPopulation05.* INTO ''+@DatabaseName+''.dbo.LivestockPopulation05 FROM LivestockPopulation05 '' + @strCriteria + '''')
EXEC(''SELECT Oxenizing05.* INTO ''+@DatabaseName+''.dbo.Oxenizing05 FROM Oxenizing05 '' + @strCriteria + '''')
EXEC(''SELECT PlanningCommitee05.* INTO ''+@DatabaseName+''.dbo.PlanningCommitee05 FROM PlanningCommitee05 '' + @strCriteria + '''')
EXEC(''SELECT ProductsProcessing05.* INTO ''+@DatabaseName+''.dbo.ProductsProcessing05 FROM ProductsProcessing05 '' + @strCriteria + '''')
EXEC(''SELECT WorkingEquipments05.* INTO ''+@DatabaseName+''.dbo.WorkingEquipments05 FROM WorkingEquipments05 '' + @strCriteria + '''')
EXEC(''SELECT WorkingFacilities05.* INTO ''+@DatabaseName+''.dbo.WorkingFacilities05 FROM WorkingFacilities05 '' + @strCriteria + '''')

--Annual Target Report

EXEC(''SELECT TargetImplementationAndCropPrices06.* INTO ''+@DatabaseName+''.dbo.TargetImplementationAndCropPrices06 FROM TargetImplementationAndCropPrices06 '' + @strCriteria + '''')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupNameOfPestsDisease]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspMonthlyLookupNameOfPestsDisease]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyLookupNameOfPestsDisease]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
LookupID, 
LookupSw, 
LookupEn, 
LookupType, 
LookupTypeFilter, 
LookupStatus,
(LookupTypeFilter + '':'' + LookupEn) AS Concatination
FROM        
MonthlyLookupTable
WHERE     
(LookupType = N''NameOfPestsDisease'')
ORDER BY 
LookupID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[udp_forms_submitted]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[udp_forms_submitted]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[udp_forms_submitted]
@Language varchar(9),
@Criteria1 int=NULL,
@Criteria2 int=NULL

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

SELECT TOP (100) PERCENT 
RecordInfo.RecordID, 
RecordInfo.FormSerialNumber, 
RecordInfo.FormTypeNumber, 
tbl_setup_areas.Area_Name, 
CONVERT(VARCHAR(20),RecordInfo.PeriodFrom,103) AS PeriodFrom,  
CONVERT(VARCHAR(20),RecordInfo.PeriodTo,103) AS PeriodTo,
RecordInfo.AreaID, 
RecordInfo.OrganisationID, 
CASE 
WHEN @Language = ''Swahili'' THEN FormNameSwahili 
WHEN @Language = ''English'' THEN FormNameEnglish 
END AS FormName, 
CASE 
WHEN @Language = ''Swahili'' THEN Area_Level_Name_Swahili 
WHEN @Language = ''English'' THEN Area_Level_Name_English 
END AS Area_Level_Name, 
RecordInfo.ApprovedByUserID,
Comments
FROM     
RecordInfo    
INNER JOIN
tbl_setup_areas ON RecordInfo.AreaID = tbl_setup_areas.Area_ID 
INNER JOIN
tbl_setup_area_levels ON tbl_setup_areas.Area_Level = tbl_setup_area_levels.Area_Level 
INNER JOIN
tbl_setup_form_types ON RecordInfo.FormTypeNumber = tbl_setup_form_types.FormTypeNumber
WHERE
RecordInfo.FormTypeNumber=coalesce(@Criteria1,RecordInfo.FormTypeNumber)
OR
RecordInfo.FormTypeNumber=coalesce(@Criteria2,RecordInfo.FormTypeNumber)
ORDER BY 
RecordInfo.PeriodTo DESC, 
RecordInfo.PeriodFrom,
RecordID DESC
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspWardReportSubmissionStatus]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspWardReportSubmissionStatus]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspWardReportSubmissionStatus]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar (50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
--SELECT     
--tbl_config.config_value, 
--tbl_setup_areas.Area_ID, 
--tbl_setup_areas.Area_Name,
--(select COUNT(''*'') from RecordInfo 
--WHERE RecordInfo.AreaID=tbl_setup_areas.Area_ID 
--AND  
--RecordInfo.FormSerialNumber LIKE @FormSerialNumber
--) AS status
--FROM         
--tbl_setup_areas CROSS JOIN tbl_config
--WHERE 
--tbl_setup_areas.Area_ID LIKE  tbl_config.config_value + ''___''
select
area_id,area_name,
(
select
count(''*'')
from
recordinfo
where
recordinfo.areaid=tbl_setup_areas.area_id
and
recordinfo.formserialnumber like @FormSerialNumber
) as statusi 
from 
tbl_setup_areas
--WHERE 
--tbl_config.config_value LIKE tbl_setup_areas.Area_ID
WHERE 
tbl_setup_areas.Area_ID like substring(@FormSerialNumber,5,len(@FormSerialNumber)-16)
END' 
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspDistrictReportSubmissionStatus]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspDistrictReportSubmissionStatus]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspDistrictReportSubmissionStatus]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar (50),
@TimePeriod nvarchar(20)=NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
declare @getconfiglevel as int
declare @getconfigareaid as varchar(50)
select @getconfigareaid=config_value from tbl_config where config_name=''area_id''
select @getconfiglevel=config_value from tbl_config where config_name=''area_level''
if @getconfiglevel=5
begin
select
nid as outerNId,
parentnid as outerParentNId,
arealevel as outerAreaLevel,
(
select name from areas where nid=outerArea.parentnid
) as parentname,
name as outerName ,
(
select count(*) from recordinfo
where
recordinfo.areaid=outerArea.id
and
recordinfo.formserialnumber like @FormSerialNumber
) as statusi,
(
select approvedbyuserid from recordinfo
where
recordinfo.areaid=outerArea.id
and
recordinfo.formserialnumber like @FormSerialNumber
) as approvedbyuserid,
(
select comments from recordinfo
where
recordinfo.areaid=outerArea.id
and
recordinfo.formserialnumber like @FormSerialNumber
) as comments
from 
areas as outerArea
where arealevel<6
and
id = @getconfigareaid
end

else if @getconfiglevel=4
begin
select
nid as outerNId,
parentnid as outerParentNId,
arealevel as outerAreaLevel,
(
select name from areas where nid=outerArea.parentnid
) as parentname,
name as outerName ,
(
select count(*) from recordinfo
where
recordinfo.areaid=outerArea.id
and
recordinfo.formserialnumber like @FormSerialNumber
) as statusi,
(
select approvedbyuserid from recordinfo
where
recordinfo.areaid=outerArea.id
and
recordinfo.formserialnumber like @FormSerialNumber
) as approvedbyuserid,
(
select comments from recordinfo
where
recordinfo.areaid=outerArea.id
and
recordinfo.formserialnumber like @FormSerialNumber
) as comments
from 
areas as outerArea
where arealevel<6
and
parentnid = (select nid from areas where id=@getconfigareaid)
end

else
begin
select
nid as outerNId,
parentnid as outerParentNId,
arealevel as outerAreaLevel,
(
select name from areas where nid=outerArea.parentnid
) as parentname,
name as outerName ,
(
select count(*) from recordinfo
where
recordinfo.areaid=outerArea.id
and
recordinfo.formserialnumber like @FormSerialNumber
) as statusi,
(
select approvedbyuserid from recordinfo
where
recordinfo.areaid=outerArea.id
and
recordinfo.formserialnumber like @FormSerialNumber
) as approvedbyuserid,
(
select comments from recordinfo
where
recordinfo.areaid=outerArea.id
and
recordinfo.formserialnumber like @FormSerialNumber
) as comments
from 
areas as outerArea
where arealevel between 4 and 5
and
parentnid<>53218
end

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateLivestockInfrastructure]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualUpdateLivestockInfrastructure]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualUpdateLivestockInfrastructure] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@ListID int,
	@ListItemSw nvarchar(50),
	@ListItemEn nvarchar(50),
	@ListItemType nvarchar(50),
	@ListItemStatus int,
	@LivestockInfrastructureID uniqueidentifier,
	@NumberWorking int,	
	@NumberNotWorking int,
	@NumberRequired int,
	@NumberRegistered int,
	@ReasonsForNotWorking nvarchar(200),
	@AnnuallyRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	declare @FormSerialID nvarchar(50)
	select @FormSerialID = FormSerialNumber from RecordInfo where RecordID=@AnnuallyRecordID
	
	IF NOT EXISTS(SELECT * FROM LivestockInfrastructure05 WHERE LivestockInfrastructureID=@LivestockInfrastructureID)
	
	BEGIN
	DECLARE @InfraID int
	
	BEGIN TRANSACTION
	INSERT INTO 
	TwoDList
	(
	ListItemSw,
	ListItemEn,
	ListItemType,
	ListItemStatus
	)
	VALUES
	(
	@ListItemSw,
	@ListItemEn,
	@ListItemType,
	@ListItemStatus
	)
	-- Get back the customer ID
	SET @InfraID = SCOPE_IDENTITY()
	
	INSERT INTO 
	LivestockInfrastructure05
	VALUES
	(
	@LivestockInfrastructureID,
	@InfraID,
	@NumberWorking,
	@NumberNotWorking,
	@NumberRequired,
	@NumberRegistered,
	@ReasonsForNotWorking,
	@AnnuallyRecordID,
	@FormSerialID
	)

	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE TwoDList
	SET 
	ListItemSw=@ListItemSw,
	ListItemEn=@ListItemEn,
	ListItemType=@ListItemType,
	ListItemStatus=@ListItemStatus	
	WHERE 
	ListID=@ListID and ListItemStatus=1
	END
	
	BEGIN
	UPDATE LivestockInfrastructure05
	SET 
	NumberWorking=@NumberWorking,	
	NumberNotWorking=@NumberNotWorking,
	NumberRequired=@NumberRequired,
	NumberRegistered=@NumberRegistered,
	ReasonsForNotWorking=@ReasonsForNotWorking
	WHERE 
	LivestockInfrastructureID=@LivestockInfrastructureID
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingMilk]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillProductsProcessingMilk]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingMilk]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, ProductsProcessing05.ProductProcessingID, 
                      ProductsProcessing05.ProcessingID, ProductsProcessing05.NameOfBussiness, ProductsProcessing05.RegistrationNumber, 
                      ProductsProcessing05.MeasurementUnit, ProductsProcessing05.InstalledProduction, ProductsProcessing05.UtilizedProduction, 
                      ProductsProcessing05.AnnuallyRecordID, ProductsProcessing05.TypeOfProduct,ProductsProcessing05.FormSerialID
FROM         TwoDList INNER JOIN
                      ProductsProcessing05 ON TwoDList.ListID = ProductsProcessing05.ProcessingID
WHERE     (ProductsProcessing05.AnnuallyRecordID = @AnnuallyRecordID) AND (TwoDList.ListItemEn = ''Milk and Milk Product'')
ORDER BY TwoDList.ListID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingMeat]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillProductsProcessingMeat]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingMeat]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, ProductsProcessing05.ProductProcessingID, 
                      ProductsProcessing05.ProcessingID, ProductsProcessing05.NameOfBussiness, ProductsProcessing05.RegistrationNumber, 
                      ProductsProcessing05.MeasurementUnit, ProductsProcessing05.InstalledProduction, ProductsProcessing05.UtilizedProduction, 
                      ProductsProcessing05.AnnuallyRecordID, ProductsProcessing05.TypeOfProduct,ProductsProcessing05.FormSerialID
FROM         TwoDList INNER JOIN
                      ProductsProcessing05 ON TwoDList.ListID = ProductsProcessing05.ProcessingID
WHERE     (ProductsProcessing05.AnnuallyRecordID = @AnnuallyRecordID) AND (TwoDList.ListItemEn = ''Meat and Meat Product'')
ORDER BY TwoDList.ListID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingHide]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillProductsProcessingHide]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingHide]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, ProductsProcessing05.ProductProcessingID, 
                      ProductsProcessing05.ProcessingID, ProductsProcessing05.NameOfBussiness, ProductsProcessing05.RegistrationNumber, 
                      ProductsProcessing05.MeasurementUnit, ProductsProcessing05.InstalledProduction, ProductsProcessing05.UtilizedProduction, 
                      ProductsProcessing05.AnnuallyRecordID, ProductsProcessing05.TypeOfProduct,ProductsProcessing05.FormSerialID
FROM         TwoDList INNER JOIN
                      ProductsProcessing05 ON TwoDList.ListID = ProductsProcessing05.ProcessingID
WHERE     (ProductsProcessing05.AnnuallyRecordID = @AnnuallyRecordID) AND (TwoDList.ListItemEn = ''Hide and Skin'')
ORDER BY TwoDList.ListID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingAnimal]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillProductsProcessingAnimal]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingAnimal]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, ProductsProcessing05.ProductProcessingID, 
                      ProductsProcessing05.ProcessingID, ProductsProcessing05.NameOfBussiness, ProductsProcessing05.RegistrationNumber, 
                      ProductsProcessing05.MeasurementUnit, ProductsProcessing05.InstalledProduction, ProductsProcessing05.UtilizedProduction, 
                      ProductsProcessing05.AnnuallyRecordID, ProductsProcessing05.TypeOfProduct,ProductsProcessing05.FormSerialID
FROM         TwoDList INNER JOIN
                      ProductsProcessing05 ON TwoDList.ListID = ProductsProcessing05.ProcessingID
WHERE     (ProductsProcessing05.AnnuallyRecordID = @AnnuallyRecordID) AND (TwoDList.ListItemEn = ''Animal Feed'')
ORDER BY TwoDList.ListID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillPlanningCommitee]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillPlanningCommitee]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillPlanningCommitee] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus, 
PlanningCommitee05.PlanningCommiteeID, 
PlanningCommitee05.SexID, 
PlanningCommitee05.Number, 
PlanningCommitee05.Percentage, 
PlanningCommitee05.AnnuallyRecordID,
PlanningCommitee05.FormSerialID
FROM         
TwoDList 
INNER JOIN
PlanningCommitee05 ON TwoDList.ListID = PlanningCommitee05.SexID
WHERE     
(PlanningCommitee05.AnnuallyRecordID = @AnnuallyRecordID) 
AND 
(TwoDList.ListItemType = ''PlanningCommitee05'')
ORDER BY TwoDList.ListID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyLivestockMarketing]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspQuarterlyLivestockMarketing]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyLivestockMarketing]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

declare @startDate as date
declare @endDate as date
set @startDate = cast(''01''+substring(@FormSerialNumber,len(@FormSerialNumber)-11,5) as datetime)
set @endDate = cast(''30''+substring(@FormSerialNumber,len(@FormSerialNumber)-5,5) as datetime)

if (datepart(m,@startDate)>6)
begin
set @startDate=@startDate
end
else
begin
set @startDate=dateadd(yyyy,-1,@startDate)
end
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus, 
SUM(LivestockMarketing04.WarmThisQuarter) AS WarmThisQuarter,
SUM(LivestockMarketing04.ChilledThisQuarter) AS ChilledThisQuarter,
SUM(LivestockMarketing04.FrozenThisQuarter) AS FrozenThisQuarter,
SUM(cnLivestockMarketing_1.cnWarmThisQuarter) AS cnWarmThisQuarter, 
SUM(cnLivestockMarketing_1.cnChilledThisQuarter) AS cnChilledThisQuarter, 
SUM(cnLivestockMarketing_1.cnFrozenThisQuarter) AS cnFrozenThisQuarter 
FROM         
TwoDList 
INNER JOIN
LivestockMarketing04 ON TwoDList.ListID = LivestockMarketing04.LivestockID 
INNER JOIN
RecordInfo ON LivestockMarketing04.QuarterlyRecordID = RecordInfo.RecordID 
INNER JOIN
dbo.cnLivestockMarketing(@FormSerialNumber,@startDate,@endDate) AS cnLivestockMarketing_1 ON TwoDList.ListID = cnLivestockMarketing_1.ListID
WHERE     
(RecordInfo.FormSerialNumberIQ LIKE @FormSerialNumber)
GROUP BY 
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn,
TwoDList.ListItemType, 
TwoDList.ListItemStatus
ORDER BY TwoDList.ListID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyProdSkin]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspMonthlyProdSkin]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyProdSkin]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT     
ProdSkinList.ProdSkinID, 
ProdSkinList.ProdName, 
SUM(ISNULL(ProdSkin01.DrySuspended,0)) AS DrySuspended, 
SUM(ISNULL(ProdSkin01.DrySalted,0)) AS DrySalted, 
SUM(ISNULL(ProdSkin01.WetBlue,0)) AS WetBlue
FROM         
RecordInfo 
INNER JOIN
ProdSkin01 ON RecordInfo.RecordID = ProdSkin01.MonthlyRecordID 
INNER JOIN
ProdSkinList ON ProdSkin01.TypeOfProdID = ProdSkinList.ProdSkinID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY ProdSkinList.ProdSkinID, ProdSkinList.ProdName
ORDER BY ProdSkinList.ProdSkinID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyProdMilk]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspQuarterlyProdMilk]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyProdMilk]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

  @FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

declare @startDate as date
declare @endDate as date
set @startDate = cast(''01''+substring(@FormSerialNumber,len(@FormSerialNumber)-11,5) as datetime)
set @endDate = cast(''30''+substring(@FormSerialNumber,len(@FormSerialNumber)-5,5) as datetime)

if (datepart(m,@startDate)>6)
begin
set @startDate=@startDate
end
else
begin
set @startDate=dateadd(yyyy,-1,@startDate)
end
	
SELECT     
ProdMilkList.ProdMilkListID, 
ProdMilkList.ProdName, 
SUM(ProdMilk01.AmountThisMonth) AS AmountThisMonth, 
SUM(cnProdMilk_1.cnAmountThisMonth) AS cnAmountThisMonth
FROM         
ProdMilkList 
INNER JOIN
ProdMilk01 ON ProdMilkList.ProdMilkListID = ProdMilk01.ProdTypeID 
INNER JOIN
RecordInfo ON ProdMilk01.MonthlyRecordID = RecordInfo.RecordID 
INNER JOIN
dbo.cnProdMilk(@FormSerialNumber, @startDate, @endDate) AS cnProdMilk_1 ON ProdMilkList.ProdMilkListID = cnProdMilk_1.ProdMilkListID
WHERE     
(RecordInfo.FormSerialNumberIQ LIKE @FormSerialNumber)
GROUP BY 
ProdMilkList.ProdMilkListID, 
ProdMilkList.ProdName
ORDER BY 
ProdMilkList.ProdMilkListID

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyTarget]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspQuarterlyTarget]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyTarget]
	-- Add the parameters for the stored procedure here
	
	--@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
	--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
--declare  @StartofQuarter as  datetime
--select @StartofQuarter=cast(''01''+substring(substring(@FormSerialNumber,24,len(@FormSerialNumber)),0,6) as datetime)


--SELECT     CropGroupList.CropGroupListID, CropGroupList.GroupID, CropGroupList.CropName
--, sum(TargetImplementationAndCropPrices06.ExpectedArea) AS ExpectedArea, 
--                      sum(TargetImplementationAndCropPrices06.ExpectedProd) AS ExpectedProd, (TargetImplementationAndCropPrices01.AreaDone) AS AreaDone, 
--                      (TargetImplementationAndCropPrices01.ProdDone) AS ProdDone
--FROM         CropGroupList INNER JOIN
--                      TargetImplementationAndCropPrices06 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices06.CropID INNER JOIN
--                      RecordInfo ON TargetImplementationAndCropPrices06.AnnualRecordID = RecordInfo.RecordID INNER JOIN
--                          (SELECT     RecordInfo_1.FormSerialNumberIQ, TargetImplementationAndCropPrices01_1.CropID, SUM(TargetImplementationAndCropPrices01_1.AreaDone) 
--                                                   AS AreaDone, SUM(TargetImplementationAndCropPrices01_1.ProdDone) AS ProdDone, TargetImplementationAndCropPrices01_1.MonthlyRecordID, 
--                                                   TargetImplementationAndCropPrices01_1.FormSerialID
--                            FROM          TargetImplementationAndCropPrices01 AS TargetImplementationAndCropPrices01_1 INNER JOIN
--                                                   RecordInfo AS RecordInfo_1 ON TargetImplementationAndCropPrices01_1.MonthlyRecordID = RecordInfo_1.RecordID INNER JOIN
--                                                   dbo.tmpTblAccumulatedFigures(@StartofQuarter, SUBSTRING(@FormSerialNumber, 0, 18)) AS tmpTblAccumulatedFigures_1 ON 
--                                                   RecordInfo_1.FormSerialNumberIQ = tmpTblAccumulatedFigures_1.FormSerialNumberIQ AND 
--                                                   RecordInfo_1.FormSerialNumberIQ LIKE @FormSerialNumber
--                            GROUP BY RecordInfo_1.FormSerialNumberIQ, TargetImplementationAndCropPrices01_1.CropID, TargetImplementationAndCropPrices01_1.MonthlyRecordID, 
--                                                   TargetImplementationAndCropPrices01_1.FormSerialID) AS TargetImplementationAndCropPrices01 ON 
--                      CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID
--WHERE     (RecordInfo.FormSerialNumberIQ LIKE @FormSerialNumber)
--GROUP BY CropGroupList.CropGroupListID, CropGroupList.GroupID, CropGroupList.CropName,
--areadone,proddone
--ORDER BY CropGroupList.CropGroupListID

declare @startDate as date
declare @endDate as date
declare @yearReplacer as integer
set @startDate = cast(''01''+substring(@FormSerialNumber,len(@FormSerialNumber)-11,5) as datetime)
set @endDate = cast(''30''+substring(@FormSerialNumber,len(@FormSerialNumber)-5,5) as datetime)
if (datepart(m,@startDate)>6)
begin
set @startDate=@startDate
set @FormSerialNumber=STUFF(STUFF(@FormSerialNumber,len(@FormSerialNumber)-11,3,''Jul''),len(@FormSerialNumber)-5,3,''Sep'')
end
else
begin
set @startDate=dateadd(yyyy,-1,@startDate)
set @yearReplacer=right(datepart(yyyy,@startDate),2)
set @FormSerialNumber=STUFF(STUFF(@FormSerialNumber,len(@FormSerialNumber)-11,5,''Jul''+convert(varchar(5),@yearReplacer)),len(@FormSerialNumber)-5,5,''Sep''+convert(varchar(5),@yearReplacer))
end

SELECT     
CropGroupList.CropGroupListID, 
CropGroupList.GroupID, 
CropGroupList.CropName, 
SUM(TargetImplementationAndCropPrices06.ExpectedArea) AS ExpectedArea, 
SUM(TargetImplementationAndCropPrices06.ExpectedProd) AS ExpectedProd, 
SUM(cnTarget_1.cnAreaDone) AS cnAreaDone, 
SUM(cnTarget_1.cnProdDone) AS cnProdDone
FROM         
CropGroup 
INNER JOIN
CropGroupList ON CropGroup.GroupID = CropGroupList.GroupID 
INNER JOIN
TargetImplementationAndCropPrices06 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices06.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices06.AnnualRecordID = RecordInfo.RecordID 
INNER JOIN
dbo.cnTarget(@FormSerialNumber, @startDate, @endDate) AS cnTarget_1 ON CropGroupList.CropGroupListID = cnTarget_1.CropGroupListID
WHERE 
RecordInfo.FormSerialNumberIQ LIKE @FormSerialNumber
GROUP BY 
CropGroupList.CropGroupListID, 
CropGroupList.GroupID, 
CropGroupList.CropName
END





' 
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyProdSkin]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspQuarterlyProdSkin]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyProdSkin]
	-- Add the parameters for the stored procedure here
	
--@ParamYear nvarchar(9),
--@ParamQuarter nvarchar(1)
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	--declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter = @ParamQuarter+2
	--	select @myParamYear = LEFT(@ParamYear,4)
	--end	
	--	else
	--begin
	--	select @myParamQuarter = @ParamQuarter-2
	--	select @myParamYear = RIGHT(@ParamYear,4)
	--end
	
declare @startDate as date
declare @endDate as date
set @startDate = cast(''01''+substring(@FormSerialNumber,len(@FormSerialNumber)-11,5) as datetime)
set @endDate = cast(''30''+substring(@FormSerialNumber,len(@FormSerialNumber)-5,5) as datetime)

if (datepart(m,@startDate)>6)
begin
set @startDate=@startDate
end
else
begin
set @startDate=dateadd(yyyy,-1,@startDate)
end

SELECT     
ProdSkinList.ProdSkinID, 
ProdSkinList.ProdName, 
SUM(ProdSkin01.DrySuspended) AS DrySuspended, 
SUM(ProdSkin01.DrySalted) AS DrySalted, 
SUM(ProdSkin01.WetBlue) AS WetBlue, 
SUM(cnProdSkin_1.cnDrySuspended) AS cnDrySuspended, 
SUM(cnProdSkin_1.cnDrySalted) AS cnDrySalted, 
SUM(cnProdSkin_1.cnWetBlue) AS cnWetBlue
FROM         
RecordInfo 
INNER JOIN
ProdSkin01 ON RecordInfo.RecordID = ProdSkin01.MonthlyRecordID 
INNER JOIN
ProdSkinList ON ProdSkin01.TypeOfProdID = ProdSkinList.ProdSkinID 
INNER JOIN
dbo.cnProdSkin(@FormSerialNumber,@startDate,@endDate) AS cnProdSkin_1 ON ProdSkinList.ProdSkinID = cnProdSkin_1.ProdSkinID
WHERE     
(RecordInfo.FormSerialNumberIQ LIKE @FormSerialNumber)
GROUP BY 
ProdSkinList.ProdSkinID, 
ProdSkinList.ProdName
ORDER BY 
ProdSkinList.ProdSkinID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyLivestockSlaughtered]    Script Date: 08/01/2013 14:08:27 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[rptUspQuarterlyLivestockSlaughtered]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyLivestockSlaughtered]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
   @FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    --Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

--SELECT     
--LivestockSlaughList.LivestockListID,
--LivestockSlaughList.LivestockName, 
--SUM(ISNULL(LivestockSlaughtered01.TotalNumberSlaughteredThisMonth,0)) AS TotalNumberSlaughteredThisMonth, 
--AVG(ISNULL(LivestockSlaughtered01.AverageRetailPriceKg,0)) AS AverageRetailPriceKg
--FROM         
--LivestockSlaughList 
--INNER JOIN
--LivestockSlaughtered01 ON LivestockSlaughList.LivestockListID = LivestockSlaughtered01.LivestockID 
--INNER JOIN
--RecordInfo ON LivestockSlaughtered01.MonthlyRecordID = RecordInfo.RecordID
--WHERE 
--RecordInfo.FormSerialNumberIQ like @FormSerialNumber
--GROUP BY 
--LivestockSlaughList.LivestockListID,
--LivestockSlaughList.LivestockName
--ORDER BY LivestockSlaughList.LivestockListID

declare @startMonth as date
declare @endMonth as date
set @startMonth = cast(''01''+substring(@FormSerialNumber,len(@FormSerialNumber)-11,5) as datetime)
set @endMonth = cast(''30''+substring(@FormSerialNumber,len(@FormSerialNumber)-5,5) as datetime)

if (datepart(m,@startMonth)>6)
begin
set @startMonth=@startMonth
end
else
begin
set @startMonth=dateadd(yyyy,-1,@startMonth)
end

--print @startMonth
--print @endmonth

SELECT     
LivestockSlaughList.LivestockListID, 
LivestockSlaughList.LivestockName, 
SUM(LivestockSlaughtered01.TotalNumberSlaughteredThisMonth) AS TotalNumberSlaughteredThisMonth, 
SUM(CN_1.CN) AS CN
FROM         
LivestockSlaughList 
INNER JOIN
LivestockSlaughtered01 ON LivestockSlaughList.LivestockListID = LivestockSlaughtered01.LivestockID 
INNER JOIN
RecordInfo ON LivestockSlaughtered01.MonthlyRecordID = RecordInfo.RecordID 
INNER JOIN
dbo.cnLivestockSlaughtered(@FormSerialNumber,@startMonth,@endmonth) AS CN_1 ON LivestockSlaughList.LivestockListID = CN_1.LivestockListID
WHERE     
RecordInfo.FormSerialNumberIQ LIKE @FormSerialNumber
GROUP BY 
LivestockSlaughList.LivestockListID, 
LivestockSlaughList.LivestockName

END
' 
END
GO

/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillLivestockInfrastructureThirdPart]    Script Date: 09/04/2013 16:20:20 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillLivestockInfrastructureThirdPart]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillLivestockInfrastructureThirdPart]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus, 
LivestockInfrastructure05.LivestockInfrastructureID, 
LivestockInfrastructure05.InfraID, 
LivestockInfrastructure05.NumberWorking, 
LivestockInfrastructure05.NumberNotWorking, 
LivestockInfrastructure05.NumberRequired, 
LivestockInfrastructure05.NumberRegistered, 
LivestockInfrastructure05.ReasonsForNotWorking, 
LivestockInfrastructure05.AnnuallyRecordID
FROM         
TwoDList 
INNER JOIN
LivestockInfrastructure05 ON TwoDList.ListID = LivestockInfrastructure05.InfraID
WHERE     
(TwoDList.ListItemType = ''LivestockInfrastructure05'') 
AND 
(LivestockInfrastructure05.AnnuallyRecordID = @AnnuallyRecordID)
AND
(TwoDList.ListID between 55 and 61)
ORDER BY TwoDList.ListID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillLivestockInfrastructureSecondPart]    Script Date: 09/04/2013 16:20:20 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillLivestockInfrastructureSecondPart]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillLivestockInfrastructureSecondPart]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus, 
LivestockInfrastructure05.LivestockInfrastructureID, 
LivestockInfrastructure05.InfraID, 
LivestockInfrastructure05.NumberWorking, 
LivestockInfrastructure05.NumberNotWorking, 
LivestockInfrastructure05.NumberRequired, 
LivestockInfrastructure05.NumberRegistered, 
LivestockInfrastructure05.ReasonsForNotWorking, 
LivestockInfrastructure05.AnnuallyRecordID
FROM         
TwoDList 
INNER JOIN
LivestockInfrastructure05 ON TwoDList.ListID = LivestockInfrastructure05.InfraID
WHERE     
(TwoDList.ListItemType = ''LivestockInfrastructure05'') 
AND 
(LivestockInfrastructure05.AnnuallyRecordID = @AnnuallyRecordID)
AND
(TwoDList.ListID between 48 and 54)
ORDER BY TwoDList.ListID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillLivestockInfrastructureFourthPart]    Script Date: 09/04/2013 16:20:20 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillLivestockInfrastructureFourthPart]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillLivestockInfrastructureFourthPart]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus, 
LivestockInfrastructure05.LivestockInfrastructureID, 
LivestockInfrastructure05.InfraID, 
LivestockInfrastructure05.NumberWorking, 
LivestockInfrastructure05.NumberNotWorking, 
LivestockInfrastructure05.NumberRequired, 
LivestockInfrastructure05.NumberRegistered, 
LivestockInfrastructure05.ReasonsForNotWorking, 
LivestockInfrastructure05.AnnuallyRecordID
FROM         
TwoDList 
INNER JOIN
LivestockInfrastructure05 ON TwoDList.ListID = LivestockInfrastructure05.InfraID
WHERE     
(TwoDList.ListItemType = ''LivestockInfrastructure05'') 
AND 
(LivestockInfrastructure05.AnnuallyRecordID = @AnnuallyRecordID)
AND
(TwoDList.ListID > 62)
ORDER BY TwoDList.ListID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillLivestockInfrastructureFirstPart]    Script Date: 09/04/2013 16:20:20 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspDistrictAnnualFillLivestockInfrastructureFirstPart]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillLivestockInfrastructureFirstPart]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus, 
LivestockInfrastructure05.LivestockInfrastructureID, 
LivestockInfrastructure05.InfraID, 
LivestockInfrastructure05.NumberWorking, 
LivestockInfrastructure05.NumberNotWorking, 
LivestockInfrastructure05.NumberRequired, 
LivestockInfrastructure05.NumberRegistered, 
LivestockInfrastructure05.ReasonsForNotWorking, 
LivestockInfrastructure05.AnnuallyRecordID
FROM         
TwoDList 
INNER JOIN
LivestockInfrastructure05 ON TwoDList.ListID = LivestockInfrastructure05.InfraID
WHERE     
(TwoDList.ListItemType = ''LivestockInfrastructure05'') 
AND 
(LivestockInfrastructure05.AnnuallyRecordID = @AnnuallyRecordID)
AND
(TwoDList.ListID between 41 and 47)
ORDER BY TwoDList.ListID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillLivestockInfrastructure]    Script Date: 09/04/2013 10:46:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[appUspDistrictAnnualFillLivestockInfrastructure]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus, 
LivestockInfrastructure05.LivestockInfrastructureID, 
LivestockInfrastructure05.InfraID, 
LivestockInfrastructure05.NumberWorking, 
LivestockInfrastructure05.NumberNotWorking, 
LivestockInfrastructure05.NumberRequired, 
LivestockInfrastructure05.NumberRegistered, 
LivestockInfrastructure05.ReasonsForNotWorking, 
LivestockInfrastructure05.AnnuallyRecordID
FROM         
TwoDList 
INNER JOIN
LivestockInfrastructure05 ON TwoDList.ListID = LivestockInfrastructure05.InfraID
WHERE     
(TwoDList.ListItemType = 'LivestockInfrastructure05') 
AND 
(LivestockInfrastructure05.AnnuallyRecordID = @AnnuallyRecordID)
AND
(TwoDList.ListID between 34 and 40)
ORDER BY TwoDList.ListID
END
GO

/****** Object:  StoredProcedure [dbo].[appUspLookupUnits1]    Script Date: 09/04/2013 17:13:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[appUspLookupUnits1]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspLookupUnits1] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT 1 AS ''UnitID'',''KG'' AS ''UnitName''
UNION
SELECT 2 AS ''UnitID'',''Litre'' AS ''UnitName''
UNION
SELECT 3 AS ''UnitID'',''Piece'' AS ''UnitName''
UNION
SELECT 4 AS ''UnitID'',''Ton'' AS ''UnitName''
UNION
SELECT 5 AS ''UnitID'',''Number'' AS ''UnitName''
UNION
SELECT 6 AS ''UnitID'',''Other'' AS ''UnitName''
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupNameOfPestsDisease]    Script Date: 09/04/2013 11:50:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[appUspMonthlyLookupNameOfPestsDisease]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
LookupID, 
LookupSw, 
LookupEn, 
LookupType, 
LookupTypeFilter, 
LookupStatus,
(LookupTypeFilter + ':' + LookupEn) AS Concatination
FROM        
MonthlyLookupTable
WHERE     
(LookupType = N'NameOfPestsDisease')
ORDER BY 
LookupEn
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualProdLand]    Script Date: 09/04/2013 11:50:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[rptUspAnnualProdLand] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	
SELECT     
SeasonList.SeasonListID, 
SeasonList.SeasonDetails, 
ActivityList.ActivityListID, 
ActivityList.ActivityDetails, 
SUM(ProdLand02.Tractor) AS Tractor, 
SUM(ProdLand02.Animals) AS Animals, 
SUM(ProdLand02.Hand) AS Hand, 
SUM(ProdLand02.NoFarming) AS NoFarming, 
SUM(ProdLand02.Total) AS Total
FROM       
SeasonList 
INNER JOIN
ActivityList ON SeasonList.SeasonListID = ActivityList.SeasonID 
INNER JOIN
ProdLand02 ON ActivityList.ActivityListID = ProdLand02.ActivityID 
INNER JOIN
RecordInfo ON ProdLand02.RecordID = RecordInfo.RecordID
WHERE 
FormSerialNumberIA like @FormSerialNumber
AND
FormSerialNumberIQ like '%'+'Apr'+'%'+'Jun'+'%' 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
          
GROUP BY 
SeasonList.SeasonListID,
SeasonList.SeasonDetails,
ActivityList.ActivityListID,
ActivityList.ActivityDetails
ORDER BY 
ActivityList.ActivityListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportPestcide]    Script Date: 09/04/2013 11:50:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[prntWardAnnualReportPestcide]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
PestcideList.PestcideListID, 
PestcideList.PestcideName, 
Pestcide03.Pestcide03Name, 
Pestcide03.Measurement,
Pestcide03.UsagePerYear,
Pestcide03.Remarks
FROM         
RecordInfo 
INNER JOIN
Pestcide03 ON RecordInfo.RecordID = Pestcide03.AnnualRecordID 
INNER JOIN
PestcideList ON Pestcide03.PesticideID = PestcideList.PestcideListID 
WHERE 
FormSerialNumber LIKE @FormSerialNumber
AND
--(
--Pestcide03.Pestcide03Name IS NOT NULL 
--OR
Pestcide03.Pestcide03Name<>'' 
--)
ORDER BY PestcideList.PestcideListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualCoopGroup]    Script Date: 09/04/2013 11:50:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[rptUspAnnualCoopGroup]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CoopGroup.GroupID, 
CoopGroup.GroupName, 
CoopGroupList.CoopGroupListID, 
CoopGroupList.GroupDetails, 
SUM(CoopGroup02.NumberOfGroups) AS NumberOfGroups, 
SUM(CoopGroup02.NumberOfMaleMembers) AS NumberOfMaleMembers, SUM(CoopGroup02.NumberOfFemaleMembers) AS NumberOfFemaleMembers, SUM(CoopGroup02.TotalNumberRegistered) AS TotalNumberRegistered, 
SUM(CoopGroup02.TotalNumberWithBankAccount) AS TotalNumberWithBankAccount
FROM         
CoopGroup 
INNER JOIN
CoopGroupList ON CoopGroup.GroupID = CoopGroupList.GroupID 
INNER JOIN
CoopGroup02 ON CoopGroupList.CoopGroupListID = CoopGroup02.CoopID 
INNER JOIN
RecordInfo ON CoopGroup02.RecordID = RecordInfo.RecordID
WHERE 
FormSerialNumberIA like @FormSerialNumber
AND
FormSerialNumberIQ like '%'+'Apr'+'%'+'Jun'+'%' 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY 
CoopGroup.GroupID,
CoopGroup.GroupName,
CoopGroupList.CoopGroupListID,
CoopGroupList.GroupDetails
ORDER BY 
CoopGroupList.CoopGroupListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualPestcide]    Script Date: 09/04/2013 11:50:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[rptUspAnnualPestcide]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
PestcideList.PestcideListID,
PestcideList.PestcideName,  
PestcideList.PestcideStatus, 
Pestcide03.Pestcide03Name, 
Pestcide03.Measurement, 
SUM(Pestcide03.UsagePerYear) AS UsagePerYear
FROM         
PestcideList 
INNER JOIN
Pestcide03 ON PestcideList.PestcideListID = Pestcide03.PesticideID 
INNER JOIN
RecordInfo ON Pestcide03.AnnualRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
AND
Pestcide03.Pestcide03Name <> ''
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
                      
GROUP BY 
PestcideList.PestcideListID, 
PestcideList.PestcideName, 
PestcideList.PestcideStatus, 
Pestcide03.Pestcide03Name, 
Pestcide03.Measurement
                     
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualIrrigation]    Script Date: 09/04/2013 11:50:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[rptUspAnnualIrrigation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
Irrigation02.CropID, 
sum(Irrigation02.PlantedAreaRainySeason) as PlantedAreaRainySeason, 
sum(Irrigation02.PlantedAreaDrySeason) as PlantedAreaDrySeason, 
sum(Irrigation02.ProductionRainySeason) as ProductionRainySeason, 
sum(Irrigation02.ProductionDrySeason) as ProductionDrySeason,
sum(Irrigation02.YieldRainySeason) as YieldRainySeason, 
sum(Irrigation02.YieldDrySeason) as YieldDrySeason 
FROM         
Irrigation02 
INNER JOIN
RecordInfo ON Irrigation02.RecordID = RecordInfo.RecordID
WHERE 
FormSerialNumberIA like @FormSerialNumber 
AND
FormSerialNumberIQ like '%'+'Apr'+'%'+'Jun'+'%'
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY Irrigation02.CropID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualSaccos]    Script Date: 09/04/2013 11:50:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[rptUspAnnualSaccos]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
sum(CoopSaccos02.NumberOfSaccoss) as NumberOfSaccoss, 
sum(CoopSaccos02.MembersMale) as MembersMale, 
sum(CoopSaccos02.MembersFemale) as MembersFemale, 
sum(CoopSaccos02.MembersGroups) as MembersGroups, 
sum(CoopSaccos02.LoanCrop) as LoanCrop, 
sum(CoopSaccos02.LoanLivestock) as LoanLivestock, 
sum(CoopSaccos02.LoanFishery) as LoanFishery, 
sum(CoopSaccos02.LoanMarketing) as LoanMarketing
FROM         
CoopSaccos02 
INNER JOIN
RecordInfo ON CoopSaccos02.RecordID = RecordInfo.RecordID
WHERE FormSerialNumberIA like @FormSerialNumber 
AND
FormSerialNumberIQ like '%'+'Apr'+'%'+'Jun'+'%' 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportImprovedSeedsOthers]    Script Date: 09/04/2013 11:50:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[prntWardAnnualReportImprovedSeedsOthers]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
SeedGroup.GroupID, 
SeedGroup.GroupName, 
ImprovedSeeds03.AnnualRequirementForTheReportingYear,
ImprovedSeeds03.CropNameOthers,
ImprovedSeeds03.NameOfImprovedVariety,
ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed,
ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed,
ImprovedSeeds03.Remarks
FROM         
RecordInfo 
INNER JOIN
ImprovedSeeds03 ON RecordInfo.RecordID = ImprovedSeeds03.AnnualRecordID 
INNER JOIN
SeedGroup ON ImprovedSeeds03.CropID = SeedGroup.GroupID 
WHERE 
FormSerialNumber LIKE @FormSerialNumber
AND
ImprovedSeeds03.CropNameOthers IS NOT NULL
AND    
SeedGroup.GroupID=7
ORDER BY SeedGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportImprovedSeeds]    Script Date: 09/04/2013 11:50:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[prntWardAnnualReportImprovedSeeds]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
SeedGroup.GroupID, 
SeedGroup.GroupName, 
ImprovedSeeds03.AnnualRequirementForTheReportingYear,
ImprovedSeeds03.NameOfImprovedVariety,
ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed,
ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed,
ImprovedSeeds03.Remarks
FROM         
RecordInfo 
INNER JOIN
ImprovedSeeds03 ON RecordInfo.RecordID = ImprovedSeeds03.AnnualRecordID 
INNER JOIN
SeedGroup ON ImprovedSeeds03.CropID = SeedGroup.GroupID 
WHERE 
FormSerialNumber LIKE @FormSerialNumber
AND
ImprovedSeeds03.NameOfImprovedVariety IS NOT NULL
AND     
SeedGroup.GroupID<>7
ORDER BY SeedGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportFFS]    Script Date: 09/04/2013 11:50:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[prntWardAnnualReportFFS]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool03.FieldActivity, 
FarmersFieldSchool03.NumberOfFieldSchool,
FarmersFieldSchool03.NumberOfFarmersStartedMale,
FarmersFieldSchool03.NumberOfFarmersStartedFemale, 
FarmersFieldSchool03.AverageDuration, 
FarmersFieldSchool03.NumberOfFarmersCompletedMale,
FarmersFieldSchool03.NumberOfFarmersCompletedFemale,
FarmersFieldSchool03.NumberOfVillagesCovered,
FarmersFieldSchool03.NumberOfFarmersWhoAppliedTheTechniquesLearned,
FarmersFieldSchool03.Remarks
FROM         
RecordInfo 
INNER JOIN
FarmersFieldSchool03 ON RecordInfo.RecordID = FarmersFieldSchool03.AnnualRecordID 
INNER JOIN
FFSGroup ON FarmersFieldSchool03.FieldID = FFSGroup.GroupID
WHERE FormSerialNumber LIKE @FormSerialNumber 
AND
FarmersFieldSchool03.FieldActivity IS NOT NULL
ORDER BY FFSGroup.GroupID
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:y		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[rptUspQuarterlyPlantHealth]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	--@ParamYear nvarchar(9),
	--@ParamQuarter nvarchar(1)
	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	--declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter = @ParamQuarter+2
	--	select @myParamYear = LEFT(@ParamYear,4)
	--end	
	--	else
	--begin
	--	select @myParamQuarter = @ParamQuarter-2
	--	select @myParamYear = RIGHT(@ParamYear,4)
	--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.AffectedArea) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Eneo lililoathiriwa (ha)' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE FormSerialNumberIQ like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.NumberOfVillageAffected) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Idadi ya vijiji vilivyoathiriwa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE FormSerialNumberIQ like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.AmountOfPestcideApplied) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Kiasi cha dawa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE FormSerialNumberIQ like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.NumberOfVillagesServed) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Idadi ya vijiji vilivyohudumiwa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumberIQ like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.NumberOfHouseHoldServed) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Idadi ya kaya zilizohudumiwa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE FormSerialNumberIQ like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.AreaRescued) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Eneo lililookolewa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[rptUspMonthlyLivestockSlaughtered]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT     
LivestockSlaughList.LivestockListID, 
LivestockSlaughList.LivestockName, 
SUM(LivestockSlaughtered01.TotalNumberSlaughteredThisMonth) AS TotalNumberSlaughteredThisMonth,
AVG(LivestockSlaughtered01.AverageRetailPriceKg) AS AverageRetailPriceKg
FROM         
RecordInfo 
INNER JOIN
LivestockSlaughtered01 ON RecordInfo.RecordID = LivestockSlaughtered01.MonthlyRecordID 
INNER JOIN
LivestockSlaughList ON LivestockSlaughtered01.LivestockID = LivestockSlaughList.LivestockListID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY 
LivestockSlaughList.LivestockListID, 
LivestockSlaughList.LivestockName
ORDER BY LivestockSlaughList.LivestockListID
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[rptUspMonthlyTarget]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT
CropGroup.GroupName,
CropGroupList.CropGroupListID, 
CropGroupList.GroupID, 
CropGroupList.CropName, 
SUM(TargetImplementationAndCropPrices01.AreaDone) AS AreaDone,
SUM(TargetImplementationAndCropPrices01.AreaDone*TargetImplementationAndCropPrices01.ProdDone)/SUM(TargetImplementationAndCropPrices01.AreaDone) AS Yield,
SUM(TargetImplementationAndCropPrices01.ProdDone) AS ProdDone,
AVG(TargetImplementationAndCropPrices01.Price) AS Price
FROM        
CropGroupList 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID 
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY
CropGroup.GroupName,
CropGroupList.CropGroupListID, 
CropGroupList.GroupID, 
CropGroupList.CropName
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[rptUspQuarterlyReproductionInputs]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

    --@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
	--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 --   declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter =@ParamQuarter+2
	--	select @myParamYear=LEFT(@ParamYear,4)
 --   end
    
    
 --   if @ParamQuarter>2 
 --   begin
	--	select @myParamQuarter =@ParamQuarter-2
	--	select @myParamYear=righT(@ParamYear,4)
	--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus, 
ReproductionInputs04.Breed, 
SUM(ISNULL(ReproductionInputs04.AmountRequired,0)) AS AmountRequired, 
SUM(ISNULL(ReproductionInputs04.AmountAvailable,0)) AS AmountAvailable
FROM         
TwoDList 
INNER JOIN
ReproductionInputs04 ON TwoDList.ListID = ReproductionInputs04.InputID 
INNER JOIN
RecordInfo ON ReproductionInputs04.QuarterlyRecordID = RecordInfo.RecordID
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber
AND
ReproductionInputs04.Breed <> ''
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@myParamYear,4)

--and 
--datepart(q,Periodto )=@myParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@myParamYear,4)

--and 
--datepart(q,PeriodFrom )=@ParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@ParamYear,4)

--and 
--datepart(q,Periodto )=@ParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@ParamYear,4)

GROUP BY 
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus, 
ReproductionInputs04.Breed
ORDER BY TwoDList.ListID
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[rptUspQuarterlyAnimalFeeds] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

    --@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
	--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	--declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter =@ParamQuarter+2
	--	select @myParamYear=LEFT(@ParamYear,4)
 --   end
    
    
 --   if @ParamQuarter>2 
 --   begin
	--	select @myParamQuarter =@ParamQuarter-2
	--	select @myParamYear=righT(@ParamYear,4)
	--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
AnimalsFeeds04.GenericName, 
AnimalsFeeds04.TradeName, 
AnimalsFeeds04.Source, 
AnimalsFeeds04.MeasurementUnit, 
SUM(AnimalsFeeds04.QuarterlyRequirement) AS QuarterlyRequirement, 
SUM(AnimalsFeeds04.QuarterlyAmountUsed) AS QuarterlyAmountUsed, 
SUM(AnimalsFeeds04.LowPrice) AS LowPrice, 
SUM(AnimalsFeeds04.HighPrice) AS HighPrice
FROM         
TwoDList 
INNER JOIN
AnimalsFeeds04 ON TwoDList.ListID = AnimalsFeeds04.FeedsID 
INNER JOIN
RecordInfo ON AnimalsFeeds04.QuarterlyRecordID = RecordInfo.RecordID     
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber
AND
AnimalsFeeds04.GenericName <> ''
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@myParamYear,4)

--and 
--datepart(q,Periodto )=@myParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@myParamYear,4)

--and 
--datepart(q,PeriodFrom )=@ParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@ParamYear,4)

--and 
--datepart(q,Periodto )=@ParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@ParamYear,4)
GROUP BY 
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn,
AnimalsFeeds04.GenericName,
AnimalsFeeds04.TradeName,
AnimalsFeeds04.Source,
AnimalsFeeds04.MeasurementUnit
ORDER BY TwoDList.ListID
END
GO

/****** Object:  Table [dbo].[MonthlyLookupTable]    Script Date: 08/03/2013 10:54:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MonthlyLookupTable]') AND type in (N'U'))
DROP TABLE [dbo].[MonthlyLookupTable]
GO
/****** Object:  Table [dbo].[MonthlyLookupTable]    Script Date: 08/03/2013 10:54:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MonthlyLookupTable]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[MonthlyLookupTable](
	[LookupID] [int] IDENTITY(1,1) NOT NULL,
	[LookupSw] [nvarchar](50) NULL,
	[LookupEn] [nvarchar](50) NULL,
	[LookupType] [nvarchar](50) NULL,
	[LookupTypeFilter] [nvarchar](50) NULL,
	[LookupStatus] [int] NULL,
 CONSTRAINT [PK_LookupTable] PRIMARY KEY CLUSTERED 
(
	[LookupID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET IDENTITY_INSERT [dbo].[MonthlyLookupTable] ON
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (1, N'Wastani', N'Average', N'Severity', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (2, N'Kidogo', N'Small', N'Severity', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (3, N'Kubwa ', N'Large', N'Severity', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (4, N'Kondoo', N'Sheep', N'TypeOfAnimal', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (5, N'kuku', N'Chicken', N'TypeOfAnimal', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (6, N'Mbuzi', N'Goat', N'TypeOfAnimal', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (7, N'Ng''ombe', N'Cattle', N'TypeOfAnimal', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (8, N'Nguruwe', N'Pig', N'TypeOfAnimal', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (9, NULL, N'abnormal odour', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (10, NULL, N'anaemia', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (11, NULL, N'anthrax', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooNguruweOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (12, NULL, N'blackquarter', N'ReasonsForCondemnations', N'Ng''ombeOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (13, NULL, N'bruises', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (14, NULL, N'Canine Distemper', N'ReasonsForCondemnations', N'Mbwa', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (15, NULL, N'cloaca inflammation', N'ReasonsForCondemnations', N'KukuOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (16, NULL, N'contamination with oil or paints', N'ReasonsForCondemnations', N'KukuOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (17, NULL, N'CRD', N'ReasonsForCondemnations', N'KukuOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (18, NULL, N'dropsy', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (19, NULL, N'Duck Virus hepatitis', N'ReasonsForCondemnations', N'Bata', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (20, NULL, N'emaciation', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooNguruweKukuOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (21, NULL, N'fever', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (22, NULL, N'generalized actimomycosis', N'ReasonsForCondemnations', N'Ng''ombeOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (23, NULL, N'generalized cysticercus cellulosae', N'ReasonsForCondemnations', N'NguruweOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (24, NULL, N'generalized TB', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (25, NULL, N'Helminthosi(Parasitic Diseases)', N'ReasonsForCondemnations', N'Bata', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (26, NULL, N'jaundice', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (27, NULL, N'Multiple abscesses', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooNguruweOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (28, NULL, N'New castle disease', N'ReasonsForCondemnations', N'KukuOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (29, NULL, N'over scalding', N'ReasonsForCondemnations', N'KukuOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (30, NULL, N'ParvoVirus', N'ReasonsForCondemnations', N'Mbwa', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (31, NULL, N'Pleurisy', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (32, NULL, N'pyaemia', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (33, NULL, N'Rabies', N'ReasonsForCondemnations', N'Mbwa', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (34, NULL, N'Rift Valley Fever', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (35, NULL, N'swine fever', N'ReasonsForCondemnations', N'NguruweOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (36, NULL, N'TB', N'ReasonsForCondemnations', N'KukuOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (37, NULL, N'uraemia', N'ReasonsForCondemnations', N'Ng''ombeMbuziKondooOthers', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (38, N'Bata', N'Duck', N'TypeOfLivestock', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (39, N'Kondoo', N'Sheep', N'TypeOfLivestock', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (40, N'Kuku', N'Chicken', N'TypeOfLivestock', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (41, N'Mbuzi', N'Goats', N'TypeOfLivestock', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (42, N'Mbwa', N'Dog', N'TypeOfLivestock', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (43, N'Ng''ombe', N'Cattle', N'TypeOfLivestock', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (44, N'Nguruwe', N'Pig', N'TypeOfLivestock', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (45, NULL, N'Alphactpermethrin', N'MedicineAppliedDipSpray', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (46, NULL, N'Cypermethrin', N'MedicineAppliedDipSpray', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (47, NULL, N'Deltamethrin', N'MedicineAppliedDipSpray', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (48, NULL, N'Anthrax', N'MedicineAppliedVaccine', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (49, NULL, N'BQ', N'MedicineAppliedVaccine', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (50, NULL, N'CBPP', N'MedicineAppliedVaccine', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (51, NULL, N'Chicken pox', N'MedicineAppliedVaccine', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (52, NULL, N'East coast feaver  ', N'MedicineAppliedVaccine', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (53, NULL, N'I2', N'MedicineAppliedVaccine', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (54, NULL, N'Infectious Bursal', N'MedicineAppliedVaccine', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (55, NULL, N'New castle', N'MedicineAppliedVaccine', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (56, NULL, N'PPR', N'MedicineAppliedVaccine', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (57, NULL, N'Rabies', N'MedicineAppliedVaccine', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (58, NULL, N'RVF', N'MedicineAppliedVaccine', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (59, NULL, N'S.19', N'MedicineAppliedVaccine', NULL, NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (60, NULL, N'American ball worm', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (61, NULL, N'Aphids', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (62, NULL, N'Armyworm', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (63, NULL, N'Bean flies', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (64, NULL, N'Bean Flower Thrips', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (65, NULL, N'Bean leaf beetle', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (66, NULL, N'Bean looper', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (67, NULL, N'Black bean aphid', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (68, NULL, N'Bruchids ', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (69, NULL, N'Caterpillars ', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (70, NULL, N'Corn earworms ', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (71, NULL, N'Cut worm', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (72, NULL, N'Flower beetles', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (73, NULL, N'Foliage beetles', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (74, NULL, N'Giant coreid bug ', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (75, NULL, N'Grain beetle', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (76, NULL, N'Grasshopper', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (77, NULL, N'Green aphids', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (78, NULL, N'Green leaf hoppers', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (79, NULL, N'Green stink bug', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (80, NULL, N'Harvester termites', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (81, NULL, N'Helmet bug', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (82, NULL, N'Khapra beetle ', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (83, NULL, N'Larger grain borer ', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (84, NULL, N'Leafhoppers', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (85, NULL, N'Legume bean pod borer', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (86, NULL, N'Locust (red and desert)', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (87, NULL, N'Mole crickets', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (88, NULL, N'Pea blue butterfly', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (89, NULL, N'Pod  beetle borer', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (90, NULL, N'Pod sucking bug', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (91, NULL, N'Pollen beetle', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (92, NULL, N'Sitophillus spp. ', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (93, NULL, N'Spiny  brown bugs', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (94, NULL, N'Stalk borer', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (95, NULL, N'Stem borer ', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (96, NULL, N'Sweet potato moth  ', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (97, NULL, N'Termites ', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (98, NULL, N'Thrips', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (99, NULL, N'Weevils', N'NameOfPestsDisease', N'Insect pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (100, NULL, N'White flies', N'NameOfPestsDisease', N'Insect pest', NULL)
GO
print 'Processed 100 total records'
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (101, NULL, N'Alternaria leaf spot', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (102, NULL, N'Angular leaf spot', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (103, NULL, N'Anthracnose', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (104, NULL, N'Aspergillus ear rot', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (105, NULL, N'Black sigatoka', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (106, NULL, N'Blue mold', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (107, NULL, N'Brown leaf spot', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (108, NULL, N'Cercospora leaf spot', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (109, NULL, N'Cob rot', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (110, NULL, N'Damping off', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (111, NULL, N'Downy mildew', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (112, NULL, N'Ear rot of maize', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (113, NULL, N'Early blight', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (114, NULL, N'Fusarium kernel of maize', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (115, NULL, N'Gray leaf spot', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (116, NULL, N'Gray mold', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (117, NULL, N'Green mold', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (118, NULL, N'Head smut', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (119, NULL, N'Late blight', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (120, NULL, N'Leaf blight ', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (121, NULL, N'Leaf rust', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (122, NULL, N'Panama disease', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (123, NULL, N'Pod blight', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (124, NULL, N'Powdery mildew', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (125, NULL, N'Root and foot rot ', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (126, NULL, N'Rust ', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (127, NULL, N'Scab', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (128, NULL, N'Shealth brown rot ', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (129, NULL, N'Smut ', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (130, NULL, N'Stalk rot ', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (131, NULL, N'Tip rot of banana', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (132, NULL, N'Wilt', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (133, NULL, N'Yellow Leaf blight', N'NameOfPestsDisease', N'Fungal Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (134, NULL, N'Mosaic disease', N'NameOfPestsDisease', N'Viral Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (135, NULL, N'Streak disease', N'NameOfPestsDisease', N'Viral Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (136, NULL, N'Stripe disease', N'NameOfPestsDisease', N'Viral Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (137, NULL, N'Bacterial canker / blast ', N'NameOfPestsDisease', N'Bacterial Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (138, NULL, N'Bacterial leaf blight', N'NameOfPestsDisease', N'Bacterial Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (139, NULL, N'Bacterial leaf spot', N'NameOfPestsDisease', N'Bacterial Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (140, NULL, N'Banana Xanthomonas Wilt', N'NameOfPestsDisease', N'Bacterial Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (141, NULL, N'Bean blight', N'NameOfPestsDisease', N'Bacterial Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (142, NULL, N'Halo blight', N'NameOfPestsDisease', N'Bacterial Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (143, NULL, N'Root and foot rot', N'NameOfPestsDisease', N'Bacterial Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (144, NULL, N'Sheath brown rot ', N'NameOfPestsDisease', N'Bacterial Disease', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (145, NULL, N'Broad leaves ', N'NameOfPestsDisease', N'Weed pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (146, NULL, N'Couch grass', N'NameOfPestsDisease', N'Weed pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (147, NULL, N'Mexican poppy', N'NameOfPestsDisease', N'Weed pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (148, NULL, N'Narrow leaves', N'NameOfPestsDisease', N'Weed pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (149, NULL, N'Nutgrass ', N'NameOfPestsDisease', N'Weed pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (150, NULL, N'Sedges', N'NameOfPestsDisease', N'Weed pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (151, NULL, N'Star grass ', N'NameOfPestsDisease', N'Weed pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (152, NULL, N'Striga/witchweed', N'NameOfPestsDisease', N'Weed pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (153, NULL, N'Hedge hog', N'NameOfPestsDisease', N'Rodent pest ', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (154, NULL, N'Moles', N'NameOfPestsDisease', N'Rodent pest ', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (155, NULL, N'Porcupine', N'NameOfPestsDisease', N'Rodent pest ', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (156, NULL, N'Rats ', N'NameOfPestsDisease', N'Rodent pest ', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (157, NULL, N'Love birds ', N'NameOfPestsDisease', N'Avian (birds)', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (158, NULL, N'Pegion ', N'NameOfPestsDisease', N'Avian (birds)', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (159, NULL, N'Quelea birds ', N'NameOfPestsDisease', N'Avian (birds)', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (160, NULL, N'Green mite', N'NameOfPestsDisease', N'Other pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (161, NULL, N'Mole crikets', N'NameOfPestsDisease', N'Other pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (162, NULL, N'Monkeys', N'NameOfPestsDisease', N'Other pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (163, NULL, N'Nematodes', N'NameOfPestsDisease', N'Other pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (164, NULL, N'Root  lession nematode', N'NameOfPestsDisease', N'Other pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (165, NULL, N'Spiral nematode', N'NameOfPestsDisease', N'Other pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (166, NULL, N'Wild pigs', N'NameOfPestsDisease', N'Other pest', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (167, NULL, N'abnormal odour', N'TypeOfDisease', N'Ng''ombeMbuziKondoo', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (168, NULL, N'Actinobacillosis', N'TypeOfDisease', N'Ng''ombe', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (169, NULL, N'anaemia', N'TypeOfDisease', N'Ng''ombeMbuziKondoo', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (170, NULL, N'anthrax', N'TypeOfDisease', N'Ng''ombeMbuziKondooNguruwe', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (171, NULL, N'blackquarter', N'TypeOfDisease', N'Ng''ombe', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (172, NULL, N'bruises', N'TypeOfDisease', N'Ng''ombeMbuziKondoo', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (173, NULL, N'Canine Distemper', N'TypeOfDisease', N'Mbwa', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (174, NULL, N'cloaca inflammation', N'TypeOfDisease', N'Kuku', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (175, NULL, N'contamination with oil or paints', N'TypeOfDisease', N'Kuku', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (176, NULL, N'CRD', N'TypeOfDisease', N'Kuku', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (177, NULL, N'dropsy  ', N'TypeOfDisease', N'Ng''ombeMbuziKondoo', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (178, NULL, N'Duck Virus hepatitis', N'TypeOfDisease', N'Bata', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (179, NULL, N'emaciation', N'TypeOfDisease', N'Ng''ombeMbuziKondooNguruweKuku', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (180, NULL, N'Emphysema', N'TypeOfDisease', N'Ng''ombe', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (181, NULL, N'fever', N'TypeOfDisease', N'Ng''ombeMbuziKondoo', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (182, NULL, N'generalized actimomycosis', N'TypeOfDisease', N'Ng''ombe', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (183, NULL, N'generalized cysticercuscellulosae', N'TypeOfDisease', N'Nguruwe', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (184, NULL, N'generalized TB', N'TypeOfDisease', N'Ng''ombeMbuziKondoo', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (185, NULL, N'Helminthosi(Parasitic Diseases)', N'TypeOfDisease', N'Bata', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (186, NULL, N'Hepatitis', N'TypeOfDisease', N'Ng''ombe', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (187, NULL, N'Icterus', N'TypeOfDisease', N'Ng''ombe', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (188, NULL, N'jaundice', N'TypeOfDisease', N'Ng''ombeMbuziKondoo', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (189, NULL, N'Multiple abscesses', N'TypeOfDisease', N'Ng''ombeMbuziKondooNguruwe', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (190, NULL, N'New castle disease', N'TypeOfDisease', N'Kuku', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (191, NULL, N'over scalding', N'TypeOfDisease', N'Kuku', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (192, NULL, N'ParvoVirus', N'TypeOfDisease', N'Mbwa', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (193, NULL, N'Pleurisy', N'TypeOfDisease', N'Ng''ombeMbuziKondoo', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (194, NULL, N'pyaemia', N'TypeOfDisease', N'Ng''ombeMbuziKondoo', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (195, NULL, N'Rabies', N'TypeOfDisease', N'Mbwa', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (196, NULL, N'Rift Valley Fever', N'TypeOfDisease', N'Ng''ombeMbuziKondoo', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (197, NULL, N'swine fever', N'TypeOfDisease', N'Nguruwe', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (198, NULL, N'TB', N'TypeOfDisease', N'Kuku', NULL)
INSERT [dbo].[MonthlyLookupTable] ([LookupID], [LookupSw], [LookupEn], [LookupType], [LookupTypeFilter], [LookupStatus]) VALUES (199, NULL, N'uraemia', N'TypeOfDisease', N'Ng''ombeMbuziKondoo', NULL)
SET IDENTITY_INSERT [dbo].[MonthlyLookupTable] OFF



