alter table recordinfo add FormSerialNumberIQ varchar(50) 
go
alter table recordinfo add FormSerialNumberIA varchar(50) 
GO
alter table recordinfo add ApprovedByUserID varchar(50)  
go
update recordinfo set FormSerialNumberIQ=FormSerialID
GO
update recordinfo set FormSerialNumberIQ=substring(FormSerialNumberIQ,0,37)+'Mar'+substring(FormSerialNumberIQ,40,3) from recordinfo where  formtypenumber =1
GO
update recordinfo set FormSerialNumberIQ=substring(FormSerialNumberIQ,0,37)+'Sep'+substring(FormSerialNumberIQ,40,3) from recordinfo where  formtypenumber =3
GO
update recordinfo set FormSerialNumberIQ=substring(FormSerialNumberIQ,0,37)+'Sep'+substring(FormSerialNumberIQ,40,3) from recordinfo where  formtypenumber =3
GO
update recordinfo set FormSerialNumberIA=substring(FormSerialNumberIQ,0,22)+'___00001Jul1030Jun11'
GO

/****** Object:  StoredProcedure [dbo].[appUspAnnualFillFFSMasoko]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillFFSMasoko]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillFFSMazao]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillFFSMazao]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillFFSMengineyo]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillFFSMengineyo]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillFFSUfugaji]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillFFSUfugaji]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillFFSUvuvi]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillFFSUvuvi]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImplements]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillImplements]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsAlizeti]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsAlizeti]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsMaharage]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsMaharage]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsMahindi]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsMahindi]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsMpunga]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsMpunga]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsMtama]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsMtama]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsNgano]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsNgano]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsOthers]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsOthers]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillLivestockInfrastructure]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillLivestockInfrastructure]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillMachineryDrawn]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillMachineryDrawn]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillMachines]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillMachines]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteAnimalDrawn]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualDeleteAnimalDrawn]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteCropResidue]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualDeleteCropResidue]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteImplements]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualDeleteImplements]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteLivestockInfrastructure]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualDeleteLivestockInfrastructure]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteMachine]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualDeleteMachine]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteMachineryDrawn]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualDeleteMachineryDrawn]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteProcessingMachine]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualDeleteProcessingMachine]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteTelecom]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualDeleteTelecom]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteTVAndRadio]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualDeleteTVAndRadio]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillAnimalDrawn]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillAnimalDrawn]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillProcessingMachines]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillProcessingMachines]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillRadio]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillRadio]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillTelecom]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillTelecom]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillTV]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillTV]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillTVAndRadio]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillTVAndRadio]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualInsertBasicInformation]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualInsertBasicInformation]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualInsertCropResidue]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualInsertCropResidue]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualInsertImprovedPasture]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualInsertImprovedPasture]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnuallyDeleteForm]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnuallyDeleteForm]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnuallyFillImprovedPasture]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnuallyFillImprovedPasture]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateProcessingMachine]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualUpdateProcessingMachine]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateTelecom]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualUpdateTelecom]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateTVAndRadio]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualUpdateTVAndRadio]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateImplements]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualUpdateImplements]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateLivestockInfrastructure]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualUpdateLivestockInfrastructure]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateMachineryDrawn]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualUpdateMachineryDrawn]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateMachines]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualUpdateMachines]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateAnimalDrawn]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualUpdateAnimalDrawn]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteChemicalControl]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyDeleteChemicalControl]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteDipping]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyDeleteDipping]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteForm]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyDeleteForm]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteLivestockSlaughtered]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyDeleteLivestockSlaughtered]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteMeatInspection]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyDeleteMeatInspection]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteMedication]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyDeleteMedication]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteTargets]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyDeleteTargets]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteVisitors]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyDeleteVisitors]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyFillLivestockServices]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyFillLivestockServices]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyFillWeatherCondition]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyFillWeatherCondition]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertChemicalControl]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyInsertChemicalControl]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertComments]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyInsertComments]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertDipping]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyInsertDipping]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertMeatInspection]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyInsertMeatInspection]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertMedication]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyInsertMedication]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertVisitors]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyInsertVisitors]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertWeatherCondition]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyInsertWeatherCondition]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyUpdateLivestockSlaughtered]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyUpdateLivestockSlaughtered]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyUpdateTargets]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyUpdateTargets]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyDeleteForm]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterlyDeleteForm]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyDeleteIrrigation]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterlyDeleteIrrigation]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyDeletePlantHealth]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterlyDeletePlantHealth]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyDeleteSoilErosion]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterlyDeleteSoilErosion]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyInsertIrrigation]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterlyInsertIrrigation]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyInsertPlantHealth]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterlyInsertPlantHealth]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyInsertSoilErosion]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterlyInsertSoilErosion]
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_bulkdelete]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[ChemicalControl01_bulkdelete]
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_bulkinsert]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[ChemicalControl01_bulkinsert]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyInsertCoopSaccos]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterlyInsertCoopSaccos]
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_bulkupdate]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[ChemicalControl01_bulkupdate]
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_delete]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[ChemicalControl01_delete]
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_selectchanges]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[ChemicalControl01_selectchanges]
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_selectrow]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[ChemicalControl01_selectrow]
GO
/****** Object:  StoredProcedure [dbo].[cleanDB]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[cleanDB]
GO
/****** Object:  StoredProcedure [dbo].[FillIrrigationScheme03]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[FillIrrigationScheme03]
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_insert]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[ChemicalControl01_insert]
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_update]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[ChemicalControl01_update]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportFFS]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportFFS]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportGrazingLand]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportGrazingLand]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportImplements]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportImplements]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportImprovedPasture]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportImprovedPasture]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportImprovedSeeds]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportImprovedSeeds]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportImprovedSeedsOthers]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportImprovedSeedsOthers]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportIrrigationScheme]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportIrrigationScheme]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportLivestockInfrastructure]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportLivestockInfrastructure]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportLivestockPopulation]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportLivestockPopulation]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportMachineryDrawn]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportMachineryDrawn]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportMachines]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportMachines]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportTelecommunication]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportTelecommunication]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportTVAndRadio]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportTVAndRadio]
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportCommentsOfVillageOfficer]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardMonthlyReportCommentsOfVillageOfficer]
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportDipping]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardMonthlyReportDipping]
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportLivestockServices]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardMonthlyReportLivestockServices]
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportLivestockSlaughtered]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardMonthlyReportLivestockSlaughtered]
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportMeatInspection]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardMonthlyReportMeatInspection]
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportMedication]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardMonthlyReportMedication]
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportPlantHealth]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardMonthlyReportPlantHealth]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportAnimalDrawn]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportAnimalDrawn]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportBasicInformation]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportBasicInformation]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportContractFarming]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportContractFarming]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportCropResidue]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportCropResidue]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportProcessingMachine]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportProcessingMachine]
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportProdSkin]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardMonthlyReportProdSkin]
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportTarget]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardMonthlyReportTarget]
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportVisitors]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardMonthlyReportVisitors]
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportWeatherCondition]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardMonthlyReportWeatherCondition]
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportCoopSaccos]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardQuarterlyReportCoopSaccos]
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportCropUnderIrrigation]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardQuarterlyReportCropUnderIrrigation]
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportSoilErosion]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardQuarterlyReportSoilErosion]
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportPlantHealth]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardQuarterlyReportPlantHealth]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualCropResidue]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualCropResidue]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualGrazingLand]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualGrazingLand]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualHandOperatedImplements]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualHandOperatedImplements]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualImprovedPasture]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualImprovedPasture]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualImprovedSeeds]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualImprovedSeeds]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualIrrigation]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualIrrigation]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualIrrigationScheme]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualIrrigationScheme]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualLivestockInfrastracture]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualLivestockInfrastracture]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualLivestockPopulation]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualLivestockPopulation]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualMachineryDrawn]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualMachineryDrawn]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualMachines]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualMachines]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualAnimalDrawn]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualAnimalDrawn]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualContractFarming]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualContractFarming]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualFFS]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualFFS]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualProcessingMachines]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualProcessingMachines]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualSaccos]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualSaccos]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualTelecommunication]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualTelecommunication]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualTVAndRadioStation]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualTVAndRadioStation]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardAnimalDrawn]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardAnimalDrawn]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardBasicInformation]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardBasicInformation]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardContractFarming]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardContractFarming]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardCropResidue]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardCropResidue]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardFFS]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardFFS]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardGrazingLand]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardGrazingLand]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardImplements]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardImplements]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardImprovedPasture]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardImprovedPasture]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardImprovedSeeds]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardImprovedSeeds]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardImprovedSeedsOthers]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardImprovedSeedsOthers]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardIrrigationScheme]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardIrrigationScheme]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardLivestockInfrastructure]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardLivestockInfrastructure]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardLivestockPopulation]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardLivestockPopulation]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardMachineryDrawn]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardMachineryDrawn]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardMachines]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardMachines]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyCommentsOfVillageOfficer]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyCommentsOfVillageOfficer]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyDipping]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyDipping]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyLivestockServices]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyLivestockServices]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyLivestockSlaughtered]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyLivestockSlaughtered]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyMeatInspection]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyMeatInspection]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyMedication]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyMedication]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyPlantHealth]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyPlantHealth]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardProcessingMachine]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardProcessingMachine]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardTelecommunication]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardTelecommunication]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardTVAndRadio]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardTVAndRadio]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyProdSkin]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyProdSkin]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTarget]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyTarget]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetCereal]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyTargetCereal]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetIndustrial]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyTargetIndustrial]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetKunde]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyTargetKunde]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetMafuta]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyTargetMafuta]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetMatunda]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyTargetMatunda]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetMaua]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyTargetMaua]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetMbogamboga]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyTargetMbogamboga]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetMengineyo]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyTargetMengineyo]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetMizizi]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyTargetMizizi]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetViungo]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyTargetViungo]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyVisitors]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyVisitors]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyWeatherConditionActivities]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyWeatherConditionActivities]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyWeatherConditionDisaster]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyWeatherConditionDisaster]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyWeatherConditionRainfall]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyWeatherConditionRainfall]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQRCereal]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQRCereal]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyLivestockSlaughtered]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyLivestockSlaughtered]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyMeatInspection]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyMeatInspection]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyPlantHealth]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyPlantHealth]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyProdSkin]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyProdSkin]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardCoopSaccos]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyWardCoopSaccos]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardCropUnderIrrigation]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyWardCropUnderIrrigation]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyTarget]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyTarget]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardPlantHealth]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyWardPlantHealth]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardSoilErosion]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyWardSoilErosion]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardCoopGroups]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyWardCoopGroups]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardFFS]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyWardFFS]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardFoodCondition01]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyWardFoodCondition01]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardFoodCondition02]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyWardFoodCondition02]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyProductsMovement]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyProductsMovement]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlySubmissionStatus]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlySubmissionStatus]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyReproductionInputs]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyReproductionInputs]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyProdMilk]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyProdMilk]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyAnimalFeeds]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyAnimalFeeds]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyLivestockMarketing]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyLivestockMarketing]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyLivestockMovement]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyLivestockMovement]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualProductsProcessing]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualProductsProcessing]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWorkingEquipments]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWorkingEquipments]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWorkingFacilities]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWorkingFacilities]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyProdMilk]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyProdMilk]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardPestcide]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardPestcide]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardFertilizer]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardFertilizer]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardAiredPrograms]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualWardAiredPrograms]
GO
/****** Object:  StoredProcedure [dbo].[udp_insert_form]    Script Date: 05/06/2013 17:36:02 ******/
DROP PROCEDURE [dbo].[udp_insert_form]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualPestcide]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualPestcide]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualPlanningCommittee]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualPlanningCommittee]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualFFSOther]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualFFSOther]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualFoodSituation]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualFoodSituation]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualCoopGroup]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualCoopGroup]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualDistrictInfo]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualDistrictInfo]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualDistrictLivestockPopulation]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualDistrictLivestockPopulation]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualEducationLevel]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualEducationLevel]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualExtensionOfficers]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualExtensionOfficers]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualExtensionOfficersTrained]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualExtensionOfficersTrained]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualExtensionServiceProviders]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualExtensionServiceProviders]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualFertilizer]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualFertilizer]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteAiredPrograms]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualDeleteAiredPrograms]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualAiredPrograms]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualAiredPrograms]
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_bulkupdate]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[QuarterlyRecord_bulkupdate]
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_delete]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[QuarterlyRecord_delete]
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_insert]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[QuarterlyRecord_insert]
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_update]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[QuarterlyRecord_update]
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_selectchanges]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[QuarterlyRecord_selectchanges]
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_selectrow]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[QuarterlyRecord_selectrow]
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_bulkdelete]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[QuarterlyRecord_bulkdelete]
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_bulkinsert]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[QuarterlyRecord_bulkinsert]
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportFFS]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardQuarterlyReportFFS]
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportFoodCondition]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardQuarterlyReportFoodCondition]
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportCoopGroups]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardQuarterlyReportCoopGroups]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportFertilizer]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportFertilizer]
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportProdMilk]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardMonthlyReportProdMilk]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportPestcide]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportPestcide]
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_bulkupdate]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[MonthlyRecord_bulkupdate]
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_delete]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[MonthlyRecord_delete]
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_insert]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[MonthlyRecord_insert]
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_update]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[MonthlyRecord_update]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportAiredPrograms]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportAiredPrograms]
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_bulkdelete]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[MonthlyRecord_bulkdelete]
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_bulkinsert]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[MonthlyRecord_bulkinsert]
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_selectchanges]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[MonthlyRecord_selectchanges]
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_selectrow]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[MonthlyRecord_selectrow]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyInsertFoodCondition]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterlyInsertFoodCondition]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyFillFoodCondition]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterlyFillFoodCondition]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateFertilizer]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualUpdateFertilizer]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdatePesticide]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualUpdatePesticide]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterDeleteLivestockMovement]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterDeleteLivestockMovement]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterDeleteProductsMovement]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterDeleteProductsMovement]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillAcaricides]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterFillAcaricides]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillAnimalFeeds]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterFillAnimalFeeds]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillLivestockMarketing]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterFillLivestockMarketing]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillLivestockMovement]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterFillLivestockMovement]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillProductsMovement]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterFillProductsMovement]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillReproductionInput]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterFillReproductionInput]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillTreatment(Drugs)]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterFillTreatment(Drugs)]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillVaccines]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterFillVaccines]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterlyDeleteForm]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterlyDeleteForm]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterUpdateAnimalFeeds]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterUpdateAnimalFeeds]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterUpdateLivestockMovement]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterUpdateLivestockMovement]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterUpdateProductsMovement]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterUpdateProductsMovement]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillPlanningCommitee]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillPlanningCommitee]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingAnimal]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingAnimal]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingHide]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingHide]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingMeat]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingMeat]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingMilk]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingMilk]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillWorkingEquipments]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillWorkingEquipments]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillWorkingFacilities]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillWorkingFacilities]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualInsertDistrictInfo]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualInsertDistrictInfo]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnuallyDeleteForm]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnuallyDeleteForm]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateDistrictInfoPageFive]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualUpdateDistrictInfoPageFive]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateDistrictInfoPageOne]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualUpdateDistrictInfoPageOne]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateDistrictInfoPageTwo]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualUpdateDistrictInfoPageTwo]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateExtensionOfficersCrop]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualUpdateExtensionOfficersCrop]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateExtensionOfficersLivestock]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualUpdateExtensionOfficersLivestock]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateExtensionServiceProviders]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualUpdateExtensionServiceProviders]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateLivestockInfrastructure]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualUpdateLivestockInfrastructure]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateLivestockPopulation]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualUpdateLivestockPopulation]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualDeleteExtensionOfficer]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualDeleteExtensionOfficer]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualDeleteExtensionServiceProvider]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualDeleteExtensionServiceProvider]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualDeleteLivestockPopulation]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualDeleteLivestockPopulation]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillEducationLevel]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillEducationLevel]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersCrop]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersCrop]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersLivestock]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersLivestock]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersOthers]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersOthers]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedCrop]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedCrop]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedFishery]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedFishery]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedIrrigation]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedIrrigation]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedLivestock]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedLivestock]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedMarketing]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedMarketing]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedOthers]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedOthers]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillFoodSituation]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillFoodSituation]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillLivestockInfrastructure]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillLivestockInfrastructure]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetDeleteForm]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualTargetDeleteForm]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetDeleteTargets]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualTargetDeleteTargets]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillCereal]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualTargetFillCereal]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillKunde]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualTargetFillKunde]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillMafuta]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualTargetFillMafuta]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillMatunda]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualTargetFillMatunda]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillMaua]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualTargetFillMaua]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillMbogamboga]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualTargetFillMbogamboga]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillMengineyo]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualTargetFillMengineyo]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillMizizi]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualTargetFillMizizi]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillViungo]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualTargetFillViungo]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillViwandani]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualTargetFillViwandani]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetsUpdateMengineyo]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspAnnualTargetsUpdateMengineyo]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualInsertAiredPrograms]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualInsertAiredPrograms]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillFertilizer]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillFertilizer]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeletePestcide]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualDeletePestcide]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteFertilizer]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualDeleteFertilizer]
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_update]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[AnnualRecord_update]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillPestcide]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillPestcide]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillPestcideFangasi]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillPestcideFangasi]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillPestcideMagugu]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillPestcideMagugu]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillPestcideNdege]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillPestcideNdege]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillPestcidePanya]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillPestcidePanya]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillPestcideWadudu]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualFillPestcideWadudu]
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_bulkdelete]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[AnnualRecord_bulkdelete]
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_bulkinsert]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[AnnualRecord_bulkinsert]
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_bulkupdate]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[AnnualRecord_bulkupdate]
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_delete]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[AnnualRecord_delete]
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_insert]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[AnnualRecord_insert]
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_selectchanges]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[AnnualRecord_selectchanges]
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_selectrow]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[AnnualRecord_selectrow]
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportRecordInfo]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardMonthlyReportRecordInfo]
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportRecordInfo]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardAnnualReportRecordInfo]
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportProdLand]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardQuarterlyReportProdLand]
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportRecordInfo]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[prntWardQuarterlyReportRecordInfo]
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_bulkdelete]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[RecordInfo_bulkdelete]
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_bulkinsert]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[RecordInfo_bulkinsert]
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_bulkupdate]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[RecordInfo_bulkupdate]
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_delete]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[RecordInfo_delete]
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_insert]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[RecordInfo_insert]
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_selectchanges]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[RecordInfo_selectchanges]
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_selectrow]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[RecordInfo_selectrow]
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_update]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[RecordInfo_update]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualProdLand]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualProdLand]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualOxenizing]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualOxenizing]
GO
/****** Object:  StoredProcedure [dbo].[udp_forms_submitted]    Script Date: 05/06/2013 17:36:02 ******/
DROP PROCEDURE [dbo].[udp_forms_submitted]
GO
/****** Object:  StoredProcedure [dbo].[rptUspLGAName]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspLGAName]
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualRecordInfo]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[rptUspAnnualRecordInfo]
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyRecordInfo]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspMonthlyRecordInfo]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyRecordInfo]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyRecordInfo]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardProdLandMasika]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyWardProdLandMasika]
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardProdLandVuli]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspQuarterlyWardProdLandVuli]
GO
/****** Object:  StoredProcedure [dbo].[rptUspWardReportSubmissionStatus]    Script Date: 05/06/2013 17:36:01 ******/
DROP PROCEDURE [dbo].[rptUspWardReportSubmissionStatus]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillOxenizing]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictAnnualFillOxenizing]
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupCrops]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspLookupCrops]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyLookupNameOfPestsDisease]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterlyLookupNameOfPestsDisease]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterLookupErosionControlGully]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterLookupErosionControlGully]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterLookupErosionControlMeasures]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterLookupErosionControlMeasures]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterLookupErosionControlRill]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterLookupErosionControlRill]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterLookupErosionControlSheet]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterLookupErosionControlSheet]
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterLookUpTypeOfErosion]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspQuarterLookUpTypeOfErosion]
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupSeverity]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspLookupSeverity]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupCondemnations]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyLookupCondemnations]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupDipSpray]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyLookupDipSpray]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupLivestockSlaugh]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyLookupLivestockSlaugh]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupNameOfPestsDisease]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyLookupNameOfPestsDisease]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupTypeOfAnimal]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyLookupTypeOfAnimal]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupTypeOfDisease]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyLookupTypeOfDisease]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupTypeOfLivestock]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyLookupTypeOfLivestock]
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupVaccine]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspMonthlyLookupVaccine]
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_deletemetadata]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[ChemicalControl01_deletemetadata]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraAlizeti]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraAlizeti]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraMaharage]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraMaharage]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraMaize]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraMaize]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraMpunga]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraMpunga]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraMtama]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraMtama]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraNgano]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraNgano]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraOthers]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraOthers]
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraOthersFilter]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraOthersFilter]
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_updatemetadata]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[AnnualRecord_updatemetadata]
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_insertmetadata]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[AnnualRecord_insertmetadata]
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_deletemetadata]    Script Date: 05/06/2013 17:35:58 ******/
DROP PROCEDURE [dbo].[AnnualRecord_deletemetadata]
GO
/****** Object:  StoredProcedure [dbo].[Machines03SP]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[Machines03SP]
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_updatemetadata]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[RecordInfo_updatemetadata]
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_insertmetadata]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[RecordInfo_insertmetadata]
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_deletemetadata]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[RecordInfo_deletemetadata]
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_deletemetadata]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[QuarterlyRecord_deletemetadata]
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_updatemetadata]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[QuarterlyRecord_updatemetadata]
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_insertmetadata]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[QuarterlyRecord_insertmetadata]
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_updatemetadata]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[MonthlyRecord_updatemetadata]
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_insertmetadata]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[MonthlyRecord_insertmetadata]
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_deletemetadata]    Script Date: 05/06/2013 17:36:00 ******/
DROP PROCEDURE [dbo].[MonthlyRecord_deletemetadata]
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_updatemetadata]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[ChemicalControl01_updatemetadata]
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_insertmetadata]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[ChemicalControl01_insertmetadata]
GO
/****** Object:  StoredProcedure [dbo].[udp_geo_list]    Script Date: 05/06/2013 17:36:02 ******/
DROP PROCEDURE [dbo].[udp_geo_list]
GO
/****** Object:  StoredProcedure [dbo].[udp_geo_list_configure]    Script Date: 05/06/2013 17:36:02 ******/
DROP PROCEDURE [dbo].[udp_geo_list_configure]
GO
/****** Object:  StoredProcedure [dbo].[udp_sector_list]    Script Date: 05/06/2013 17:36:02 ******/
DROP PROCEDURE [dbo].[udp_sector_list]
GO
/****** Object:  StoredProcedure [dbo].[udp_area_levels_configure]    Script Date: 05/06/2013 17:36:02 ******/
DROP PROCEDURE [dbo].[udp_area_levels_configure]
GO
/****** Object:  StoredProcedure [dbo].[udp_area_levels_data_entry]    Script Date: 05/06/2013 17:36:02 ******/
DROP PROCEDURE [dbo].[udp_area_levels_data_entry]
GO
/****** Object:  StoredProcedure [dbo].[udp_area_levels_used]    Script Date: 05/06/2013 17:36:02 ******/
DROP PROCEDURE [dbo].[udp_area_levels_used]
GO
/****** Object:  StoredProcedure [dbo].[udp_configure]    Script Date: 05/06/2013 17:36:02 ******/
DROP PROCEDURE [dbo].[udp_configure]
GO
/****** Object:  StoredProcedure [dbo].[udp_count]    Script Date: 05/06/2013 17:36:02 ******/
DROP PROCEDURE [dbo].[udp_count]
GO
/****** Object:  StoredProcedure [dbo].[udp_domain]    Script Date: 05/06/2013 17:36:02 ******/
DROP PROCEDURE [dbo].[udp_domain]
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupSourceOfBudget]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspLookupSourceOfBudget]
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupStatusOfScheme]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspLookupStatusOfScheme]
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupTypeOfOwnership]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspLookupTypeOfOwnership]
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupUnits]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspLookupUnits]
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupSeasonIrrigated]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspLookupSeasonIrrigated]
GO
/****** Object:  StoredProcedure [dbo].[appUspExportData]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspExportData]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterDeleteLivestockMarketing]    Script Date: 05/06/2013 17:35:59 ******/
DROP PROCEDURE [dbo].[appUspDistrictQuarterDeleteLivestockMarketing]
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterDeleteLivestockMarketing]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterDeleteLivestockMarketing] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
END
GO
/****** Object:  StoredProcedure [dbo].[appUspExportData]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspExportData]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@DatabaseName varchar(100),
@FormSerialNumber nvarchar(50) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
--EXEC('SELECT [RecordID],[AreaID],[OfficerName],[Year],[SubmissionDate],[ObjectType],[PeriodFrom],[PeriodTo],[FormTypeNumber],[CompleteByPersonID],[DateCompleted],[ApprovedByPersonID],[DateReceived],[DateCaptured],[CapturedByUserID],[DateVerified],[VerifiedByUserID],[Comments],[FormSerialNumber],[OrganisationID],[FormSerialID] INTO '+@DatabaseName+'.dbo.RecordInfo')
EXEC('SELECT [RecordID],[Month],[FormSerialID] INTO '+@DatabaseName+'.dbo.MonthlyRecord FROM MonthlyRecord WHERE FormSerialID=''@FormSerialNumber'' ')
EXEC('SELECT [RecordID],[Quarter],[MonthInterval],[FormSerialID] INTO '+@DatabaseName+'.dbo.QuarterlyRecord FROM QuarterlyRecord WHERE FormSerialID=''@FormSerialNumber'' ')
EXEC('SELECT RecordID,FormSerialID INTO '+@DatabaseName+'.dbo.AnnualRecord FROM AnnualRecord WHERE FormSerialID = ''@FormSerialNumber'' ')

EXEC('SELECT [ChemicalControlID],[PestID],[CropID],[Severity],[AffectedArea],[NumberOfVillageAffected],[PestcideApplied],[AmountOfPestcideApplied],[Unit],[NumberOfVillagesServed],[NumberOfHouseHoldServed],[AreaRescued],[Remarks],[MonthlyRecordID],[FormSerialID] INTO '+@DatabaseName+'.dbo.ChemicalControl01 FROM ChemicalControl01 WHERE FormSerialID=''@FormSerialNumber'' ')
EXEC('SELECT [CommentsOfVillageOfficerID],[Achievement],[Challenges],[MonthlyRecordID],[FormSerialID] INTO '+@DatabaseName+'.dbo.CommentsOfVillageOfficer FROM CommentsOfVillageOfficer01 WHERE FormSerialID=''@FormSerialNumber'' ')
END
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupSeasonIrrigated]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspLookupSeasonIrrigated] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT 1 AS 'SeasonIrrigatedID', 'Both rainy and dry season' AS 'SeasonIrrigated'
UNION
SELECT 2 AS 'SeasonIrrigatedID', 'Only rainy season' AS 'SeasonIrrigated'
UNION
SELECT 3 AS 'SeasonIrrigatedID', 'Only dry season' AS 'SeasonIrrigated'

END
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupUnits]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspLookupUnits] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT 1 AS 'UnitID','KG' AS 'UnitName'
UNION
SELECT 2 AS 'UnitID','Litre' AS 'UnitName'
--UNION
--SELECT 3 AS 'UnitID','Piece' AS 'UnitName'
--UNION
--SELECT 4 AS 'UnitID','Ton' AS 'UnitName'
--UNION
--SELECT 5 AS 'UnitID','Number' AS 'UnitName'
END
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupTypeOfOwnership]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspLookupTypeOfOwnership]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT 1 AS 'SourceOfBudgetID', 'Public' AS 'SourceOfBudget'
UNION
SELECT 2 AS 'SourceOfBudgetID', 'CBO' AS 'SourceOfBudget'
UNION
SELECT 1 AS 'SourceOfBudgetID', 'NGO' AS 'SourceOfBudget'
UNION
SELECT 2 AS 'SourceOfBudgetID', 'Individual' AS 'SourceOfBudget'
UNION
SELECT 2 AS 'SourceOfBudgetID', 'Private' AS 'SourceOfBudget'
END
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupStatusOfScheme]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspLookupStatusOfScheme] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT 1 AS 'StatusOfSchemeID', 'Good' AS 'StatusOfScheme'
UNION
SELECT 2 AS 'StatusOfSchemeID', 'Acceptable' AS 'StatusOfScheme'
UNION
SELECT 3 AS 'StatusOfSchemeID', 'Need repairment' AS 'StatusOfScheme'
UNION
SELECT 3 AS 'StatusOfSchemeID', 'Not known' AS 'StatusOfScheme'
END
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupSourceOfBudget]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspLookupSourceOfBudget] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT 1 AS 'SourceOfBudgetID', 'Government subsidy' AS 'SourceOfBudget'
UNION
SELECT 2 AS 'SourceOfBudgetID', 'Private acquired' AS 'SourceOfBudget'
END
GO
/****** Object:  StoredProcedure [dbo].[udp_domain]    Script Date: 05/06/2013 17:36:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
CREATE PROCEDURE [dbo].[udp_domain] 
	-- Add the parameters for the stored procedure here
	@TheOutputField nvarchar(1000),	
	@TheTable nvarchar(1000),
	@TheCriteria nvarchar(1000)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		set @TheCriteria=isnull(@TheCriteria ,'1=1')
	    -- Insert statements for procedure here
	exec ('SELECT '+ @TheOutputField +' from '+@TheTable+' where '+ @TheCriteria  +'')
END



--0715 383549
GO
/****** Object:  StoredProcedure [dbo].[udp_count]    Script Date: 05/06/2013 17:36:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[udp_count] 
	-- Add the parameters for the stored procedure here
		-- Add the parameters for the stored procedure here
	@TheFieldToCount nvarchar(100),	
	@TheTable nvarchar(100),
	@TheCriteria nvarchar(100)
	

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	set @TheCriteria=isnull(@TheCriteria ,'1=1')
	    -- Insert statements for procedure here
	exec ('SELECT count(*) from (SELECT distinct '+ @TheFieldToCount +' from '+@TheTable+' where '+ @TheCriteria  +') as qry')

END
GO
/****** Object:  StoredProcedure [dbo].[udp_configure]    Script Date: 05/06/2013 17:36:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[udp_configure]
	-- Add the parameters for the stored procedure here
	@Area_Level nvarchar(255),
	@Area_ID nvarchar(255)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


    -- Insert statements for procedure here

	delete from tbl_config
	where config_name = 'Area_Level' or config_name = 'Area_ID'

	insert into tbl_config (config_name, config_value)
	values('Area_Level',@Area_Level)

	insert into tbl_config (config_name, config_value)
	values('Area_ID',@Area_ID)


END
GO
/****** Object:  StoredProcedure [dbo].[udp_area_levels_used]    Script Date: 05/06/2013 17:36:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================

-- Author:        <Author,,Name>

-- ALTER date: <ALTER Date,,>

-- Description:   <Description,,>

-- =============================================

CREATE PROCEDURE [dbo].[udp_area_levels_used]

      -- Add the parameters for the stored procedure here

            @Language varchar(20)

AS

BEGIN

      -- SET NOCOUNT ON added to prevent extra result sets from

      -- interfering with SELECT statements.

      SET NOCOUNT ON;

 

    -- Insert statements for procedure here

      SELECT     dbo.tbl_setup_area_levels.Area_Level, 

CASE WHEN @Language='Swahili' THEN Area_Level_Name_Swahili

       WHEN @Language='English' THEN Area_Level_Name_English

      END

      As Area_Level_Name

FROM  dbo.tbl_setup_area_levels 

where area_level = dbo.udf_lowest_submitted_geo_area() or (area_level <= dbo.udf_lowest_submitted_geo_area() and area_level >= isnull(dbo.udf_highest_geo_area_with_multiple_coverages(),99))

 

END
GO
/****** Object:  StoredProcedure [dbo].[udp_area_levels_data_entry]    Script Date: 05/06/2013 17:36:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[udp_area_levels_data_entry]
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT tbl_setup_area_levels.* from tbl_setup_area_levels where Data_Entry = 1
END
GO
/****** Object:  StoredProcedure [dbo].[udp_area_levels_configure]    Script Date: 05/06/2013 17:36:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[udp_area_levels_configure]
	-- Add the parameters for the stored procedure here
	@Language varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
select 
dbo.tbl_setup_area_levels.Area_Level, 
CASE 
WHEN @Language='Swahili' THEN Area_Level_Name_Swahili
WHEN @Language='English' THEN Area_Level_Name_English
END
As Area_Level_Name
from tbl_setup_area_levels where use_at_level = 1
END
GO
/****** Object:  StoredProcedure [dbo].[udp_sector_list]    Script Date: 05/06/2013 17:36:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[udp_sector_list]
	-- Add the parameters for the stored procedure here
	@Language varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT sector_id,
	CASE WHEN @Language='Swahili' THEN sector_swahili
       WHEN @Language='English' THEN sector_english
	END
	As sector
	From tbl_setup_sectors

END
GO
/****** Object:  StoredProcedure [dbo].[udp_geo_list_configure]    Script Date: 05/06/2013 17:36:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[udp_geo_list_configure]
	-- Add the parameters for the stored procedure here
@AreaLevel int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    -- Insert statements for procedure here
SELECT 
tbl_setup_areas.* 
from 
tbl_setup_areas 
where 
Area_Level = @AreaLevel 
order by area_name

--SELECT 
--Areas.* 
--from 
--Areas
--where 
--AreaLevel = 2 
--order by Name
END
GO
/****** Object:  StoredProcedure [dbo].[udp_geo_list]    Script Date: 05/06/2013 17:36:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[udp_geo_list]
	-- Add the parameters for the stored procedure here
	@AreaLevel int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @config_area_id VARCHAR(255)

	Select @config_area_id = config_value from tbl_config where config_name = 'Area_ID'

    -- Insert statements for procedure here
	SELECT tbl_setup_areas.* from tbl_setup_areas where Area_Level = (@AreaLevel+1) and Area_ID like @config_area_id + '%'
END
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_insertmetadata]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ChemicalControl01_insertmetadata]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_row_is_tombstone Int,
	@sync_create_peer_key Int,
	@sync_create_peer_timestamp BigInt,
	@sync_update_peer_key Int,
	@sync_update_peer_timestamp BigInt,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; UPDATE [ChemicalControl01_tracking] SET [create_scope_local_id] = @sync_scope_local_id, [scope_create_peer_key] = @sync_create_peer_key, [scope_create_peer_timestamp] = @sync_create_peer_timestamp, [local_create_peer_key] = 0, [local_create_peer_timestamp] = @@DBTS+1, [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([ChemicalControlID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp);SET @sync_row_count = @@ROWCOUNT;IF (@sync_row_count = 0) BEGIN INSERT INTO [ChemicalControl01_tracking] ([ChemicalControlID], [create_scope_local_id], [scope_create_peer_key], [scope_create_peer_timestamp], [local_create_peer_key], [local_create_peer_timestamp], [update_scope_local_id], [scope_update_peer_key], [scope_update_peer_timestamp], [local_update_peer_key], [restore_timestamp], [sync_row_is_tombstone], [last_change_datetime]) VALUES (@P_1, @sync_scope_local_id, @sync_create_peer_key, @sync_create_peer_timestamp, 0, @@DBTS+1, @sync_scope_local_id, @sync_update_peer_key, @sync_update_peer_timestamp, 0, NULL, @sync_row_is_tombstone, GETDATE());SET @sync_row_count = @@ROWCOUNT; END;
END
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_updatemetadata]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ChemicalControl01_updatemetadata]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_row_is_tombstone Int,
	@sync_create_peer_key Int,
	@sync_create_peer_timestamp BigInt,
	@sync_update_peer_key Int,
	@sync_update_peer_timestamp BigInt,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DECLARE @was_tombstone int; SELECT @was_tombstone = [sync_row_is_tombstone] FROM [ChemicalControl01_tracking] WHERE ([ChemicalControlID] = @P_1);IF (@was_tombstone IS NOT NULL AND @was_tombstone = 1 AND @sync_row_is_tombstone = 0) BEGIN UPDATE [ChemicalControl01_tracking] SET [create_scope_local_id] = @sync_scope_local_id, [scope_create_peer_key] = @sync_create_peer_key, [scope_create_peer_timestamp] = @sync_create_peer_timestamp, [local_create_peer_key] = 0, [local_create_peer_timestamp] = @@DBTS+1, [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([ChemicalControlID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp); END ELSE BEGIN UPDATE [ChemicalControl01_tracking] SET [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([ChemicalControlID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp); END;SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_deletemetadata]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MonthlyRecord_deletemetadata]
	@P_1 UniqueIdentifier,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DELETE [side] FROM [MonthlyRecord_tracking] [side] WHERE [RecordID] = @P_1 AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp);SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_insertmetadata]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MonthlyRecord_insertmetadata]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_row_is_tombstone Int,
	@sync_create_peer_key Int,
	@sync_create_peer_timestamp BigInt,
	@sync_update_peer_key Int,
	@sync_update_peer_timestamp BigInt,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; UPDATE [MonthlyRecord_tracking] SET [create_scope_local_id] = @sync_scope_local_id, [scope_create_peer_key] = @sync_create_peer_key, [scope_create_peer_timestamp] = @sync_create_peer_timestamp, [local_create_peer_key] = 0, [local_create_peer_timestamp] = @@DBTS+1, [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([RecordID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp);SET @sync_row_count = @@ROWCOUNT;IF (@sync_row_count = 0) BEGIN INSERT INTO [MonthlyRecord_tracking] ([RecordID], [create_scope_local_id], [scope_create_peer_key], [scope_create_peer_timestamp], [local_create_peer_key], [local_create_peer_timestamp], [update_scope_local_id], [scope_update_peer_key], [scope_update_peer_timestamp], [local_update_peer_key], [restore_timestamp], [sync_row_is_tombstone], [last_change_datetime]) VALUES (@P_1, @sync_scope_local_id, @sync_create_peer_key, @sync_create_peer_timestamp, 0, @@DBTS+1, @sync_scope_local_id, @sync_update_peer_key, @sync_update_peer_timestamp, 0, NULL, @sync_row_is_tombstone, GETDATE());SET @sync_row_count = @@ROWCOUNT; END;
END
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_updatemetadata]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MonthlyRecord_updatemetadata]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_row_is_tombstone Int,
	@sync_create_peer_key Int,
	@sync_create_peer_timestamp BigInt,
	@sync_update_peer_key Int,
	@sync_update_peer_timestamp BigInt,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DECLARE @was_tombstone int; SELECT @was_tombstone = [sync_row_is_tombstone] FROM [MonthlyRecord_tracking] WHERE ([RecordID] = @P_1);IF (@was_tombstone IS NOT NULL AND @was_tombstone = 1 AND @sync_row_is_tombstone = 0) BEGIN UPDATE [MonthlyRecord_tracking] SET [create_scope_local_id] = @sync_scope_local_id, [scope_create_peer_key] = @sync_create_peer_key, [scope_create_peer_timestamp] = @sync_create_peer_timestamp, [local_create_peer_key] = 0, [local_create_peer_timestamp] = @@DBTS+1, [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([RecordID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp); END ELSE BEGIN UPDATE [MonthlyRecord_tracking] SET [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([RecordID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp); END;SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_insertmetadata]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[QuarterlyRecord_insertmetadata]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_row_is_tombstone Int,
	@sync_create_peer_key Int,
	@sync_create_peer_timestamp BigInt,
	@sync_update_peer_key Int,
	@sync_update_peer_timestamp BigInt,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; UPDATE [QuarterlyRecord_tracking] SET [create_scope_local_id] = @sync_scope_local_id, [scope_create_peer_key] = @sync_create_peer_key, [scope_create_peer_timestamp] = @sync_create_peer_timestamp, [local_create_peer_key] = 0, [local_create_peer_timestamp] = @@DBTS+1, [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([RecordID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp);SET @sync_row_count = @@ROWCOUNT;IF (@sync_row_count = 0) BEGIN INSERT INTO [QuarterlyRecord_tracking] ([RecordID], [create_scope_local_id], [scope_create_peer_key], [scope_create_peer_timestamp], [local_create_peer_key], [local_create_peer_timestamp], [update_scope_local_id], [scope_update_peer_key], [scope_update_peer_timestamp], [local_update_peer_key], [restore_timestamp], [sync_row_is_tombstone], [last_change_datetime]) VALUES (@P_1, @sync_scope_local_id, @sync_create_peer_key, @sync_create_peer_timestamp, 0, @@DBTS+1, @sync_scope_local_id, @sync_update_peer_key, @sync_update_peer_timestamp, 0, NULL, @sync_row_is_tombstone, GETDATE());SET @sync_row_count = @@ROWCOUNT; END;
END
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_updatemetadata]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[QuarterlyRecord_updatemetadata]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_row_is_tombstone Int,
	@sync_create_peer_key Int,
	@sync_create_peer_timestamp BigInt,
	@sync_update_peer_key Int,
	@sync_update_peer_timestamp BigInt,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DECLARE @was_tombstone int; SELECT @was_tombstone = [sync_row_is_tombstone] FROM [QuarterlyRecord_tracking] WHERE ([RecordID] = @P_1);IF (@was_tombstone IS NOT NULL AND @was_tombstone = 1 AND @sync_row_is_tombstone = 0) BEGIN UPDATE [QuarterlyRecord_tracking] SET [create_scope_local_id] = @sync_scope_local_id, [scope_create_peer_key] = @sync_create_peer_key, [scope_create_peer_timestamp] = @sync_create_peer_timestamp, [local_create_peer_key] = 0, [local_create_peer_timestamp] = @@DBTS+1, [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([RecordID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp); END ELSE BEGIN UPDATE [QuarterlyRecord_tracking] SET [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([RecordID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp); END;SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_deletemetadata]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[QuarterlyRecord_deletemetadata]
	@P_1 UniqueIdentifier,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DELETE [side] FROM [QuarterlyRecord_tracking] [side] WHERE [RecordID] = @P_1 AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp);SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_deletemetadata]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RecordInfo_deletemetadata]
	@P_1 UniqueIdentifier,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DELETE [side] FROM [RecordInfo_tracking] [side] WHERE [RecordID] = @P_1 AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp);SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_insertmetadata]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RecordInfo_insertmetadata]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_row_is_tombstone Int,
	@sync_create_peer_key Int,
	@sync_create_peer_timestamp BigInt,
	@sync_update_peer_key Int,
	@sync_update_peer_timestamp BigInt,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; UPDATE [RecordInfo_tracking] SET [create_scope_local_id] = @sync_scope_local_id, [scope_create_peer_key] = @sync_create_peer_key, [scope_create_peer_timestamp] = @sync_create_peer_timestamp, [local_create_peer_key] = 0, [local_create_peer_timestamp] = @@DBTS+1, [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([RecordID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp);SET @sync_row_count = @@ROWCOUNT;IF (@sync_row_count = 0) BEGIN INSERT INTO [RecordInfo_tracking] ([RecordID], [create_scope_local_id], [scope_create_peer_key], [scope_create_peer_timestamp], [local_create_peer_key], [local_create_peer_timestamp], [update_scope_local_id], [scope_update_peer_key], [scope_update_peer_timestamp], [local_update_peer_key], [restore_timestamp], [sync_row_is_tombstone], [last_change_datetime]) VALUES (@P_1, @sync_scope_local_id, @sync_create_peer_key, @sync_create_peer_timestamp, 0, @@DBTS+1, @sync_scope_local_id, @sync_update_peer_key, @sync_update_peer_timestamp, 0, NULL, @sync_row_is_tombstone, GETDATE());SET @sync_row_count = @@ROWCOUNT; END;
END
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_updatemetadata]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RecordInfo_updatemetadata]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_row_is_tombstone Int,
	@sync_create_peer_key Int,
	@sync_create_peer_timestamp BigInt,
	@sync_update_peer_key Int,
	@sync_update_peer_timestamp BigInt,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DECLARE @was_tombstone int; SELECT @was_tombstone = [sync_row_is_tombstone] FROM [RecordInfo_tracking] WHERE ([RecordID] = @P_1);IF (@was_tombstone IS NOT NULL AND @was_tombstone = 1 AND @sync_row_is_tombstone = 0) BEGIN UPDATE [RecordInfo_tracking] SET [create_scope_local_id] = @sync_scope_local_id, [scope_create_peer_key] = @sync_create_peer_key, [scope_create_peer_timestamp] = @sync_create_peer_timestamp, [local_create_peer_key] = 0, [local_create_peer_timestamp] = @@DBTS+1, [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([RecordID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp); END ELSE BEGIN UPDATE [RecordInfo_tracking] SET [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([RecordID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp); END;SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[Machines03SP]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Machines03SP]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
@MachineryListID uniqueidentifier,
@MachineryName nvarchar(100)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
BEGIN
	INSERT INTO MachineryList
	VALUES(@MachineryListID,@MachineryName)
END
END
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_deletemetadata]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AnnualRecord_deletemetadata]
	@P_1 UniqueIdentifier,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DELETE [side] FROM [AnnualRecord_tracking] [side] WHERE [RecordID] = @P_1 AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp);SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_insertmetadata]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AnnualRecord_insertmetadata]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_row_is_tombstone Int,
	@sync_create_peer_key Int,
	@sync_create_peer_timestamp BigInt,
	@sync_update_peer_key Int,
	@sync_update_peer_timestamp BigInt,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; UPDATE [AnnualRecord_tracking] SET [create_scope_local_id] = @sync_scope_local_id, [scope_create_peer_key] = @sync_create_peer_key, [scope_create_peer_timestamp] = @sync_create_peer_timestamp, [local_create_peer_key] = 0, [local_create_peer_timestamp] = @@DBTS+1, [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([RecordID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp);SET @sync_row_count = @@ROWCOUNT;IF (@sync_row_count = 0) BEGIN INSERT INTO [AnnualRecord_tracking] ([RecordID], [create_scope_local_id], [scope_create_peer_key], [scope_create_peer_timestamp], [local_create_peer_key], [local_create_peer_timestamp], [update_scope_local_id], [scope_update_peer_key], [scope_update_peer_timestamp], [local_update_peer_key], [restore_timestamp], [sync_row_is_tombstone], [last_change_datetime]) VALUES (@P_1, @sync_scope_local_id, @sync_create_peer_key, @sync_create_peer_timestamp, 0, @@DBTS+1, @sync_scope_local_id, @sync_update_peer_key, @sync_update_peer_timestamp, 0, NULL, @sync_row_is_tombstone, GETDATE());SET @sync_row_count = @@ROWCOUNT; END;
END
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_updatemetadata]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AnnualRecord_updatemetadata]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_row_is_tombstone Int,
	@sync_create_peer_key Int,
	@sync_create_peer_timestamp BigInt,
	@sync_update_peer_key Int,
	@sync_update_peer_timestamp BigInt,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DECLARE @was_tombstone int; SELECT @was_tombstone = [sync_row_is_tombstone] FROM [AnnualRecord_tracking] WHERE ([RecordID] = @P_1);IF (@was_tombstone IS NOT NULL AND @was_tombstone = 1 AND @sync_row_is_tombstone = 0) BEGIN UPDATE [AnnualRecord_tracking] SET [create_scope_local_id] = @sync_scope_local_id, [scope_create_peer_key] = @sync_create_peer_key, [scope_create_peer_timestamp] = @sync_create_peer_timestamp, [local_create_peer_key] = 0, [local_create_peer_timestamp] = @@DBTS+1, [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([RecordID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp); END ELSE BEGIN UPDATE [AnnualRecord_tracking] SET [update_scope_local_id] = @sync_scope_local_id, [scope_update_peer_key] = @sync_update_peer_key, [scope_update_peer_timestamp] = @sync_update_peer_timestamp, [local_update_peer_key] = 0, [restore_timestamp] = NULL, [sync_row_is_tombstone] = @sync_row_is_tombstone WHERE ([RecordID] = @P_1) AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp); END;SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraOthersFilter]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraOthersFilter] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@LookupTypeFilter varchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, Status
FROM         AnnuallyLookupTable
WHERE     (LookupType = N'AinaYaMbeguBora') AND (LookupTypeFilter = @LookupTypeFilter)
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraOthers]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraOthers] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT DISTINCT LookupTypeFilter--), LookupID, LookupSw, LookupEn, LookupType, Status
FROM         AnnuallyLookupTable
WHERE     (LookupType = N'AinaYaMbeguBora') AND (LookupID BETWEEN 1348 AND 1377)
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraNgano]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraNgano]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, Status
FROM         AnnuallyLookupTable
WHERE     (LookupType = N'AinaYaMbeguBora') AND (LookupTypeFilter = N'Wheat')

UNION

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'AinaYaMbeguBora' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraMtama]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraMtama]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, Status
FROM         AnnuallyLookupTable
WHERE     (LookupType = N'AinaYaMbeguBora') AND (LookupTypeFilter = N'Sorghum')

UNION

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'AinaYaMbeguBora' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraMpunga]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraMpunga]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, Status
FROM         AnnuallyLookupTable
WHERE     (LookupType = N'AinaYaMbeguBora') AND (LookupTypeFilter = N'Paddy')

UNION

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'AinaYaMbeguBora' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraMaize]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraMaize]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, Status
FROM         AnnuallyLookupTable
WHERE     (LookupType = N'AinaYaMbeguBora') AND (LookupTypeFilter = N'Maize')

UNION

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'AinaYaMbeguBora' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraMaharage]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraMaharage]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, Status
FROM         AnnuallyLookupTable
WHERE     (LookupType = N'AinaYaMbeguBora') AND (LookupTypeFilter = N'Beans')

UNION

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'AinaYaMbeguBora' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualLookupAinaYaMbeguBoraAlizeti]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualLookupAinaYaMbeguBoraAlizeti] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, Status
FROM         AnnuallyLookupTable
WHERE     (LookupType = N'AinaYaMbeguBora') AND (LookupTypeFilter=N'Sunflower')

UNION

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'AinaYaMbeguBora' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_deletemetadata]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ChemicalControl01_deletemetadata]
	@P_1 UniqueIdentifier,
	@sync_check_concurrency Int,
	@sync_row_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DELETE [side] FROM [ChemicalControl01_tracking] [side] WHERE [ChemicalControlID] = @P_1 AND (@sync_check_concurrency = 0 or [local_update_peer_timestamp] = @sync_row_timestamp);SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupVaccine]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyLookupVaccine] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, LookupStatus
FROM         MonthlyLookupTable
WHERE     (LookupType = N'MedicineAppliedVaccine')

UNION

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'MedicineAppliedDipSpray' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupTypeOfLivestock]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyLookupTypeOfLivestock] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, LookupStatus
FROM         MonthlyLookupTable
WHERE     (LookupType = N'TypeOfLivestock')

UNION

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'TypeOfAnimal' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupTypeOfDisease]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyLookupTypeOfDisease] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@LookupTypeFilter varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, LookupStatus
FROM         MonthlyLookupTable
WHERE     (LookupType = N'TypeOfDisease') AND (LookupTypeFilter LIKE '%' + @LookupTypeFilter + '%')

UNION

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'TypeOfDisease' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupTypeOfAnimal]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyLookupTypeOfAnimal]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
LookupID, 
LookupSw, 
LookupEn, 
LookupType, 
LookupTypeFilter, 
LookupStatus
FROM         
MonthlyLookupTable
WHERE     
(LookupType = N'TypeOfAnimal')

UNION

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'TypeOfAnimal' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupNameOfPestsDisease]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyLookupNameOfPestsDisease]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
LookupID, 
LookupSw, 
LookupEn, 
LookupType, 
LookupTypeFilter, 
LookupStatus,
(LookupTypeFilter + ':' + LookupEn) AS Concatination
FROM        
MonthlyLookupTable
WHERE     
(LookupType = N'NameOfPestsDisease')
ORDER BY 
Concatination
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupLivestockSlaugh]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyLookupLivestockSlaugh] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, LookupStatus
FROM         MonthlyLookupTable
WHERE     (LookupType = N'TypeOfAnimal')

UNION

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'TypeOfAnimal' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupDipSpray]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyLookupDipSpray] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, LookupStatus
FROM         MonthlyLookupTable
WHERE     (LookupType = N'MedicineAppliedDipSpray') 

UNION

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'MedicineAppliedDipSpray' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyLookupCondemnations]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyLookupCondemnations] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@LookupTypeFilter AS varchar(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, LookupStatus
FROM         MonthlyLookupTable
WHERE     (LookupType = N'ReasonsForCondemnations') AND (LookupTypeFilter LIKE '%' + @LookupTypeFilter + '%')

UNION

SELECT 9999 AS LookupID,'Others' AS LookupSw,'Others' AS LookupEn,'ReasonsForCondemnations' AS LookupType,'' AS LookupTypeFilter,'' AS LookupStatus 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupSeverity]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspLookupSeverity] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, LookupStatus
FROM         MonthlyLookupTable
WHERE     (LookupType = N'Severity')
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterLookUpTypeOfErosion]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterLookUpTypeOfErosion] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, LookupStatus
FROM         QuarterlyLookupTable
WHERE     (LookupType = 'TypeOfErosion')

UNION 

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'TypeOfErosion' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterLookupErosionControlSheet]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterLookupErosionControlSheet]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, LookupStatus
FROM         QuarterlyLookupTable
WHERE     (LookupType = N'TypeOfControlMeasures') AND (LookupTypeFilter = N'SheetErosion')
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterLookupErosionControlRill]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterLookupErosionControlRill]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, LookupStatus
FROM         QuarterlyLookupTable
WHERE     (LookupType = N'TypeOfControlMeasures') AND (LookupTypeFilter = N'RillErosion')
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterLookupErosionControlMeasures]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterLookupErosionControlMeasures]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@LookupTypeFilter nvarchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, LookupStatus
FROM         QuarterlyLookupTable
WHERE     (LookupType = N'TypeOfControlMeasures') AND (LookupTypeFilter = @LookupTypeFilter)

UNION 

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'TypeOfControlMeasures' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterLookupErosionControlGully]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterLookupErosionControlGully]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     LookupID, LookupSw, LookupEn, LookupType, LookupTypeFilter, LookupStatus
FROM         QuarterlyLookupTable
WHERE     (LookupType = N'TypeOfControlMeasures') AND (LookupTypeFilter = N'GullyErosion')

UNION 

SELECT 
9999 AS LookupID,
'Others' AS LookupSw,
'Others' AS LookupEn,
'TypeOfControlMeasures' AS LookupType,
'' AS LookupTypeFilter,
'' AS LookupStatus
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyLookupNameOfPestsDisease]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterlyLookupNameOfPestsDisease]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
LookupID, 
LookupSw, 
LookupEn, 
LookupType, 
LookupTypeFilter, 
LookupStatus
FROM        
MonthlyLookupTable
WHERE     
(LookupType = N'NameOfPestsDisease')
ORDER BY 
LookupEn
END
GO
/****** Object:  StoredProcedure [dbo].[appUspLookupCrops]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspLookupCrops] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CropGroupListID, 
GroupID, 
CropName, 
Status
FROM         
CropGroupList
WHERE     (Status = 0)

--UNION

--SELECT     
--9999 AS CropGroupListID, 
--10 AS GroupID, 
--'Others' AS CropName, 
--'' AS Status
----IF CropGroupListID<>9999
----THEN
ORDER BY CropName
--END
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillOxenizing]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillOxenizing] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, Oxenizing05.OxenizingID, Oxenizing05.CentresID, 
                      Oxenizing05.Working, Oxenizing05.NotWorking, Oxenizing05.ReasonsForNotWorking, Oxenizing05.AnnuallyRecordID
FROM         TwoDList INNER JOIN
                      Oxenizing05 ON TwoDList.ListID = Oxenizing05.CentresID
WHERE     (Oxenizing05.AnnuallyRecordID = @AnnuallyRecordID)
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspWardReportSubmissionStatus]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspWardReportSubmissionStatus]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar (50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
tbl_config.config_value, 
tbl_setup_areas.Area_ID, 
tbl_setup_areas.Area_Name,
(select COUNT('*') from RecordInfo 
WHERE RecordInfo.AreaID=tbl_setup_areas.Area_ID 
AND  
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
) AS status
FROM         
tbl_setup_areas CROSS JOIN tbl_config
WHERE 
tbl_setup_areas.Area_ID LIKE  tbl_config.config_value + '___'
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardProdLandVuli]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyWardProdLandVuli] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--declare @myParamYear nvarchar(9)
--declare @myParamQuarter nvarchar(1)

--if @ParamQuarter<3 
--begin
--select @myParamQuarter =@ParamQuarter+2
--select @myParamYear=LEFT(@ParamYear,4)
--end
    
--if @ParamQuarter>2 
--begin
--select @myParamQuarter =@ParamQuarter-2
--select @myParamYear=righT(@ParamYear,4)
--end
    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
ActivityList.ActivityListID, 
ActivityList.SeasonID, 
ActivityList.ActivityDetails, 
SUM(ISNULL(ProdLand02.Tractor,0)) AS Tractor, 
SUM(ISNULL(ProdLand02.Animals,0)) AS Animals, 
SUM(ISNULL(ProdLand02.Hand,0)) AS Hand, 
SUM(ISNULL(ProdLand02.NoFarming,0)) AS NoFarming, 
SUM(ISNULL(ProdLand02.Total,0)) AS Total
FROM         
RecordInfo 
INNER JOIN
ProdLand02 ON RecordInfo.RecordID = ProdLand02.RecordID 
INNER JOIN
ActivityList ON ProdLand02.ActivityID = ActivityList.ActivityListID
WHERE FormSerialNumber like @FormSerialNumber 
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and datepart(YYYY,PeriodFrom )=LEFT (@myParamYear,4)

--and datepart(q,Periodto )=@myParamQuarter
--and datepart(YYYY,Periodto )=LEFT (@myParamYear,4))

--OR

--(datepart(q,PeriodFrom )=@ParamQuarter
--and datepart(YYYY,PeriodFrom )=RIGHT (@ParamYear,4)

--and datepart(q,Periodto )=@ParamQuarter
--and datepart(YYYY,Periodto )=RIGHT (@ParamYear,4))
GROUP BY 
ActivityList.ActivityListID, 
ActivityList.SeasonID, 
ActivityList.ActivityDetails
HAVING (ActivityList.SeasonID = 1)
ORDER BY
ActivityList.ActivityListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardProdLandMasika]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyWardProdLandMasika] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--declare @myParamYear nvarchar(9)
--declare @myParamQuarter nvarchar(1)

--if @ParamQuarter<3 
--begin
--select @myParamQuarter =@ParamQuarter+2
--select @myParamYear=LEFT(@ParamYear,4)
--end
    
--if @ParamQuarter>2 
--begin
--select @myParamQuarter =@ParamQuarter-2
--select @myParamYear=righT(@ParamYear,4)
--end
    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
ActivityList.ActivityListID, 
ActivityList.SeasonID, 
ActivityList.ActivityDetails, 
SUM(ISNULL(ProdLand02.Tractor,0)) AS Tractor, 
SUM(ISNULL(ProdLand02.Animals,0)) AS Animals, 
SUM(ISNULL(ProdLand02.Hand,0)) AS Hand, 
SUM(ISNULL(ProdLand02.NoFarming,0)) AS NoFarming, 
SUM(ISNULL(ProdLand02.Total,0)) AS Total
FROM         
RecordInfo 
INNER JOIN
ProdLand02 ON RecordInfo.RecordID = ProdLand02.RecordID 
INNER JOIN
ActivityList ON ProdLand02.ActivityID = ActivityList.ActivityListID
WHERE FormSerialNumber like @FormSerialNumber 
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and datepart(YYYY,PeriodFrom )=LEFT (@myParamYear,4)

--and datepart(q,Periodto )=@myParamQuarter
--and datepart(YYYY,Periodto )=LEFT (@myParamYear,4))

--OR

--(datepart(q,PeriodFrom )=@ParamQuarter
--and datepart(YYYY,PeriodFrom )=RIGHT (@ParamYear,4)

--and datepart(q,Periodto )=@ParamQuarter
--and datepart(YYYY,Periodto )=RIGHT (@ParamYear,4))
GROUP BY 
ActivityList.ActivityListID, 
ActivityList.SeasonID, 
ActivityList.ActivityDetails
HAVING (ActivityList.SeasonID = 2)
ORDER BY
ActivityList.ActivityListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyRecordInfo]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyRecordInfo]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(255)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
Areas.Name, 
RecordInfo.OfficerName,
CASE 
WHEN 
DATEPART(QQ,RecordInfo.PeriodFrom) <= 2 
THEN 
(DATEPART(QQ,RecordInfo.PeriodFrom) + 2)
ELSE
(DATEPART(QQ,RecordInfo.PeriodFrom) - 2)
END AS Robo,
DATENAME(MM,RecordInfo.PeriodFrom) AS StartMwezi,
DATENAME(MM,RecordInfo.PeriodTo) AS EndMwezi,
CASE 
WHEN 
DATEPART(MM,RecordInfo.PeriodFrom) <= 6 
THEN 
CONVERT(VARCHAR(4),(DATEPART(YY,RecordInfo.PeriodFrom) - 1))
ELSE
CONVERT(VARCHAR(4),DATEPART(YY,RecordInfo.PeriodFrom))
END AS StartMwaka,
CASE 
WHEN 
DATEPART(MM,RecordInfo.PeriodTo) > 6 
THEN 
CONVERT(VARCHAR(4),(DATEPART(YY,RecordInfo.PeriodTo) + 1))
ELSE
CONVERT(VARCHAR(4),DATEPART(YY,RecordInfo.PeriodTo))
END AS EndMwaka,
CONVERT(VARCHAR(10),RecordInfo.SubmissionDate,111) AS SubmissionDate
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID 
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyRecordInfo]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyRecordInfo] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
--DECLARE @Mwezi int
--SELECT @Mwezi = DATEPART(MM,RecordInfo.PeriodFrom) From RecordInfo
--WHERE
--FormSerialNumber=@FormSerialNumber

SELECT     
Areas.Name, 
RecordInfo.OfficerName,
DATENAME(MM,RecordInfo.PeriodFrom) AS Mwezi, 
CASE 
WHEN 
DATEPART(MM,RecordInfo.PeriodFrom) <= 6 
THEN 
CONVERT(VARCHAR(4),(DATEPART(YY,RecordInfo.PeriodFrom) - 1))
ELSE
CONVERT(VARCHAR(4),DATEPART(YY,RecordInfo.PeriodFrom))
END AS StartMwaka,
CASE 
WHEN 
DATEPART(MM,RecordInfo.PeriodTo) > 6 
THEN 
CONVERT(VARCHAR(4),(DATEPART(YY,RecordInfo.PeriodTo) + 1))
ELSE
CONVERT(VARCHAR(4),DATEPART(YY,RecordInfo.PeriodTo))
END AS EndMwaka,
CONVERT(VARCHAR(10),RecordInfo.SubmissionDate,111) AS SubmissionDate
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE 
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualRecordInfo]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualRecordInfo] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT     
Areas.Name, 
RecordInfo.OfficerName, 
CONVERT(VARCHAR(10),RecordInfo.SubmissionDate,103) AS SubmissionDate,
DATENAME(MM,RecordInfo.PeriodFrom) AS Mwezi,  
CONVERT(VARCHAR(10),DATEPART(YY,RecordInfo.PeriodFrom),111) AS StartMwaka, 
CONVERT(VARCHAR(10),DATEPART(YY,RecordInfo.PeriodTo),111) AS EndMwaka
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE 
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspLGAName]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspLGAName]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber varchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
--SELECT     
--tbl_config.config_name, 
--tbl_config.config_value, 
--AreaLevels.AreaLevelNameSwahili,
--AreaLevels.AreaLevelNameEnglish,
--Areas.Name
--FROM         
--AreaLevels 
--INNER JOIN
--Areas ON AreaLevels.AreaLevel = Areas.AreaLevel 
--CROSS JOIN
--tbl_config
--where 
--tbl_config.config_value=Areas.ID

SELECT     
Areas.Name, 
AreaLevels.AreaLevelNameEnglish,
AreaLevels.AreaLevelNameSwahili
FROM
Areas 
INNER JOIN
RecordInfo ON Areas.ID = RecordInfo.AreaID 
INNER JOIN
AreaLevels ON Areas.AreaLevel = AreaLevels.AreaLevel
--WHERE
--RecordInfo.AreaID LIKE @FormSerialNumber

END
GO
/****** Object:  StoredProcedure [dbo].[udp_forms_submitted]    Script Date: 05/06/2013 17:36:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[udp_forms_submitted]
@Language varchar(9)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

SELECT TOP (100) PERCENT 
RecordInfo.RecordID, 
RecordInfo.FormSerialNumber, 
RecordInfo.FormTypeNumber, 
tbl_setup_areas.Area_Name, 
CONVERT(VARCHAR(20),RecordInfo.PeriodFrom,103) AS PeriodFrom,  
CONVERT(VARCHAR(20),RecordInfo.PeriodTo,103) AS PeriodTo,
RecordInfo.AreaID, 
RecordInfo.OrganisationID, 
CASE 
WHEN @Language = 'Swahili' THEN FormNameSwahili 
WHEN @Language = 'English' THEN FormNameEnglish 
END AS FormName, 
CASE 
WHEN @Language = 'Swahili' THEN Area_Level_Name_Swahili 
WHEN @Language = 'English' THEN Area_Level_Name_English 
END AS Area_Level_Name, 
RecordInfo.ApprovedByUserID,
Comments
FROM     
RecordInfo    
INNER JOIN
tbl_setup_areas ON RecordInfo.AreaID = tbl_setup_areas.Area_ID 
INNER JOIN
tbl_setup_area_levels ON tbl_setup_areas.Area_Level = tbl_setup_area_levels.Area_Level 
INNER JOIN
tbl_setup_form_types ON RecordInfo.FormTypeNumber = tbl_setup_form_types.FormTypeNumber
ORDER BY 
RecordInfo.PeriodTo DESC, 
RecordInfo.PeriodFrom,
RecordID DESC
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualOxenizing]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualOxenizing]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
SUM(Oxenizing05.Working) AS Working, 
SUM(Oxenizing05.NotWorking) AS NotWorking
FROM         
TwoDList 
INNER JOIN
Oxenizing05 ON TwoDList.ListID = Oxenizing05.CentresID 
INNER JOIN
RecordInfo ON Oxenizing05.AnnuallyRecordID = RecordInfo.RecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn
ORDER BY TwoDList.ListID

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualProdLand]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualProdLand] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	
SELECT     
SeasonList.SeasonListID, 
SeasonList.SeasonDetails, 
ActivityList.ActivityListID, 
ActivityList.ActivityDetails, 
SUM(ProdLand02.Tractor) AS Tractor, 
SUM(ProdLand02.Animals) AS Animals, 
SUM(ProdLand02.Hand) AS Hand, 
SUM(ProdLand02.NoFarming) AS NoFarming, 
SUM(ProdLand02.Total) AS Total
FROM       
SeasonList 
INNER JOIN
ActivityList ON SeasonList.SeasonListID = ActivityList.SeasonID 
INNER JOIN
ProdLand02 ON ActivityList.ActivityListID = ProdLand02.ActivityID 
INNER JOIN
RecordInfo ON ProdLand02.RecordID = RecordInfo.RecordID
WHERE 
FormSerialNumberIA like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
          
GROUP BY 
SeasonList.SeasonListID,
SeasonList.SeasonDetails,
ActivityList.ActivityListID,
ActivityList.ActivityDetails
ORDER BY 
ActivityList.ActivityListID
END
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_update]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RecordInfo_update]
	@P_1 UniqueIdentifier,
	@P_2 NVarChar(30),
	@P_3 NVarChar(30),
	@P_4 TinyInt,
	@P_5 DateTime,
	@P_6 Int,
	@P_7 DateTime,
	@P_8 DateTime,
	@P_9 Int,
	@P_10 NVarChar(50),
	@P_11 DateTime,
	@P_12 NVarChar(50),
	@P_13 DateTime,
	@P_14 DateTime,
	@P_15 NVarChar(50),
	@P_16 DateTime,
	@P_17 NVarChar(50),
	@P_18 NVarChar(250),
	@P_19 NVarChar(50),
	@P_20 NVarChar(50),
	@P_21 NVarChar(50),
	@sync_force_write Int,
	@sync_min_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; UPDATE [RecordInfo] SET [AreaID] = @P_2, [OfficerName] = @P_3, [Year] = @P_4, [SubmissionDate] = @P_5, [ObjectType] = @P_6, [PeriodFrom] = @P_7, [PeriodTo] = @P_8, [FormTypeNumber] = @P_9, [CompleteByPersonID] = @P_10, [DateCompleted] = @P_11, [ApprovedByPersonID] = @P_12, [DateReceived] = @P_13, [DateCaptured] = @P_14, [CapturedByUserID] = @P_15, [DateVerified] = @P_16, [VerifiedByUserID] = @P_17, [Comments] = @P_18, [FormSerialNumber] = @P_19, [OrganisationID] = @P_20, [FormSerialID] = @P_21 FROM [RecordInfo] [base] JOIN [RecordInfo_tracking] [side] ON [base].[RecordID] = [side].[RecordID] WHERE ([side].[local_update_peer_timestamp] <= @sync_min_timestamp OR @sync_force_write = 1) AND ([base].[RecordID] = @P_1); SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_selectrow]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RecordInfo_selectrow]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_scope_restore_count Int
AS
BEGIN
SELECT [side].[RecordID], [base].[AreaID], [base].[OfficerName], [base].[Year], [base].[SubmissionDate], [base].[ObjectType], [base].[PeriodFrom], [base].[PeriodTo], [base].[FormTypeNumber], [base].[CompleteByPersonID], [base].[DateCompleted], [base].[ApprovedByPersonID], [base].[DateReceived], [base].[DateCaptured], [base].[CapturedByUserID], [base].[DateVerified], [base].[VerifiedByUserID], [base].[Comments], [base].[FormSerialNumber], [base].[OrganisationID], [base].[FormSerialID], [side].[sync_row_is_tombstone], [side].[local_update_peer_timestamp] as sync_row_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then COALESCE([side].[restore_timestamp], [side].[local_update_peer_timestamp]) else [side].[scope_update_peer_timestamp] end as sync_update_peer_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_update_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_update_peer_key] end else [side].[scope_update_peer_key] end as sync_update_peer_key, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then [side].[local_create_peer_timestamp] else [side].[scope_create_peer_timestamp] end as sync_create_peer_timestamp, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_create_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_create_peer_key] end else [side].[scope_create_peer_key] end as sync_create_peer_key from [RecordInfo] [base] right join [RecordInfo_tracking] [side] on [base].[RecordID] = [side].[RecordID] WHERE [side].[RecordID] = @P_1
END
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_selectchanges]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RecordInfo_selectchanges]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@sync_scope_restore_count Int,
	@sync_update_peer_key Int
AS
BEGIN
SELECT [side].[RecordID], [base].[AreaID], [base].[OfficerName], [base].[Year], [base].[SubmissionDate], [base].[ObjectType], [base].[PeriodFrom], [base].[PeriodTo], [base].[FormTypeNumber], [base].[CompleteByPersonID], [base].[DateCompleted], [base].[ApprovedByPersonID], [base].[DateReceived], [base].[DateCaptured], [base].[CapturedByUserID], [base].[DateVerified], [base].[VerifiedByUserID], [base].[Comments], [base].[FormSerialNumber], [base].[OrganisationID], [base].[FormSerialID], [side].[sync_row_is_tombstone], [side].[local_update_peer_timestamp] as sync_row_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then COALESCE([side].[restore_timestamp], [side].[local_update_peer_timestamp]) else [side].[scope_update_peer_timestamp] end as sync_update_peer_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_update_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_update_peer_key] end else [side].[scope_update_peer_key] end as sync_update_peer_key, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then [side].[local_create_peer_timestamp] else [side].[scope_create_peer_timestamp] end as sync_create_peer_timestamp, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_create_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_create_peer_key] end else [side].[scope_create_peer_key] end as sync_create_peer_key FROM [RecordInfo] [base] RIGHT JOIN [RecordInfo_tracking] [side] ON [base].[RecordID] = [side].[RecordID] WHERE (([side].[FormSerialID] LIKE '001AFRTZA001004002%') OR ([side].[sync_row_is_tombstone] = 1 AND ([side].[update_scope_local_id] = @sync_scope_local_id OR [side].[update_scope_local_id] IS NULL) AND [side].[FormSerialID] IS NULL)) AND  ([side].[update_scope_local_id] IS NULL OR [side].[update_scope_local_id] <> @sync_scope_local_id OR ([side].[update_scope_local_id] = @sync_scope_local_id AND [side].[scope_update_peer_key] <> @sync_update_peer_key)) AND [side].[local_update_peer_timestamp] > @sync_min_timestamp
END
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_insert]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RecordInfo_insert]
	@P_1 UniqueIdentifier,
	@P_2 NVarChar(30),
	@P_3 NVarChar(30),
	@P_4 TinyInt,
	@P_5 DateTime,
	@P_6 Int,
	@P_7 DateTime,
	@P_8 DateTime,
	@P_9 Int,
	@P_10 NVarChar(50),
	@P_11 DateTime,
	@P_12 NVarChar(50),
	@P_13 DateTime,
	@P_14 DateTime,
	@P_15 NVarChar(50),
	@P_16 DateTime,
	@P_17 NVarChar(50),
	@P_18 NVarChar(250),
	@P_19 NVarChar(50),
	@P_20 NVarChar(50),
	@P_21 NVarChar(50),
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; IF NOT EXISTS (SELECT * FROM [RecordInfo_tracking] WHERE [RecordID] = @P_1) BEGIN INSERT INTO [RecordInfo]([RecordID], [AreaID], [OfficerName], [Year], [SubmissionDate], [ObjectType], [PeriodFrom], [PeriodTo], [FormTypeNumber], [CompleteByPersonID], [DateCompleted], [ApprovedByPersonID], [DateReceived], [DateCaptured], [CapturedByUserID], [DateVerified], [VerifiedByUserID], [Comments], [FormSerialNumber], [OrganisationID], [FormSerialID]) VALUES (@P_1, @P_2, @P_3, @P_4, @P_5, @P_6, @P_7, @P_8, @P_9, @P_10, @P_11, @P_12, @P_13, @P_14, @P_15, @P_16, @P_17, @P_18, @P_19, @P_20, @P_21);  SET @sync_row_count = @@rowcount;  END 
END
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_delete]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RecordInfo_delete]
	@P_1 UniqueIdentifier,
	@sync_force_write Int,
	@sync_min_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DELETE [RecordInfo] FROM [RecordInfo] [base] JOIN [RecordInfo_tracking] [side] ON [base].[RecordID] = [side].[RecordID] WHERE ([side].[local_update_peer_timestamp] <= @sync_min_timestamp OR @sync_force_write = 1) AND ([base].[RecordID] = @P_1); SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_bulkupdate]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RecordInfo_bulkupdate]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [RecordInfo_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated
declare @changed TABLE ([RecordID] uniqueidentifier, PRIMARY KEY ([RecordID]));

-- update the base table
MERGE [RecordInfo] AS base USING
-- join done here against the side table to get the local timestamp for concurrency check
(SELECT p.*, t.update_scope_local_id, t.scope_update_peer_key, t.local_update_peer_timestamp FROM @changeTable p LEFT JOIN [RecordInfo_tracking] t ON p.[RecordID] = t.[RecordID]) as changes ON changes.[RecordID] = base.[RecordID]
WHEN MATCHED AND (changes.update_scope_local_id = @sync_scope_local_id AND changes.scope_update_peer_key = changes.sync_update_peer_key) OR changes.local_update_peer_timestamp <= @sync_min_timestamp THEN
UPDATE SET [AreaID] = changes.[AreaID], [OfficerName] = changes.[OfficerName], [Year] = changes.[Year], [SubmissionDate] = changes.[SubmissionDate], [ObjectType] = changes.[ObjectType], [PeriodFrom] = changes.[PeriodFrom], [PeriodTo] = changes.[PeriodTo], [FormTypeNumber] = changes.[FormTypeNumber], [CompleteByPersonID] = changes.[CompleteByPersonID], [DateCompleted] = changes.[DateCompleted], [ApprovedByPersonID] = changes.[ApprovedByPersonID], [DateReceived] = changes.[DateReceived], [DateCaptured] = changes.[DateCaptured], [CapturedByUserID] = changes.[CapturedByUserID], [DateVerified] = changes.[DateVerified], [VerifiedByUserID] = changes.[VerifiedByUserID], [Comments] = changes.[Comments], [FormSerialNumber] = changes.[FormSerialNumber], [OrganisationID] = changes.[OrganisationID], [FormSerialID] = changes.[FormSerialID]
OUTPUT INSERTED.[RecordID] into @changed; -- populates the temp table with successful PKs

UPDATE side SET
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0
FROM 
[RecordInfo_tracking] side JOIN 
(SELECT p.[RecordID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[RecordID] = t.[RecordID]) as changes ON changes.[RecordID] = side.[RecordID]
SELECT [RecordID] FROM @changeTable t WHERE NOT EXISTS (SELECT [RecordID] from @changed i WHERE t.[RecordID] = i.[RecordID])
END
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_bulkinsert]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RecordInfo_bulkinsert]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [RecordInfo_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated/inserted
DECLARE @changed TABLE ([RecordID] uniqueidentifier, PRIMARY KEY ([RecordID]));

-- update/insert into the base table
MERGE [RecordInfo] AS base USING
-- join done here against the side table to get the local timestamp for concurrency check
(SELECT p.*, t.local_update_peer_timestamp FROM @changeTable p LEFT JOIN [RecordInfo_tracking] t ON p.[RecordID] = t.[RecordID]) AS changes ON changes.[RecordID] = base.[RecordID]
WHEN NOT MATCHED BY TARGET AND changes.local_update_peer_timestamp <= @sync_min_timestamp OR changes.local_update_peer_timestamp IS NULL THEN
INSERT ([RecordID], [AreaID], [OfficerName], [Year], [SubmissionDate], [ObjectType], [PeriodFrom], [PeriodTo], [FormTypeNumber], [CompleteByPersonID], [DateCompleted], [ApprovedByPersonID], [DateReceived], [DateCaptured], [CapturedByUserID], [DateVerified], [VerifiedByUserID], [Comments], [FormSerialNumber], [OrganisationID], [FormSerialID]) VALUES (changes.[RecordID], changes.[AreaID], changes.[OfficerName], changes.[Year], changes.[SubmissionDate], changes.[ObjectType], changes.[PeriodFrom], changes.[PeriodTo], changes.[FormTypeNumber], changes.[CompleteByPersonID], changes.[DateCompleted], changes.[ApprovedByPersonID], changes.[DateReceived], changes.[DateCaptured], changes.[CapturedByUserID], changes.[DateVerified], changes.[VerifiedByUserID], changes.[Comments], changes.[FormSerialNumber], changes.[OrganisationID], changes.[FormSerialID])
OUTPUT INSERTED.[RecordID] INTO @changed; -- populates the temp table with successful PKs

UPDATE side SET
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0,
create_scope_local_id = @sync_scope_local_id,
scope_create_peer_key = changes.sync_create_peer_key,
scope_create_peer_timestamp = changes.sync_create_peer_timestamp,
local_create_peer_key = 0
FROM 
[RecordInfo_tracking] side JOIN 
(SELECT p.[RecordID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[RecordID] = t.[RecordID]) AS changes ON changes.[RecordID] = side.[RecordID]
SELECT [RecordID] FROM @changeTable t WHERE NOT EXISTS (SELECT [RecordID] from @changed i WHERE t.[RecordID] = i.[RecordID])
END
GO
/****** Object:  StoredProcedure [dbo].[RecordInfo_bulkdelete]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RecordInfo_bulkdelete]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [RecordInfo_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated/inserted
declare @changed TABLE ([RecordID] uniqueidentifier, PRIMARY KEY ([RecordID]));
DELETE [RecordInfo] 
OUTPUT DELETED.[RecordID] INTO @changed FROM [RecordInfo] base JOIN
(SELECT p.*, t.update_scope_local_id, t.scope_update_peer_key, t.local_update_peer_timestamp FROM @changeTable p JOIN [RecordInfo_tracking] t ON p.[RecordID] = t.[RecordID]) as changes ON changes.[RecordID] = base.[RecordID] WHERE (changes.update_scope_local_id = @sync_scope_local_id AND changes.scope_update_peer_key = changes.sync_update_peer_key) OR changes.local_update_peer_timestamp <= @sync_min_timestamp
UPDATE side SET
sync_row_is_tombstone = 1, 
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0
FROM 
[RecordInfo_tracking] side JOIN 
(SELECT p.[RecordID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[RecordID] = t.[RecordID]) AS changes ON changes.[RecordID] = side.[RecordID]
SELECT [RecordID] FROM @changeTable t WHERE NOT EXISTS (SELECT [RecordID] from @changed i WHERE t.[RecordID] = i.[RecordID])
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportRecordInfo]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardQuarterlyReportRecordInfo]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(255)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
Areas.Name, 
RecordInfo.OfficerName,
CASE 
WHEN 
DATEPART(QQ,RecordInfo.PeriodFrom) <= 2 
THEN 
(DATEPART(QQ,RecordInfo.PeriodFrom) + 2)
ELSE
(DATEPART(QQ,RecordInfo.PeriodFrom) - 2)
END AS Robo,
DATENAME(MM,RecordInfo.PeriodFrom) AS StartMwezi,
DATENAME(MM,RecordInfo.PeriodTo) AS EndMwezi,
CASE 
WHEN 
DATEPART(MM,RecordInfo.PeriodFrom) <= 6 
THEN 
CONVERT(VARCHAR(4),(DATEPART(YY,RecordInfo.PeriodFrom) - 1))
ELSE
CONVERT(VARCHAR(4),DATEPART(YY,RecordInfo.PeriodFrom))
END AS StartMwaka,
CASE 
WHEN 
DATEPART(MM,RecordInfo.PeriodTo) > 6 
THEN 
CONVERT(VARCHAR(4),(DATEPART(YY,RecordInfo.PeriodTo) + 1))
ELSE
CONVERT(VARCHAR(4),DATEPART(YY,RecordInfo.PeriodTo))
END AS EndMwaka,
CONVERT(VARCHAR(10),RecordInfo.SubmissionDate,111) AS SubmissionDate
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE 
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportProdLand]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardQuarterlyReportProdLand] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
ActivityList.SeasonID, 
ActivityList.ActivityDetails, 
ProdLand02.Tractor, 
ProdLand02.Animals, 
ProdLand02.Hand,
ProdLand02.NoFarming,
ProdLand02.Total
FROM         
RecordInfo 
INNER JOIN
ProdLand02 ON RecordInfo.RecordID = ProdLand02.RecordID 
INNER JOIN
ActivityList ON ProdLand02.ActivityID = ActivityList.ActivityListID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY
ActivityList.ActivityListID

END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportRecordInfo]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportRecordInfo]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(255)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
Areas.Name, 
RecordInfo.OfficerName, 
CONVERT(VARCHAR(10),RecordInfo.SubmissionDate,111) AS SubmissionDate,
DATENAME(MM,RecordInfo.PeriodFrom) AS Mwezi,  
DATEPART(YY,RecordInfo.PeriodFrom) AS StartMwaka, 
DATEPART(YY,RecordInfo.PeriodTo) AS EndMwaka
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE 
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportRecordInfo]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardMonthlyReportRecordInfo]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(255)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
Areas.Name, 
RecordInfo.OfficerName,
DATENAME(MM,RecordInfo.PeriodFrom) AS Mwezi, 
CASE 
WHEN 
DATEPART(MM,RecordInfo.PeriodFrom) <= 6 
THEN 
CONVERT(VARCHAR(4),(DATEPART(YY,RecordInfo.PeriodFrom) - 1))
ELSE
CONVERT(VARCHAR(4),DATEPART(YY,RecordInfo.PeriodFrom))
END AS StartMwaka,
CASE 
WHEN 
DATEPART(MM,RecordInfo.PeriodTo) > 6 
THEN 
CONVERT(VARCHAR(4),(DATEPART(YY,RecordInfo.PeriodTo) + 1))
ELSE
CONVERT(VARCHAR(4),DATEPART(YY,RecordInfo.PeriodTo))
END AS EndMwaka,
CONVERT(VARCHAR(10),RecordInfo.SubmissionDate,103) AS SubmissionDate
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE 
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
END
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_selectrow]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AnnualRecord_selectrow]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_scope_restore_count Int
AS
BEGIN
SELECT [side].[RecordID], [base].[FormSerialID], [side].[sync_row_is_tombstone], [side].[local_update_peer_timestamp] as sync_row_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then COALESCE([side].[restore_timestamp], [side].[local_update_peer_timestamp]) else [side].[scope_update_peer_timestamp] end as sync_update_peer_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_update_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_update_peer_key] end else [side].[scope_update_peer_key] end as sync_update_peer_key, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then [side].[local_create_peer_timestamp] else [side].[scope_create_peer_timestamp] end as sync_create_peer_timestamp, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_create_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_create_peer_key] end else [side].[scope_create_peer_key] end as sync_create_peer_key from [AnnualRecord] [base] right join [AnnualRecord_tracking] [side] on [base].[RecordID] = [side].[RecordID] WHERE [side].[RecordID] = @P_1
END
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_selectchanges]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AnnualRecord_selectchanges]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@sync_scope_restore_count Int,
	@sync_update_peer_key Int
AS
BEGIN
SELECT [side].[RecordID], [base].[FormSerialID], [side].[sync_row_is_tombstone], [side].[local_update_peer_timestamp] as sync_row_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then COALESCE([side].[restore_timestamp], [side].[local_update_peer_timestamp]) else [side].[scope_update_peer_timestamp] end as sync_update_peer_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_update_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_update_peer_key] end else [side].[scope_update_peer_key] end as sync_update_peer_key, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then [side].[local_create_peer_timestamp] else [side].[scope_create_peer_timestamp] end as sync_create_peer_timestamp, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_create_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_create_peer_key] end else [side].[scope_create_peer_key] end as sync_create_peer_key FROM [AnnualRecord] [base] RIGHT JOIN [AnnualRecord_tracking] [side] ON [base].[RecordID] = [side].[RecordID] WHERE (([side].[FormSerialID] LIKE '001AFRTZA001004002%') OR ([side].[sync_row_is_tombstone] = 1 AND ([side].[update_scope_local_id] = @sync_scope_local_id OR [side].[update_scope_local_id] IS NULL) AND [side].[FormSerialID] IS NULL)) AND  ([side].[update_scope_local_id] IS NULL OR [side].[update_scope_local_id] <> @sync_scope_local_id OR ([side].[update_scope_local_id] = @sync_scope_local_id AND [side].[scope_update_peer_key] <> @sync_update_peer_key)) AND [side].[local_update_peer_timestamp] > @sync_min_timestamp
END
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_insert]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AnnualRecord_insert]
	@P_1 UniqueIdentifier,
	@P_2 NVarChar(50),
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; IF NOT EXISTS (SELECT * FROM [AnnualRecord_tracking] WHERE [RecordID] = @P_1) BEGIN INSERT INTO [AnnualRecord]([RecordID], [FormSerialID]) VALUES (@P_1, @P_2);  SET @sync_row_count = @@rowcount;  END 
END
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_delete]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AnnualRecord_delete]
	@P_1 UniqueIdentifier,
	@sync_force_write Int,
	@sync_min_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DELETE [AnnualRecord] FROM [AnnualRecord] [base] JOIN [AnnualRecord_tracking] [side] ON [base].[RecordID] = [side].[RecordID] WHERE ([side].[local_update_peer_timestamp] <= @sync_min_timestamp OR @sync_force_write = 1) AND ([base].[RecordID] = @P_1); SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_bulkupdate]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AnnualRecord_bulkupdate]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [AnnualRecord_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated
declare @changed TABLE ([RecordID] uniqueidentifier, PRIMARY KEY ([RecordID]));

-- update the base table
MERGE [AnnualRecord] AS base USING
-- join done here against the side table to get the local timestamp for concurrency check
(SELECT p.*, t.update_scope_local_id, t.scope_update_peer_key, t.local_update_peer_timestamp FROM @changeTable p LEFT JOIN [AnnualRecord_tracking] t ON p.[RecordID] = t.[RecordID]) as changes ON changes.[RecordID] = base.[RecordID]
WHEN MATCHED AND (changes.update_scope_local_id = @sync_scope_local_id AND changes.scope_update_peer_key = changes.sync_update_peer_key) OR changes.local_update_peer_timestamp <= @sync_min_timestamp THEN
UPDATE SET [FormSerialID] = changes.[FormSerialID]
OUTPUT INSERTED.[RecordID] into @changed; -- populates the temp table with successful PKs

UPDATE side SET
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0
FROM 
[AnnualRecord_tracking] side JOIN 
(SELECT p.[RecordID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[RecordID] = t.[RecordID]) as changes ON changes.[RecordID] = side.[RecordID]
SELECT [RecordID] FROM @changeTable t WHERE NOT EXISTS (SELECT [RecordID] from @changed i WHERE t.[RecordID] = i.[RecordID])
END
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_bulkinsert]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AnnualRecord_bulkinsert]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [AnnualRecord_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated/inserted
DECLARE @changed TABLE ([RecordID] uniqueidentifier, PRIMARY KEY ([RecordID]));

-- update/insert into the base table
MERGE [AnnualRecord] AS base USING
-- join done here against the side table to get the local timestamp for concurrency check
(SELECT p.*, t.local_update_peer_timestamp FROM @changeTable p LEFT JOIN [AnnualRecord_tracking] t ON p.[RecordID] = t.[RecordID]) AS changes ON changes.[RecordID] = base.[RecordID]
WHEN NOT MATCHED BY TARGET AND changes.local_update_peer_timestamp <= @sync_min_timestamp OR changes.local_update_peer_timestamp IS NULL THEN
INSERT ([RecordID], [FormSerialID]) VALUES (changes.[RecordID], changes.[FormSerialID])
OUTPUT INSERTED.[RecordID] INTO @changed; -- populates the temp table with successful PKs

UPDATE side SET
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0,
create_scope_local_id = @sync_scope_local_id,
scope_create_peer_key = changes.sync_create_peer_key,
scope_create_peer_timestamp = changes.sync_create_peer_timestamp,
local_create_peer_key = 0
FROM 
[AnnualRecord_tracking] side JOIN 
(SELECT p.[RecordID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[RecordID] = t.[RecordID]) AS changes ON changes.[RecordID] = side.[RecordID]
SELECT [RecordID] FROM @changeTable t WHERE NOT EXISTS (SELECT [RecordID] from @changed i WHERE t.[RecordID] = i.[RecordID])
END
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_bulkdelete]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AnnualRecord_bulkdelete]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [AnnualRecord_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated/inserted
declare @changed TABLE ([RecordID] uniqueidentifier, PRIMARY KEY ([RecordID]));
DELETE [AnnualRecord] 
OUTPUT DELETED.[RecordID] INTO @changed FROM [AnnualRecord] base JOIN
(SELECT p.*, t.update_scope_local_id, t.scope_update_peer_key, t.local_update_peer_timestamp FROM @changeTable p JOIN [AnnualRecord_tracking] t ON p.[RecordID] = t.[RecordID]) as changes ON changes.[RecordID] = base.[RecordID] WHERE (changes.update_scope_local_id = @sync_scope_local_id AND changes.scope_update_peer_key = changes.sync_update_peer_key) OR changes.local_update_peer_timestamp <= @sync_min_timestamp
UPDATE side SET
sync_row_is_tombstone = 1, 
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0
FROM 
[AnnualRecord_tracking] side JOIN 
(SELECT p.[RecordID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[RecordID] = t.[RecordID]) AS changes ON changes.[RecordID] = side.[RecordID]
SELECT [RecordID] FROM @changeTable t WHERE NOT EXISTS (SELECT [RecordID] from @changed i WHERE t.[RecordID] = i.[RecordID])
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillPestcideWadudu]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillPestcideWadudu]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     PestcideList.PestcideListID, PestcideList.PestcideName, PestcideList.PestcideStatus, Pestcide03.Pestcide03ID, Pestcide03.PesticideID, 
                      Pestcide03.Pestcide03Name, Pestcide03.Measurement, Pestcide03.UsagePerYear, Pestcide03.Remarks, Pestcide03.AnnualRecordID, 
                      Pestcide03.FormSerialID
FROM         PestcideList INNER JOIN
                      Pestcide03 ON PestcideList.PestcideListID = Pestcide03.PesticideID
WHERE     (PestcideList.PestcideListID=1) AND (Pestcide03.AnnualRecordID = @AnnualRecordID)
ORDER BY PestcideList.PestcideListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillPestcidePanya]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillPestcidePanya]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     PestcideList.PestcideListID, PestcideList.PestcideName, PestcideList.PestcideStatus, Pestcide03.Pestcide03ID, Pestcide03.PesticideID, 
                      Pestcide03.Pestcide03Name, Pestcide03.Measurement, Pestcide03.UsagePerYear, Pestcide03.Remarks, Pestcide03.AnnualRecordID, 
                      Pestcide03.FormSerialID
FROM         PestcideList INNER JOIN
                      Pestcide03 ON PestcideList.PestcideListID = Pestcide03.PesticideID
WHERE     (PestcideList.PestcideListID=4) AND (Pestcide03.AnnualRecordID = @AnnualRecordID)
ORDER BY PestcideList.PestcideListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillPestcideNdege]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillPestcideNdege]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     PestcideList.PestcideListID, PestcideList.PestcideName, PestcideList.PestcideStatus, Pestcide03.Pestcide03ID, Pestcide03.PesticideID, 
                      Pestcide03.Pestcide03Name, Pestcide03.Measurement, Pestcide03.UsagePerYear, Pestcide03.Remarks, Pestcide03.AnnualRecordID, 
                      Pestcide03.FormSerialID
FROM         PestcideList INNER JOIN
                      Pestcide03 ON PestcideList.PestcideListID = Pestcide03.PesticideID
WHERE     (PestcideList.PestcideListID>=5) AND (Pestcide03.AnnualRecordID = @AnnualRecordID)
ORDER BY PestcideList.PestcideListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillPestcideMagugu]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillPestcideMagugu]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     PestcideList.PestcideListID, PestcideList.PestcideName, PestcideList.PestcideStatus, Pestcide03.Pestcide03ID, Pestcide03.PesticideID, 
                      Pestcide03.Pestcide03Name, Pestcide03.Measurement, Pestcide03.UsagePerYear, Pestcide03.Remarks, Pestcide03.AnnualRecordID, 
                      Pestcide03.FormSerialID
FROM         PestcideList INNER JOIN
                      Pestcide03 ON PestcideList.PestcideListID = Pestcide03.PesticideID
WHERE     (PestcideList.PestcideListID=3) AND (Pestcide03.AnnualRecordID = @AnnualRecordID)
ORDER BY PestcideList.PestcideListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillPestcideFangasi]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillPestcideFangasi]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     PestcideList.PestcideListID, PestcideList.PestcideName, PestcideList.PestcideStatus, Pestcide03.Pestcide03ID, Pestcide03.PesticideID, 
                      Pestcide03.Pestcide03Name, Pestcide03.Measurement, Pestcide03.UsagePerYear, Pestcide03.Remarks, Pestcide03.AnnualRecordID, 
                      Pestcide03.FormSerialID
FROM         PestcideList INNER JOIN
                      Pestcide03 ON PestcideList.PestcideListID = Pestcide03.PesticideID
WHERE     (PestcideList.PestcideListID=2) AND (Pestcide03.AnnualRecordID = @AnnualRecordID)
ORDER BY PestcideList.PestcideListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillPestcide]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillPestcide]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     PestcideList.PestcideListID, PestcideList.PestcideName, PestcideList.PestcideStatus, Pestcide03.Pestcide03ID, Pestcide03.PesticideID, 
                      Pestcide03.Pestcide03Name, Pestcide03.Measurement, Pestcide03.UsagePerYear, Pestcide03.Remarks, Pestcide03.AnnualRecordID, 
                      Pestcide03.FormSerialID
FROM         PestcideList INNER JOIN
                      Pestcide03 ON PestcideList.PestcideListID = Pestcide03.PesticideID
WHERE     (Pestcide03.AnnualRecordID = @AnnualRecordID)
ORDER BY PestcideList.PestcideListID
END
GO
/****** Object:  StoredProcedure [dbo].[AnnualRecord_update]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AnnualRecord_update]
	@P_1 UniqueIdentifier,
	@P_2 NVarChar(50),
	@sync_force_write Int,
	@sync_min_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; UPDATE [AnnualRecord] SET [FormSerialID] = @P_2 FROM [AnnualRecord] [base] JOIN [AnnualRecord_tracking] [side] ON [base].[RecordID] = [side].[RecordID] WHERE ([side].[local_update_peer_timestamp] <= @sync_min_timestamp OR @sync_force_write = 1) AND ([base].[RecordID] = @P_1); SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteFertilizer]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualDeleteFertilizer]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@FertilizerID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE Fertilizer03
	WHERE FertilizerID=@FertilizerID AND @FertilizerID>12
	
	DELETE FertilizerList
	WHERE FertilizerListID=@FertilizerID AND FertilizerStatus=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeletePestcide]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualDeletePestcide]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@PestcideID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE Pestcide03
	WHERE PesticideID=@PestcideID AND @PestcideID>5
	
	DELETE PestcideList
	WHERE PestcideListID=@PestcideID AND PestcideStatus=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillFertilizer]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillFertilizer]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     FertilizerList.FertilizerListID, FertilizerList.FertilizerName, FertilizerList.FertilizerStatus, Fertilizer03.Fertilizer03ID, Fertilizer03.FertilizerID, Fertilizer03.AnnualNeeds, 
                      Fertilizer03.AnnualUsage, Fertilizer03.Explanation, Fertilizer03.AnnualRecordID, Fertilizer03.FormSerialID
FROM         FertilizerList INNER JOIN
                      Fertilizer03 ON FertilizerList.FertilizerListID = Fertilizer03.FertilizerID
WHERE     (Fertilizer03.AnnualRecordID = @AnnualRecordID)
ORDER BY FertilizerList.FertilizerListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualInsertAiredPrograms]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualInsertAiredPrograms]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AiredProgramsID uniqueidentifier,
@NameOfStation nvarchar(200),
@NameOfProgram nvarchar(200),
@FrequencyTimeInAWeek int,
@TypeOfInformation nvarchar(200),
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
	IF NOT EXISTS(SELECT * FROM AiredPrograms03 WHERE AiredProgramsID=@AiredProgramsID)
	BEGIN
	INSERT INTO AiredPrograms03
    VALUES(@AiredProgramsID,@NameOfStation,@NameOfProgram,@FrequencyTimeInAWeek,
    @TypeOfInformation,@AnnualRecordID,@FormSerialID)
	END
	
	ELSE
	
	BEGIN
	UPDATE AiredPrograms03
	SET NameOfStation=@NameOfStation,
	NameOfProgram=@NameOfProgram,
	FrequencyTimeInAWeek=@FrequencyTimeInAWeek,
	TypeOfInformation=@TypeOfInformation
	WHERE AiredProgramsID=@AiredProgramsID
	END
	
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetsUpdateMengineyo]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualTargetsUpdateMengineyo]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@CropGroupListID int,
	@GroupID int,
	@CropName nvarchar(50),
	@Status int,
	@TargetImplementationAndCropPricesID uniqueidentifier,
	@ExpectedArea float,
	@ExpectedProd float,
	@Explanation nvarchar(50),
	@MonthlyRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@MonthlyRecordID
	
	
	IF NOT EXISTS(SELECT * FROM TargetImplementationAndCropPrices06 WHERE TargetImplementationAndCropPricesID=@TargetImplementationAndCropPricesID)
	
	BEGIN
	DECLARE @CropID int
	
	BEGIN TRANSACTION
	INSERT INTO CropGroupList
	VALUES(@GroupID,@CropName,@Status)
	
	-- Get back the customer ID
	SELECT @CropID = SCOPE_IDENTITY()
	
	INSERT INTO TargetImplementationAndCropPrices06
	VALUES(@TargetImplementationAndCropPricesID,
	       @CropID,
	       @ExpectedArea,
	       @ExpectedProd,
	       @Explanation,
	       @MonthlyRecordID,
	       @FormSerialID )
	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE CropGroupList
	SET CropName=@CropName
	WHERE CropGroupListID=@CropGroupListID and Status=1
	END
	
	BEGIN
	UPDATE TargetImplementationAndCropPrices06
	SET 
	ExpectedArea=@ExpectedArea,
	ExpectedProd=@ExpectedProd,
	Explanation=@Explanation,
	FormSerialID=@FormSerialID
	WHERE TargetImplementationAndCropPricesID=@TargetImplementationAndCropPricesID
	END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillViwandani]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualTargetFillViwandani]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CropGroupList.CropGroupListID,   
CropGroupList.GroupID, 
CropGroupList.CropName,
CropGroupList.Status,
TargetImplementationAndCropPrices06.TargetImplementationAndCropPricesID,
TargetImplementationAndCropPrices06.CropID,
TargetImplementationAndCropPrices06.ExpectedArea, 
TargetImplementationAndCropPrices06.ExpectedProd, 
TargetImplementationAndCropPrices06.Explanation, 
TargetImplementationAndCropPrices06.AnnualRecordID
FROM         
RecordInfo 
INNER JOIN
TargetImplementationAndCropPrices06 ON RecordInfo.RecordID = TargetImplementationAndCropPrices06.AnnualRecordID 
INNER JOIN
CropGroupList ON TargetImplementationAndCropPrices06.CropID = CropGroupList.CropGroupListID
WHERE     
(TargetImplementationAndCropPrices06.AnnualRecordID = @AnnualRecordID)
AND
(CropGroupList.GroupID=3)
ORDER BY
CropGroupList.CropGroupListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillViungo]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualTargetFillViungo]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CropGroupList.CropGroupListID,   
CropGroupList.GroupID, 
CropGroupList.CropName,
CropGroupList.Status,
TargetImplementationAndCropPrices06.TargetImplementationAndCropPricesID,
TargetImplementationAndCropPrices06.CropID,
TargetImplementationAndCropPrices06.ExpectedArea, 
TargetImplementationAndCropPrices06.ExpectedProd, 
TargetImplementationAndCropPrices06.Explanation, 
TargetImplementationAndCropPrices06.AnnualRecordID
FROM         
RecordInfo 
INNER JOIN
TargetImplementationAndCropPrices06 ON RecordInfo.RecordID = TargetImplementationAndCropPrices06.AnnualRecordID 
INNER JOIN
CropGroupList ON TargetImplementationAndCropPrices06.CropID = CropGroupList.CropGroupListID
WHERE     
(TargetImplementationAndCropPrices06.AnnualRecordID = @AnnualRecordID)
AND
(CropGroupList.GroupID=6)
ORDER BY
CropGroupList.CropGroupListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillMizizi]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualTargetFillMizizi]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CropGroupList.CropGroupListID,   
CropGroupList.GroupID, 
CropGroupList.CropName,
CropGroupList.Status,
TargetImplementationAndCropPrices06.TargetImplementationAndCropPricesID,
TargetImplementationAndCropPrices06.CropID,
TargetImplementationAndCropPrices06.ExpectedArea, 
TargetImplementationAndCropPrices06.ExpectedProd, 
TargetImplementationAndCropPrices06.Explanation, 
TargetImplementationAndCropPrices06.AnnualRecordID
FROM         
RecordInfo 
INNER JOIN
TargetImplementationAndCropPrices06 ON RecordInfo.RecordID = TargetImplementationAndCropPrices06.AnnualRecordID 
INNER JOIN
CropGroupList ON TargetImplementationAndCropPrices06.CropID = CropGroupList.CropGroupListID
WHERE     
(TargetImplementationAndCropPrices06.AnnualRecordID = @AnnualRecordID)
AND
(CropGroupList.GroupID=2)
ORDER BY
CropGroupList.CropGroupListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillMengineyo]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualTargetFillMengineyo]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CropGroupList.CropGroupListID,   
CropGroupList.GroupID, 
CropGroupList.CropName,
CropGroupList.Status,
TargetImplementationAndCropPrices06.TargetImplementationAndCropPricesID,
TargetImplementationAndCropPrices06.CropID,
TargetImplementationAndCropPrices06.ExpectedArea, 
TargetImplementationAndCropPrices06.ExpectedProd, 
TargetImplementationAndCropPrices06.Explanation, 
TargetImplementationAndCropPrices06.AnnualRecordID
FROM         
RecordInfo 
INNER JOIN
TargetImplementationAndCropPrices06 ON RecordInfo.RecordID = TargetImplementationAndCropPrices06.AnnualRecordID 
INNER JOIN
CropGroupList ON TargetImplementationAndCropPrices06.CropID = CropGroupList.CropGroupListID
WHERE     
(TargetImplementationAndCropPrices06.AnnualRecordID = @AnnualRecordID)
AND
(CropGroupList.GroupID=10)
ORDER BY 
CropGroupList.CropGroupListID 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillMbogamboga]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualTargetFillMbogamboga]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CropGroupList.CropGroupListID,   
CropGroupList.GroupID, 
CropGroupList.CropName,
CropGroupList.Status,
TargetImplementationAndCropPrices06.TargetImplementationAndCropPricesID,
TargetImplementationAndCropPrices06.CropID,
TargetImplementationAndCropPrices06.ExpectedArea, 
TargetImplementationAndCropPrices06.ExpectedProd, 
TargetImplementationAndCropPrices06.Explanation, 
TargetImplementationAndCropPrices06.AnnualRecordID
FROM         
RecordInfo 
INNER JOIN
TargetImplementationAndCropPrices06 ON RecordInfo.RecordID = TargetImplementationAndCropPrices06.AnnualRecordID 
INNER JOIN
CropGroupList ON TargetImplementationAndCropPrices06.CropID = CropGroupList.CropGroupListID
WHERE     
(TargetImplementationAndCropPrices06.AnnualRecordID = @AnnualRecordID)
AND
(CropGroupList.GroupID=7)
ORDER BY
CropGroupList.CropGroupListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillMaua]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualTargetFillMaua]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CropGroupList.CropGroupListID,   
CropGroupList.GroupID, 
CropGroupList.CropName,
CropGroupList.Status,
TargetImplementationAndCropPrices06.TargetImplementationAndCropPricesID,
TargetImplementationAndCropPrices06.CropID,
TargetImplementationAndCropPrices06.ExpectedArea, 
TargetImplementationAndCropPrices06.ExpectedProd, 
TargetImplementationAndCropPrices06.Explanation, 
TargetImplementationAndCropPrices06.AnnualRecordID
FROM         
RecordInfo 
INNER JOIN
TargetImplementationAndCropPrices06 ON RecordInfo.RecordID = TargetImplementationAndCropPrices06.AnnualRecordID 
INNER JOIN
CropGroupList ON TargetImplementationAndCropPrices06.CropID = CropGroupList.CropGroupListID
WHERE     
(TargetImplementationAndCropPrices06.AnnualRecordID = @AnnualRecordID)
AND
(CropGroupList.GroupID=9)
ORDER BY
CropGroupList.CropGroupListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillMatunda]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualTargetFillMatunda]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CropGroupList.CropGroupListID,   
CropGroupList.GroupID, 
CropGroupList.CropName,
CropGroupList.Status,
TargetImplementationAndCropPrices06.TargetImplementationAndCropPricesID,
TargetImplementationAndCropPrices06.CropID,
TargetImplementationAndCropPrices06.ExpectedArea, 
TargetImplementationAndCropPrices06.ExpectedProd, 
TargetImplementationAndCropPrices06.Explanation, 
TargetImplementationAndCropPrices06.AnnualRecordID
FROM         
RecordInfo 
INNER JOIN
TargetImplementationAndCropPrices06 ON RecordInfo.RecordID = TargetImplementationAndCropPrices06.AnnualRecordID 
INNER JOIN
CropGroupList ON TargetImplementationAndCropPrices06.CropID = CropGroupList.CropGroupListID
WHERE     
(TargetImplementationAndCropPrices06.AnnualRecordID = @AnnualRecordID)
AND
(CropGroupList.GroupID=8)
ORDER BY
CropGroupList.CropGroupListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillMafuta]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualTargetFillMafuta]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CropGroupList.CropGroupListID,   
CropGroupList.GroupID, 
CropGroupList.CropName,
CropGroupList.Status,
TargetImplementationAndCropPrices06.TargetImplementationAndCropPricesID,
TargetImplementationAndCropPrices06.CropID,
TargetImplementationAndCropPrices06.ExpectedArea, 
TargetImplementationAndCropPrices06.ExpectedProd, 
TargetImplementationAndCropPrices06.Explanation, 
TargetImplementationAndCropPrices06.AnnualRecordID
FROM         
RecordInfo 
INNER JOIN
TargetImplementationAndCropPrices06 ON RecordInfo.RecordID = TargetImplementationAndCropPrices06.AnnualRecordID 
INNER JOIN
CropGroupList ON TargetImplementationAndCropPrices06.CropID = CropGroupList.CropGroupListID
WHERE     
(TargetImplementationAndCropPrices06.AnnualRecordID = @AnnualRecordID)
AND
(CropGroupList.GroupID=4)
ORDER BY
CropGroupList.CropGroupListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillKunde]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualTargetFillKunde]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CropGroupList.CropGroupListID,   
CropGroupList.GroupID, 
CropGroupList.CropName,
CropGroupList.Status,
TargetImplementationAndCropPrices06.TargetImplementationAndCropPricesID,
TargetImplementationAndCropPrices06.CropID,
TargetImplementationAndCropPrices06.ExpectedArea, 
TargetImplementationAndCropPrices06.ExpectedProd, 
TargetImplementationAndCropPrices06.Explanation, 
TargetImplementationAndCropPrices06.AnnualRecordID
FROM         
RecordInfo 
INNER JOIN
TargetImplementationAndCropPrices06 ON RecordInfo.RecordID = TargetImplementationAndCropPrices06.AnnualRecordID 
INNER JOIN
CropGroupList ON TargetImplementationAndCropPrices06.CropID = CropGroupList.CropGroupListID
WHERE     
(TargetImplementationAndCropPrices06.AnnualRecordID = @AnnualRecordID)
AND
(CropGroupList.GroupID=5)
ORDER BY
CropGroupList.CropGroupListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetFillCereal]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualTargetFillCereal]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT
CropGroupList.CropGroupListID,   
CropGroupList.GroupID, 
CropGroupList.CropName,
CropGroupList.Status,
TargetImplementationAndCropPrices06.TargetImplementationAndCropPricesID,
TargetImplementationAndCropPrices06.CropID,
TargetImplementationAndCropPrices06.ExpectedArea, 
TargetImplementationAndCropPrices06.ExpectedProd, 
TargetImplementationAndCropPrices06.Explanation, 
TargetImplementationAndCropPrices06.AnnualRecordID
FROM         
RecordInfo 
INNER JOIN
TargetImplementationAndCropPrices06 ON RecordInfo.RecordID = TargetImplementationAndCropPrices06.AnnualRecordID 
INNER JOIN
CropGroupList ON TargetImplementationAndCropPrices06.CropID = CropGroupList.CropGroupListID
WHERE     
(TargetImplementationAndCropPrices06.AnnualRecordID = @AnnualRecordID)
AND
(CropGroupList.GroupID=1)
ORDER BY
CropGroupList.CropGroupListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetDeleteTargets]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualTargetDeleteTargets]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@CropID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE TargetImplementationAndCropPrices06
	WHERE CropID=@CropID AND @CropID>92
	
	DELETE CropGroupList
	WHERE CropGroupListID=@CropID AND Status=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualTargetDeleteForm]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualTargetDeleteForm]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	DELETE FROM TargetImplementationAndCropPrices06 WHERE AnnualRecordID=@RecordID
	DELETE FROM RecordInfo WHERE RecordID=@RecordID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillLivestockInfrastructure]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillLivestockInfrastructure]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, LivestockInfrastructure05.LivestockInfrastructureID, 
                      LivestockInfrastructure05.InfraID, LivestockInfrastructure05.NumberWorking, LivestockInfrastructure05.NumberNotWorking, 
                      LivestockInfrastructure05.NumberRequired, LivestockInfrastructure05.NumberRegistered, LivestockInfrastructure05.ReasonsForNotWorking, 
                      LivestockInfrastructure05.AnnuallyRecordID
FROM         TwoDList INNER JOIN
                      LivestockInfrastructure05 ON TwoDList.ListID = LivestockInfrastructure05.InfraID
WHERE     (TwoDList.ListItemType = 'LivestockInfrastructure05') AND (LivestockInfrastructure05.AnnuallyRecordID = @AnnuallyRecordID)
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillFoodSituation]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillFoodSituation] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     ThreeDGroup.GroupID, ThreeDGroup.GroupDescription, ThreeDList.ListID, ThreeDList.GroupID AS Expr1, ThreeDList.ListItemSw, ThreeDList.ListItemEn, 
                      ThreeDList.ListItemType, ThreeDList.ListItemStatus, FoodSituation05.FoodSituationID, FoodSituation05.FoodTypeID, FoodSituation05.TotalProduction, 
                      FoodSituation05.Factor, FoodSituation05.CerealEquivalent, FoodSituation05.TotalCerealEquivalent, FoodSituation05.RequirementCerealEquivalent, 
                      FoodSituation05.SurplusDeficit, FoodSituation05.AnnuallyRecordID
FROM         ThreeDGroup INNER JOIN
                      ThreeDList ON ThreeDGroup.GroupID = ThreeDList.GroupID INNER JOIN
                      FoodSituation05 ON ThreeDList.ListID = FoodSituation05.FoodTypeID
WHERE     (FoodSituation05.AnnuallyRecordID = @AnnuallyRecordID) AND (ThreeDList.ListItemType = 'FoodSituation05')
ORDER BY ThreeDList.ListID
	
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedOthers]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedOthers]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
ExtensionOfficersTrained05.ExtensionOfficersTrainedID, 
ExtensionOfficersTrained05.FieldID, 
ExtensionOfficersTrained05.FieldActivity, 
ExtensionOfficersTrained05.NumberOfMaleOfficersTrained, 
ExtensionOfficersTrained05.NumberOfFemaleOfficersTrained, 
ExtensionOfficersTrained05.NumberOfOfficersTrainedLessThanSixMonths, 
ExtensionOfficersTrained05.NumberOfOfficersTrainedMoreThanSixMonths, 
ExtensionOfficersTrained05.TrainingMethods, 
ExtensionOfficersTrained05.TrainingProviders, 
ExtensionOfficersTrained05.Remarks, 
ExtensionOfficersTrained05.AnnuallyRecordID, 
ExtensionOfficersTrained05.FormSerialID
FROM         
RecordInfo 
INNER JOIN
ExtensionOfficersTrained05 ON RecordInfo.RecordID = ExtensionOfficersTrained05.AnnuallyRecordID 
INNER JOIN
FFSGroup ON ExtensionOfficersTrained05.FieldID = FFSGroup.GroupID
WHERE
RecordID=@RecordID AND FFSGroup.GroupID=6
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedMarketing]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedMarketing]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
ExtensionOfficersTrained05.ExtensionOfficersTrainedID, 
ExtensionOfficersTrained05.FieldID, 
ExtensionOfficersTrained05.FieldActivity, 
ExtensionOfficersTrained05.NumberOfMaleOfficersTrained, 
ExtensionOfficersTrained05.NumberOfFemaleOfficersTrained, 
ExtensionOfficersTrained05.NumberOfOfficersTrainedLessThanSixMonths, 
ExtensionOfficersTrained05.NumberOfOfficersTrainedMoreThanSixMonths, 
ExtensionOfficersTrained05.TrainingMethods, 
ExtensionOfficersTrained05.TrainingProviders, 
ExtensionOfficersTrained05.Remarks, 
ExtensionOfficersTrained05.AnnuallyRecordID, 
ExtensionOfficersTrained05.FormSerialID
FROM         
RecordInfo 
INNER JOIN
ExtensionOfficersTrained05 ON RecordInfo.RecordID = ExtensionOfficersTrained05.AnnuallyRecordID 
INNER JOIN
FFSGroup ON ExtensionOfficersTrained05.FieldID = FFSGroup.GroupID
WHERE
RecordID=@RecordID AND FFSGroup.GroupID=4
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedLivestock]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedLivestock]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
ExtensionOfficersTrained05.ExtensionOfficersTrainedID, 
ExtensionOfficersTrained05.FieldID, 
ExtensionOfficersTrained05.FieldActivity, 
ExtensionOfficersTrained05.NumberOfMaleOfficersTrained, 
ExtensionOfficersTrained05.NumberOfFemaleOfficersTrained, 
ExtensionOfficersTrained05.NumberOfOfficersTrainedLessThanSixMonths, 
ExtensionOfficersTrained05.NumberOfOfficersTrainedMoreThanSixMonths, 
ExtensionOfficersTrained05.TrainingMethods, 
ExtensionOfficersTrained05.TrainingProviders, 
ExtensionOfficersTrained05.Remarks, 
ExtensionOfficersTrained05.AnnuallyRecordID, 
ExtensionOfficersTrained05.FormSerialID
FROM         
RecordInfo 
INNER JOIN
ExtensionOfficersTrained05 ON RecordInfo.RecordID = ExtensionOfficersTrained05.AnnuallyRecordID 
INNER JOIN
FFSGroup ON ExtensionOfficersTrained05.FieldID = FFSGroup.GroupID
WHERE
RecordID=@RecordID AND FFSGroup.GroupID=2
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedIrrigation]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedIrrigation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
ExtensionOfficersTrained05.ExtensionOfficersTrainedID, 
ExtensionOfficersTrained05.FieldID, 
ExtensionOfficersTrained05.FieldActivity, 
ExtensionOfficersTrained05.NumberOfMaleOfficersTrained, 
ExtensionOfficersTrained05.NumberOfFemaleOfficersTrained, 
ExtensionOfficersTrained05.NumberOfOfficersTrainedLessThanSixMonths, 
ExtensionOfficersTrained05.NumberOfOfficersTrainedMoreThanSixMonths, 
ExtensionOfficersTrained05.TrainingMethods, 
ExtensionOfficersTrained05.TrainingProviders, 
ExtensionOfficersTrained05.Remarks, 
ExtensionOfficersTrained05.AnnuallyRecordID, 
ExtensionOfficersTrained05.FormSerialID
FROM         
RecordInfo 
INNER JOIN
ExtensionOfficersTrained05 ON RecordInfo.RecordID = ExtensionOfficersTrained05.AnnuallyRecordID 
INNER JOIN
FFSGroup ON ExtensionOfficersTrained05.FieldID = FFSGroup.GroupID
WHERE
RecordID=@RecordID AND FFSGroup.GroupID=5
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedFishery]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedFishery]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
ExtensionOfficersTrained05.ExtensionOfficersTrainedID, 
ExtensionOfficersTrained05.FieldID, 
ExtensionOfficersTrained05.FieldActivity, 
ExtensionOfficersTrained05.NumberOfMaleOfficersTrained, 
ExtensionOfficersTrained05.NumberOfFemaleOfficersTrained, 
ExtensionOfficersTrained05.NumberOfOfficersTrainedLessThanSixMonths, 
ExtensionOfficersTrained05.NumberOfOfficersTrainedMoreThanSixMonths, 
ExtensionOfficersTrained05.TrainingMethods, 
ExtensionOfficersTrained05.TrainingProviders, 
ExtensionOfficersTrained05.Remarks, 
ExtensionOfficersTrained05.AnnuallyRecordID, 
ExtensionOfficersTrained05.FormSerialID
FROM         
RecordInfo 
INNER JOIN
ExtensionOfficersTrained05 ON RecordInfo.RecordID = ExtensionOfficersTrained05.AnnuallyRecordID 
INNER JOIN
FFSGroup ON ExtensionOfficersTrained05.FieldID = FFSGroup.GroupID
WHERE
RecordID=@RecordID AND FFSGroup.GroupID=3
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedCrop]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersTrainedCrop]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
ExtensionOfficersTrained05.ExtensionOfficersTrainedID, 
ExtensionOfficersTrained05.FieldID, 
ExtensionOfficersTrained05.FieldActivity, 
ExtensionOfficersTrained05.NumberOfMaleOfficersTrained, 
ExtensionOfficersTrained05.NumberOfFemaleOfficersTrained, 
ExtensionOfficersTrained05.NumberOfOfficersTrainedLessThanSixMonths, 
ExtensionOfficersTrained05.NumberOfOfficersTrainedMoreThanSixMonths, 
ExtensionOfficersTrained05.TrainingMethods, 
ExtensionOfficersTrained05.TrainingProviders, 
ExtensionOfficersTrained05.Remarks, 
ExtensionOfficersTrained05.AnnuallyRecordID, 
ExtensionOfficersTrained05.FormSerialID
FROM         
RecordInfo 
INNER JOIN
ExtensionOfficersTrained05 ON RecordInfo.RecordID = ExtensionOfficersTrained05.AnnuallyRecordID 
INNER JOIN
FFSGroup ON ExtensionOfficersTrained05.FieldID = FFSGroup.GroupID
WHERE
RecordID=@RecordID AND FFSGroup.GroupID=1
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersOthers]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersOthers] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
ThreeDGroup.GroupID, 
ThreeDGroup.GroupDescription, 
ThreeDList.ListID, 
ThreeDList.GroupID AS Expr1, 
ThreeDList.ListItemSw, 
ThreeDList.ListItemEn, 
ThreeDList.ListItemType, 
ThreeDList.ListItemStatus, 
ExtensionOfficers05.ExtensionServiceID, 
ExtensionOfficers05.SpecilizationID, 
ExtensionOfficers05.NumberOfDistrictMale, 
ExtensionOfficers05.NumberOfDistrictFemale, 
ExtensionOfficers05.NumberOfWardsMale, 
ExtensionOfficers05.NumberOfWardsFemale, 
ExtensionOfficers05.NumberOfVillagesMale, 
ExtensionOfficers05.NumberOfVillagesFemale, 
ExtensionOfficers05.TotalRegisterd, 
ExtensionOfficers05.AnnuallyRecordID
FROM         
ThreeDGroup 
INNER JOIN
ThreeDList ON ThreeDGroup.GroupID = ThreeDList.GroupID 
INNER JOIN
ExtensionOfficers05 ON ThreeDList.ListID = ExtensionOfficers05.SpecilizationID
WHERE     
(ExtensionOfficers05.AnnuallyRecordID = @AnnuallyRecordID) 
AND 
((ThreeDGroup.GroupID = 5) 
OR
(ThreeDGroup.GroupID = 6) 
OR
(ThreeDGroup.GroupID = 7))
ORDER BY ThreeDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersLivestock]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersLivestock] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
ThreeDGroup.GroupID, 
ThreeDGroup.GroupDescription, 
ThreeDList.ListID, 
ThreeDList.GroupID AS Expr1, 
ThreeDList.ListItemSw, 
ThreeDList.ListItemEn, 
ThreeDList.ListItemType, 
ThreeDList.ListItemStatus, 
ExtensionOfficers05.ExtensionServiceID, 
ExtensionOfficers05.SpecilizationID, 
ExtensionOfficers05.NumberOfDistrictMale, 
ExtensionOfficers05.NumberOfDistrictFemale, 
ExtensionOfficers05.NumberOfWardsMale, 
ExtensionOfficers05.NumberOfWardsFemale, 
ExtensionOfficers05.NumberOfVillagesMale, 
ExtensionOfficers05.NumberOfVillagesFemale, 
ExtensionOfficers05.TotalRegisterd, 
ExtensionOfficers05.AnnuallyRecordID
FROM         
ThreeDGroup 
INNER JOIN
ThreeDList ON ThreeDGroup.GroupID = ThreeDList.GroupID 
INNER JOIN
ExtensionOfficers05 ON ThreeDList.ListID = ExtensionOfficers05.SpecilizationID
WHERE     
(ExtensionOfficers05.AnnuallyRecordID = @AnnuallyRecordID) 
AND 
(ThreeDGroup.GroupID = 4)
ORDER BY ThreeDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillExtensionOfficersCrop]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillExtensionOfficersCrop] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
ThreeDGroup.GroupID, 
ThreeDGroup.GroupDescription, 
ThreeDList.ListID, 
ThreeDList.GroupID AS Expr1, 
ThreeDList.ListItemSw, 
ThreeDList.ListItemEn, 
ThreeDList.ListItemType, 
ThreeDList.ListItemStatus, 
ExtensionOfficers05.ExtensionServiceID, 
ExtensionOfficers05.SpecilizationID, 
ExtensionOfficers05.NumberOfDistrictMale, 
ExtensionOfficers05.NumberOfDistrictFemale, 
ExtensionOfficers05.NumberOfWardsMale, 
ExtensionOfficers05.NumberOfWardsFemale,
ExtensionOfficers05.NumberOfVillagesMale, 
ExtensionOfficers05.NumberOfVillagesFemale, 
ExtensionOfficers05.TotalRegisterd, 
ExtensionOfficers05.AnnuallyRecordID
FROM         
ThreeDGroup 
INNER JOIN
ThreeDList ON ThreeDGroup.GroupID = ThreeDList.GroupID 
INNER JOIN
ExtensionOfficers05 ON ThreeDList.ListID = ExtensionOfficers05.SpecilizationID
WHERE    
(ExtensionOfficers05.AnnuallyRecordID = @AnnuallyRecordID) 
AND 
(ThreeDGroup.GroupID = 3)
ORDER BY ThreeDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillEducationLevel]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillEducationLevel]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, EducationLevel05.EducationLevelID, 
                      EducationLevel05.LevelID, EducationLevel05.HQMale, EducationLevel05.HQFemale, EducationLevel05.WardMale, EducationLevel05.WardFemale, 
                      EducationLevel05.VillageMale, EducationLevel05.VillageFemale, EducationLevel05.Total, EducationLevel05.AnnuallyRecordID
FROM         TwoDList INNER JOIN
                      EducationLevel05 ON TwoDList.ListID = EducationLevel05.LevelID
WHERE     (EducationLevel05.AnnuallyRecordID = @AnnuallyRecordID) AND (TwoDList.ListItemType = 'EducationLevel05')
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualDeleteLivestockPopulation]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualDeleteLivestockPopulation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@LivestockPopulationID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	DELETE LivestockPopulation05
	WHERE LivestockPopulationID=@LivestockPopulationID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualDeleteExtensionServiceProvider]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualDeleteExtensionServiceProvider]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@ExtensionServiceProviderID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	DELETE ExtensionServiceProviders05
	WHERE ExtensionServiceProviderID=@ExtensionServiceProviderID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualDeleteExtensionOfficer]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualDeleteExtensionOfficer]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@SpecilizationID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE ExtensionOfficers05
	WHERE SpecilizationID=@SpecilizationID AND @SpecilizationID>20
	
	DELETE ThreeDList
	WHERE ListID=@SpecilizationID AND ListItemStatus=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateLivestockPopulation]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualUpdateLivestockPopulation] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@LivestockPopulationID uniqueidentifier,
	@NameOfFarm nvarchar(50),	
	@TypeOfOwnership nvarchar(50),
	@RegistrationNumber nvarchar(50),
	@NumberOfCattle int,
	@NumberOfSheep int,
	@NumberOfGoats int,
	@NumberOfPigs int,
	@NumberOfLayers int,
	@NumberOfBloilers int,
	@Remarks nvarchar(200),
	@AnnuallyRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnuallyRecordID
	
	IF NOT EXISTS(SELECT * FROM LivestockPopulation05 WHERE LivestockPopulationID=@LivestockPopulationID)
	
	BEGIN
	
	INSERT INTO LivestockPopulation05
	VALUES
	(@LivestockPopulationID,@NameOfFarm,@TypeOfOwnership,@RegistrationNumber,@NumberOfCattle,
	@NumberOfSheep,@NumberOfGoats,@NumberOfPigs,@NumberOfLayers,@NumberOfBloilers,
	@Remarks,@AnnuallyRecordID,@FormSerialID)
	
	END
	
	ELSE
	
	BEGIN
	UPDATE LivestockPopulation05
	SET 
	NameOfFarm=@NameOfFarm,	
	TypeOfOwnership=@TypeOfOwnership,
	RegistrationNumber=@RegistrationNumber,
	NumberOfCattle=@NumberOfCattle,
	NumberOfSheep=@NumberOfSheep,
	NumberOfGoats=@NumberOfGoats,
	NumberOfPigs=@NumberOfPigs,
	NumberOfLayers=@NumberOfLayers,
	NumberOfBloilers=@NumberOfBloilers,
	Remarks=@Remarks,
	FormSerialID=@FormSerialID
	WHERE LivestockPopulationID=@LivestockPopulationID
	END
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateLivestockInfrastructure]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualUpdateLivestockInfrastructure] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@ListID int,
	@GroupID int,
	@ListItemSw nvarchar(50),
	@ListItemEn nvarchar(50),
	@ListItemType nvarchar(50),
	@LookupTypeFilter nvarchar(50),
	@ListItemStatus int,
	@LivestockInfrastructureID uniqueidentifier,
	@NumberWorking int,	
	@NumberNotWorking int,
	@NumberRequired int,
	@NumberRegistered int,
	@ReasonsForNotWorking nvarchar(200),
	@AnnuallyRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnuallyRecordID
	
	IF NOT EXISTS(SELECT * FROM LivestockInfrastructure05 WHERE LivestockInfrastructureID=@LivestockInfrastructureID)
	
	BEGIN
	DECLARE @InfraID int
	
	BEGIN TRANSACTION
	INSERT INTO ThreeDList
	(ListItemSw,ListItemEn,ListItemType,ListItemStatus)
	VALUES
	(@ListItemSw,@ListItemEn,@ListItemType,@ListItemStatus)
	
	-- Get back the customer ID
	SET @InfraID = SCOPE_IDENTITY()
	
	INSERT INTO LivestockInfrastructure05
	VALUES
	(@LivestockInfrastructureID,@InfraID,@NumberWorking,
	@NumberNotWorking,@NumberRequired,@NumberRegistered,
	@ReasonsForNotWorking,@AnnuallyRecordID,@FormSerialID)

	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE TwoDList
	SET 
	ListItemSw=@ListItemSw,
	ListItemEn=@ListItemEn,
	ListItemType=@ListItemType,
	ListItemStatus=@ListItemStatus	
	WHERE ListID=@ListID and ListItemStatus=1
	END
	
	BEGIN
	UPDATE LivestockInfrastructure05
	SET 
	NumberWorking=@NumberWorking,	
	NumberNotWorking=@NumberNotWorking,
	NumberRequired=@NumberRequired,
	NumberRegistered=@NumberRegistered,
	ReasonsForNotWorking=@ReasonsForNotWorking,
	FormSerialID=@FormSerialID
	WHERE LivestockInfrastructureID=@LivestockInfrastructureID
	END
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateExtensionServiceProviders]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualUpdateExtensionServiceProviders] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@ExtensionServiceProviderID uniqueidentifier,
	@NameOfServiceProvider nvarchar(50),	
	@TypeOfServiceProvider nvarchar(50),
	@TypeOfService nvarchar(50),
	@NumberOFVillages int,
	@AnnuallyRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnuallyRecordID
	
	IF NOT EXISTS(SELECT * FROM ExtensionServiceProviders05 WHERE ExtensionServiceProviderID=@ExtensionServiceProviderID)
	
	BEGIN
	
	INSERT INTO ExtensionServiceProviders05
	VALUES
	(
	@ExtensionServiceProviderID,
	@NameOfServiceProvider,
	@TypeOfServiceProvider,
	@TypeOfService,
	@NumberOFVillages,
	@AnnuallyRecordID,
	@FormSerialID
	)
	
	END
	
	ELSE
	
	BEGIN
	UPDATE ExtensionServiceProviders05
	SET 
	NameOfServiceProvider=@NameOfServiceProvider,	
	TypeOfServiceProvider=@TypeOfServiceProvider,
	TypeOfService=@TypeOfService,
	NumberOFVillages=@NumberOFVillages,
	FormSerialID=@FormSerialID
	WHERE ExtensionServiceProviderID=@ExtensionServiceProviderID
	END
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateExtensionOfficersLivestock]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualUpdateExtensionOfficersLivestock] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@ListID int,
	@GroupID int,
	@ListItemSw nvarchar(50),
	@ListItemEn nvarchar(50),
	@ListItemType nvarchar(50),
	@ListItemStatus int,
	@ExtensionServiceID uniqueidentifier,
	@NumberOfDistrictMale int,	
	@NumberOfDistrictFemale int,
	@NumberOfWardsMale int,
	@NumberOfWardsFemale int,
	@NumberOfVillagesMale int,
	@NumberOfVillagesFemale int,
	@TotalRegisterd int,
	@AnnuallyRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnuallyRecordID
	
	IF NOT EXISTS(SELECT * FROM ExtensionOfficers05 WHERE ExtensionServiceID=@ExtensionServiceID)
	
	BEGIN
	DECLARE @SpecilizationID int
	
	BEGIN TRANSACTION
	INSERT INTO ThreeDList
	(GroupID,ListItemSw,ListItemEn,ListItemType,ListItemStatus)
	VALUES
	(@GroupID,@ListItemSw,@ListItemEn,@ListItemType,@ListItemStatus)
	
	-- Get back the customer ID
	SELECT @SpecilizationID = SCOPE_IDENTITY()
	
	INSERT INTO ExtensionOfficers05
	(
	ExtensionServiceID,SpecilizationID,NumberOfDistrictMale,
	NumberOfDistrictFemale,NumberOfWardsMale,NumberOfWardsFemale,
	NumberOfVillagesMale,NumberOfVillagesFemale,TotalRegisterd,
	AnnuallyRecordID,FormSerialID)
	VALUES(@ExtensionServiceID,@SpecilizationID,@NumberOfDistrictMale,
	@NumberOfDistrictFemale,@NumberOfWardsMale,@NumberOfWardsFemale,
	@NumberOfVillagesMale,@NumberOfVillagesFemale,@TotalRegisterd,
	@AnnuallyRecordID,@FormSerialID)

	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE ThreeDList
	SET 
	GroupID=@GroupID,
	ListItemSw=@ListItemSw,
	ListItemEn=@ListItemEn,
	ListItemType=@ListItemType,
	ListItemStatus=@ListItemStatus	
	WHERE ListID=@ListID and ListItemStatus=1
	END
	
	BEGIN
	UPDATE ExtensionOfficers05
	SET 
	NumberOfDistrictMale=@NumberOfDistrictMale,	
	NumberOfDistrictFemale=@NumberOfDistrictFemale,
	NumberOfWardsMale=@NumberOfWardsMale,
	NumberOfWardsFemale=@NumberOfWardsFemale,
	NumberOfVillagesMale=@NumberOfVillagesMale,
	NumberOfVillagesFemale=@NumberOfVillagesFemale,
	TotalRegisterd=@TotalRegisterd,
	FormSerialID=@FormSerialID
	WHERE ExtensionServiceID=@ExtensionServiceID
	END
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateExtensionOfficersCrop]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualUpdateExtensionOfficersCrop] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@ListID int,
	@GroupID int,
	@ListItemSw nvarchar(50),
	@ListItemEn nvarchar(50),
	@ListItemType nvarchar(50),
	@ListItemStatus int,
	@ExtensionServiceID uniqueidentifier,
	@NumberOfDistrictMale int,	
	@NumberOfDistrictFemale int,
	@NumberOfWardsMale int,
	@NumberOfWardsFemale int,
	@NumberOfVillagesMale int,
	@NumberOfVillagesFemale int,
	@TotalRegisterd int,
	@AnnuallyRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnuallyRecordID
	
	IF NOT EXISTS(SELECT * FROM ExtensionOfficers05 WHERE ExtensionServiceID=@ExtensionServiceID)
	
	BEGIN
	DECLARE @SpecilizationID int
	
	BEGIN TRANSACTION
	INSERT INTO ThreeDList
	(GroupID,ListItemSw,ListItemEn,ListItemType,ListItemStatus)
	VALUES
	(@GroupID,@ListItemSw,@ListItemEn,@ListItemType,@ListItemStatus)
	
	-- Get back the customer ID
	SELECT @SpecilizationID = SCOPE_IDENTITY()
	
	INSERT INTO ExtensionOfficers05
	
	(ExtensionServiceID,SpecilizationID,NumberOfDistrictMale,
	NumberOfDistrictFemale,NumberOfWardsMale,NumberOfWardsFemale,
	NumberOfVillagesMale,NumberOfVillagesFemale,TotalRegisterd,
	AnnuallyRecordID,FormSerialID)
	VALUES(@ExtensionServiceID,@SpecilizationID,@NumberOfDistrictMale,
	@NumberOfDistrictFemale,@NumberOfWardsMale,@NumberOfWardsFemale,
	@NumberOfVillagesMale,@NumberOfVillagesFemale,@TotalRegisterd,
	@AnnuallyRecordID,@FormSerialID)

	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE ThreeDList
	SET 
	GroupID=@GroupID,
	ListItemSw=@ListItemSw,
	ListItemEn=@ListItemEn,
	ListItemType=@ListItemType,
	ListItemStatus=@ListItemStatus	
	WHERE ListID=@ListID and ListItemStatus=1
	END
	
	BEGIN
	UPDATE ExtensionOfficers05
	SET 
	NumberOfDistrictMale=@NumberOfDistrictMale,	
	NumberOfDistrictFemale=@NumberOfDistrictFemale,
	NumberOfWardsMale=@NumberOfWardsMale,
	NumberOfWardsFemale=@NumberOfWardsFemale,
	NumberOfVillagesMale=@NumberOfVillagesMale,
	NumberOfVillagesFemale=@NumberOfVillagesFemale,
	TotalRegisterd=@TotalRegisterd,
	FormSerialID=@FormSerialID
	WHERE ExtensionServiceID=@ExtensionServiceID
	END
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateDistrictInfoPageTwo]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualUpdateDistrictInfoPageTwo]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@ModeOfInternetAccess int,
@NumberOfOfficersTrained int,
@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
		declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnuallyRecordID


	UPDATE DistrictInfo05
	SET ModeOfInternetAccess=@ModeOfInternetAccess,
	NumberOfOfficersTrained=@NumberOfOfficersTrained
		,FormSerialID=@FormSerialID
	WHERE AnnuallyRecordID=@AnnuallyRecordID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateDistrictInfoPageOne]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualUpdateDistrictInfoPageOne] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@NumberOfWards int,
@NumberOfVillages int,
@NumberOfHousehold int,
@NumberOfHouseholdAgriculture int,
@DistrictPopulation int,
@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnuallyRecordID

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	UPDATE DistrictInfo05
	SET NumberOfWards=@NumberOfWards,
	NumberOfVillages=@NumberOfVillages,
	NumberOfHousehold=@NumberOfHousehold,
	NumberOfHouseholdAgriculture=@NumberOfHouseholdAgriculture,
	DistrictPopulation=@DistrictPopulation
		,FormSerialID=@FormSerialID
	WHERE AnnuallyRecordID=@AnnuallyRecordID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualUpdateDistrictInfoPageFive]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualUpdateDistrictInfoPageFive]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@NumberOfResourceCentres int,
@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnuallyRecordID

	UPDATE DistrictInfo05
	SET NumberOfResourceCentres=@NumberOfResourceCentres
		,FormSerialID=@FormSerialID
	WHERE AnnuallyRecordID=@AnnuallyRecordID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnuallyDeleteForm]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnuallyDeleteForm]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
delete from DistrictInfo05 where AnnuallyRecordID=@RecordID 
delete from EducationLevel05 where AnnuallyRecordID=@RecordID 
delete from ExtensionOfficers05 where AnnuallyRecordID=@RecordID 
delete from ExtensionOfficersTrained05 where AnnuallyRecordID=@RecordID 
delete from ExtensionServiceProviders05 where AnnuallyRecordID=@RecordID 
delete from FoodSituation05 where AnnuallyRecordID=@RecordID 
delete from LivestockInfrastructure05 where AnnuallyRecordID=@RecordID 
delete from LivestockPopulation05 where AnnuallyRecordID=@RecordID 
delete from Oxenizing05 where AnnuallyRecordID=@RecordID 
delete from PlanningCommitee05 where AnnuallyRecordID=@RecordID 
delete from ProductsProcessing05 where AnnuallyRecordID=@RecordID 
delete from WorkingEquipments05 where AnnuallyRecordID=@RecordID 
delete from WorkingFacilities05 where AnnuallyRecordID=@RecordID 
delete from RecordInfo where RecordID=@RecordID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualInsertDistrictInfo]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualInsertDistrictInfo] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@DistrictInfoID uniqueidentifier,
@NumberOfWards int,
@NumberOfVillages int,
@NumberOfHousehold int,
@NumberOfHouseholdAgriculture int,
@DistrictPopulation int,
@ModeOfInternetAccess int,
@NumberOfOfficersTrained int,
@NumberOfResourceCentres int,
@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnuallyRecordID
	
	IF NOT EXISTS(SELECT * FROM DistrictInfo05 WHERE AnnuallyRecordID=@AnnuallyRecordID)
	BEGIN
	
	INSERT INTO DistrictInfo05
	VALUES(@DistrictInfoID,@NumberOfWards,@NumberOfVillages,
	@NumberOfHousehold,@NumberOfHouseholdAgriculture,
	@DistrictPopulation,@ModeOfInternetAccess,
	@NumberOfOfficersTrained,@NumberOfResourceCentres,
	@AnnuallyRecordID,@FormSerialID)
	
	END
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillWorkingFacilities]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillWorkingFacilities] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, WorkingFacilities05.WorkingFacilitiesID, 
                      WorkingFacilities05.StationID, WorkingFacilities05.NumberOfVehicleRequired, WorkingFacilities05.NumberOfVehicleAvailable, 
                      WorkingFacilities05.NumberOfMotorcycleRequired, WorkingFacilities05.NumberOfMotorcycleAvailable, WorkingFacilities05.NumberOfBicycleRequired, 
                      WorkingFacilities05.NumberOfBicycleAvailable, WorkingFacilities05.NumberOfHousingRequired, WorkingFacilities05.NumberOfHousingAvailable, 
                      WorkingFacilities05.AnnuallyRecordID
FROM         TwoDList INNER JOIN
                      WorkingFacilities05 ON TwoDList.ListID = WorkingFacilities05.StationID
WHERE     (WorkingFacilities05.AnnuallyRecordID = @AnnuallyRecordID) AND (TwoDList.ListItemType = 'WorkingFacilities05')
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillWorkingEquipments]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillWorkingEquipments] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, WorkingEquipments05.WorkingEquipmentsID, 
                      WorkingEquipments05.StationID, WorkingEquipments05.NumberOfExtensionKitRequired, WorkingEquipments05.NumberOfExtensionKitAvailable, 
                      WorkingEquipments05.NumberOfPhotocopierRequired, WorkingEquipments05.NumberOfPhotocopierAvailable, WorkingEquipments05.NumberOfComputerRequired, 
                      WorkingEquipments05.NumberOfComputerAvailable, WorkingEquipments05.NumberOfOtherRequired, WorkingEquipments05.NumberOfOtherAvailable, 
                      WorkingEquipments05.AnnuallyRecordID
FROM         TwoDList INNER JOIN
                      WorkingEquipments05 ON TwoDList.ListID = WorkingEquipments05.StationID
WHERE     (WorkingEquipments05.AnnuallyRecordID = @AnnuallyRecordID) AND (TwoDList.ListItemType = 'WorkingEquipments05')
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingMilk]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingMilk]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, ProductsProcessing05.ProductProcessingID, 
                      ProductsProcessing05.ProcessingID, ProductsProcessing05.NameOfBussiness, ProductsProcessing05.RegistrationNumber, 
                      ProductsProcessing05.MeasurementUnit, ProductsProcessing05.InstalledProduction, ProductsProcessing05.UtilizedProduction, 
                      ProductsProcessing05.AnnuallyRecordID, ProductsProcessing05.TypeOfProduct
FROM         TwoDList INNER JOIN
                      ProductsProcessing05 ON TwoDList.ListID = ProductsProcessing05.ProcessingID
WHERE     (ProductsProcessing05.AnnuallyRecordID = @AnnuallyRecordID) AND (TwoDList.ListItemEn = 'Milk and Milk Product')
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingMeat]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingMeat]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, ProductsProcessing05.ProductProcessingID, 
                      ProductsProcessing05.ProcessingID, ProductsProcessing05.NameOfBussiness, ProductsProcessing05.RegistrationNumber, 
                      ProductsProcessing05.MeasurementUnit, ProductsProcessing05.InstalledProduction, ProductsProcessing05.UtilizedProduction, 
                      ProductsProcessing05.AnnuallyRecordID, ProductsProcessing05.TypeOfProduct
FROM         TwoDList INNER JOIN
                      ProductsProcessing05 ON TwoDList.ListID = ProductsProcessing05.ProcessingID
WHERE     (ProductsProcessing05.AnnuallyRecordID = @AnnuallyRecordID) AND (TwoDList.ListItemEn = 'Meat and Meat Product')
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingHide]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingHide]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, ProductsProcessing05.ProductProcessingID, 
                      ProductsProcessing05.ProcessingID, ProductsProcessing05.NameOfBussiness, ProductsProcessing05.RegistrationNumber, 
                      ProductsProcessing05.MeasurementUnit, ProductsProcessing05.InstalledProduction, ProductsProcessing05.UtilizedProduction, 
                      ProductsProcessing05.AnnuallyRecordID, ProductsProcessing05.TypeOfProduct
FROM         TwoDList INNER JOIN
                      ProductsProcessing05 ON TwoDList.ListID = ProductsProcessing05.ProcessingID
WHERE     (ProductsProcessing05.AnnuallyRecordID = @AnnuallyRecordID) AND (TwoDList.ListItemEn = 'Hide and Skin')
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillProductsProcessingAnimal]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillProductsProcessingAnimal]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, ProductsProcessing05.ProductProcessingID, 
                      ProductsProcessing05.ProcessingID, ProductsProcessing05.NameOfBussiness, ProductsProcessing05.RegistrationNumber, 
                      ProductsProcessing05.MeasurementUnit, ProductsProcessing05.InstalledProduction, ProductsProcessing05.UtilizedProduction, 
                      ProductsProcessing05.AnnuallyRecordID, ProductsProcessing05.TypeOfProduct
FROM         TwoDList INNER JOIN
                      ProductsProcessing05 ON TwoDList.ListID = ProductsProcessing05.ProcessingID
WHERE     (ProductsProcessing05.AnnuallyRecordID = @AnnuallyRecordID) AND (TwoDList.ListItemEn = 'Animal Feed')
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictAnnualFillPlanningCommitee]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictAnnualFillPlanningCommitee] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnuallyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, PlanningCommitee05.PlanningCommiteeID, 
                      PlanningCommitee05.SexID, PlanningCommitee05.Number, PlanningCommitee05.Percentage, PlanningCommitee05.AnnuallyRecordID
FROM         TwoDList INNER JOIN
                      PlanningCommitee05 ON TwoDList.ListID = PlanningCommitee05.SexID
WHERE     (PlanningCommitee05.AnnuallyRecordID = @AnnuallyRecordID) AND (TwoDList.ListItemType = 'PlanningCommitee05')
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterUpdateProductsMovement]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterUpdateProductsMovement]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@ListID int,
	@ListItemSw nvarchar(50),
	@ListItemEn nvarchar(50),
	@ListItemType nvarchar(50),
	@ListItemStatus int,
	@ProductMovementID uniqueidentifier,
	@SoldWithinDistricts float,	
	@SoldOtherDistricts float,
	@SoldOtherCountries float,
	@QuarterlyRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@QuarterlyRecordID
	
	IF NOT EXISTS(SELECT * FROM ProductsMovement04 WHERE ProductMovementID=@ProductMovementID)
	
	BEGIN
	DECLARE @ProductID int
	
	BEGIN TRANSACTION
	INSERT INTO TwoDList
	VALUES(@ListItemSw,@ListItemEn,@ListItemType,@ListItemStatus)
	
	-- Get back the customer ID
	SELECT @ProductID = SCOPE_IDENTITY()
	
	INSERT INTO ProductsMovement04
	VALUES(@ProductMovementID,@ProductID,@SoldWithinDistricts,@SoldOtherDistricts,
	@SoldOtherCountries,@QuarterlyRecordID,@FormSerialID)
	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE TwoDList
	SET 
	ListItemSw=@ListItemSw,
	ListItemEn=@ListItemEn
	WHERE ListID=@ListID and ListItemStatus=1
	END
	
	BEGIN
	UPDATE ProductsMovement04
	SET 
	SoldWithinDistricts=@SoldWithinDistricts,
	SoldOtherDistricts=@SoldOtherDistricts,
	SoldOtherCountries=@SoldOtherCountries
		,FormSerialID=@FormSerialID
	WHERE @QuarterlyRecordID=@QuarterlyRecordID
	END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterUpdateLivestockMovement]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterUpdateLivestockMovement]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@LivestockListID int,
	@LivestockName nvarchar(20),
	@LivestockStatus int,
	@LivestockMovementID uniqueidentifier,
	@AnimalsIntoNonTrade int,	
	@AnimalsIntoTradeFromLGA int,
	@AnimalsIntoTradeFromCountries int,
	@AnimalsToNonTrade int,
	@AnimalsToTradeLGA int,
	@AnimalsToTradeCountries int,
	@AnimalsTransNonTrade int,
	@AnimalsTransTrade int,
	@QuarterlyRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@QuarterlyRecordID
	
	IF NOT EXISTS(SELECT * FROM LivestockMovement04 WHERE LivestockMovementID=@LivestockMovementID)
	
	BEGIN
	DECLARE @LivestockID int
	
	BEGIN TRANSACTION
	INSERT INTO LivestockList(LivestockName,LivestockStatus)
	VALUES(@LivestockName,@LivestockStatus)
	
	-- Get back the customer ID
	SELECT @LivestockID = SCOPE_IDENTITY()
	
	INSERT INTO LivestockMovement04
	VALUES(@LivestockMovementID,@LivestockID,@AnimalsIntoNonTrade,
	@AnimalsIntoTradeFromLGA,@AnimalsIntoTradeFromCountries,
	@AnimalsToNonTrade,@AnimalsToTradeLGA,@AnimalsToTradeCountries,
	@AnimalsTransNonTrade,@AnimalsTransTrade,@QuarterlyRecordID,@FormSerialID)

	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE LivestockList
	SET LivestockName=@LivestockName
		
	WHERE LivestockListID=@LivestockListID and LivestockStatus=1
	END
	
	BEGIN
	UPDATE LivestockMovement04
	SET 
	AnimalsIntoNonTrade=@AnimalsIntoNonTrade,	
	AnimalsIntoTradeFromLGA=@AnimalsIntoTradeFromLGA,
	AnimalsIntoTradeFromCountries=@AnimalsIntoTradeFromCountries,
	AnimalsToNonTrade=@AnimalsToNonTrade,
	AnimalsToTradeLGA=@AnimalsToTradeLGA,
	AnimalsToTradeCountries=@AnimalsToTradeCountries,
	AnimalsTransNonTrade =@AnimalsTransNonTrade,
	AnimalsTransTrade=@AnimalsTransTrade
	,FormSerialID=@FormSerialID
	WHERE LivestockMovementID=@LivestockMovementID
	END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterUpdateAnimalFeeds]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterUpdateAnimalFeeds]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnimalsFeedsID uniqueidentifier,
@GenericName nvarchar(50),
@TradeName nvarchar(50),
@Source nvarchar(50),
@MeasurementUnit nvarchar(10),
@QuarterlyRequirement float,
@QuarterlyAmountUsed float,
@LowPrice float,
@HighPrice float,
@Remarks nvarchar(200),
@QuarterlyRecordID uniqueidentifier

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@QuarterlyRecordID

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
UPDATE       AnimalsFeeds04
SET          GenericName = @GenericName, TradeName = @TradeName, Source = @Source, MeasurementUnit = @MeasurementUnit, 
             QuarterlyRequirement = @QuarterlyRequirement, QuarterlyAmountUsed = @QuarterlyAmountUsed, LowPrice = @LowPrice, HighPrice = @HighPrice, 
             Remarks = @Remarks
             	,FormSerialID=@FormSerialID
WHERE        (AnimalsFeedsID = @AnimalsFeedsID)
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterlyDeleteForm]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterlyDeleteForm]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
delete from AnimalsFeeds04 where QuarterlyRecordID=@RecordID 
delete from LivestockMarketing04 where QuarterlyRecordID=@RecordID 
delete from LivestockMovement04 where QuarterlyRecordID=@RecordID 
delete from ProductsMovement04 where QuarterlyRecordID=@RecordID 
delete from ReproductionInputs04 where QuarterlyRecordID=@RecordID
delete from RecordInfo where RecordID=@RecordID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillVaccines]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterFillVaccines] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@QuarterlyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, AnimalsFeeds04.AnimalsFeedsID, 
                      AnimalsFeeds04.FeedsID, AnimalsFeeds04.GenericName, AnimalsFeeds04.TradeName, AnimalsFeeds04.Source, AnimalsFeeds04.MeasurementUnit, 
                      AnimalsFeeds04.QuarterlyRequirement, AnimalsFeeds04.QuarterlyAmountUsed, AnimalsFeeds04.LowPrice, AnimalsFeeds04.HighPrice, AnimalsFeeds04.Remarks, 
                      AnimalsFeeds04.QuarterlyRecordID
FROM         TwoDList INNER JOIN
                      AnimalsFeeds04 ON TwoDList.ListID = AnimalsFeeds04.FeedsID
WHERE     (AnimalsFeeds04.QuarterlyRecordID = @QuarterlyRecordID) AND (TwoDList.ListID = 3)
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillTreatment(Drugs)]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterFillTreatment(Drugs)] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@QuarterlyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, AnimalsFeeds04.AnimalsFeedsID, 
                      AnimalsFeeds04.FeedsID, AnimalsFeeds04.GenericName, AnimalsFeeds04.TradeName, AnimalsFeeds04.Source, AnimalsFeeds04.MeasurementUnit, 
                      AnimalsFeeds04.QuarterlyRequirement, AnimalsFeeds04.QuarterlyAmountUsed, AnimalsFeeds04.LowPrice, AnimalsFeeds04.HighPrice, AnimalsFeeds04.Remarks, 
                      AnimalsFeeds04.QuarterlyRecordID
FROM         TwoDList INNER JOIN
                      AnimalsFeeds04 ON TwoDList.ListID = AnimalsFeeds04.FeedsID
WHERE     (AnimalsFeeds04.QuarterlyRecordID = @QuarterlyRecordID) AND (TwoDList.ListID = 4)
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillReproductionInput]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterFillReproductionInput]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@QuarterlyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, ReproductionInputs04.ReproductionInputsID, 
                      ReproductionInputs04.InputID, ReproductionInputs04.Breed, ReproductionInputs04.AmountRequired, ReproductionInputs04.AmountAvailable, 
                      ReproductionInputs04.Remarks, ReproductionInputs04.QuarterlyRecordID
FROM         TwoDList INNER JOIN
                      ReproductionInputs04 ON TwoDList.ListID = ReproductionInputs04.InputID
WHERE     (ReproductionInputs04.QuarterlyRecordID = @QuarterlyRecordID) AND (TwoDList.ListItemType = 'ReproductionInputs04')
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillProductsMovement]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterFillProductsMovement] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@QuarterlyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, ProductsMovement04.ProductMovementID, 
                      ProductsMovement04.ProductID, ProductsMovement04.SoldWithinDistricts, ProductsMovement04.SoldOtherDistricts, ProductsMovement04.SoldOtherCountries, 
                      ProductsMovement04.QuarterlyRecordID
FROM         TwoDList INNER JOIN
                      ProductsMovement04 ON TwoDList.ListID = ProductsMovement04.ProductID
WHERE     (ProductsMovement04.QuarterlyRecordID = @QuarterlyRecordID) AND (TwoDList.ListItemType = 'ProductsMovement04')
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillLivestockMovement]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterFillLivestockMovement]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@QuarterlyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     LivestockList.LivestockListID, LivestockList.LivestockName, LivestockList.LivestockNameEnglish, LivestockList.LivestockStatus, 
                      LivestockMovement04.LivestockMovementID, LivestockMovement04.LivestockID, LivestockMovement04.AnimalsIntoNonTrade, 
                      LivestockMovement04.AnimalsIntoTradeFromLGA, LivestockMovement04.AnimalsIntoTradeFromCountries, LivestockMovement04.AnimalsToNonTrade, 
                      LivestockMovement04.AnimalsToTradeLGA, LivestockMovement04.AnimalsToTradeCountries, LivestockMovement04.AnimalsTransNonTrade, 
                      LivestockMovement04.AnimalsTransTrade, LivestockMovement04.QuarterlyRecordID
FROM         LivestockList INNER JOIN
                      LivestockMovement04 ON LivestockList.LivestockListID = LivestockMovement04.LivestockID
WHERE     (LivestockMovement04.QuarterlyRecordID = @QuarterlyRecordID)
ORDER BY LivestockList.LivestockListID 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillLivestockMarketing]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterFillLivestockMarketing]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@QuarterlyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, LivestockMarketing04.LivestockMarketingID, 
                      LivestockMarketing04.LivestockID, LivestockMarketing04.WarmThisQuarter, LivestockMarketing04.ChilledThisQuarter, LivestockMarketing04.FrozenThisQuarter, 
                      LivestockMarketing04.Comments, LivestockMarketing04.QuarterlyRecordID
FROM         TwoDList INNER JOIN
                      LivestockMarketing04 ON TwoDList.ListID = LivestockMarketing04.LivestockID
WHERE     (LivestockMarketing04.QuarterlyRecordID = @QuarterlyRecordID) AND (TwoDList.ListItemType = 'LivestockMarketing04')
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillAnimalFeeds]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterFillAnimalFeeds] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@QuarterlyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, AnimalsFeeds04.AnimalsFeedsID, 
                      AnimalsFeeds04.FeedsID, AnimalsFeeds04.GenericName, AnimalsFeeds04.TradeName, AnimalsFeeds04.Source, AnimalsFeeds04.MeasurementUnit, 
                      AnimalsFeeds04.QuarterlyRequirement, AnimalsFeeds04.QuarterlyAmountUsed, AnimalsFeeds04.LowPrice, AnimalsFeeds04.HighPrice, AnimalsFeeds04.Remarks, 
                      AnimalsFeeds04.QuarterlyRecordID
FROM         TwoDList INNER JOIN
                      AnimalsFeeds04 ON TwoDList.ListID = AnimalsFeeds04.FeedsID
WHERE     (AnimalsFeeds04.QuarterlyRecordID = @QuarterlyRecordID) AND (TwoDList.ListID = 1)
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterFillAcaricides]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterFillAcaricides] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@QuarterlyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn, TwoDList.ListItemType, TwoDList.ListItemStatus, AnimalsFeeds04.AnimalsFeedsID, 
                      AnimalsFeeds04.FeedsID, AnimalsFeeds04.GenericName, AnimalsFeeds04.TradeName, AnimalsFeeds04.Source, AnimalsFeeds04.MeasurementUnit, 
                      AnimalsFeeds04.QuarterlyRequirement, AnimalsFeeds04.QuarterlyAmountUsed, AnimalsFeeds04.LowPrice, AnimalsFeeds04.HighPrice, AnimalsFeeds04.Remarks, 
                      AnimalsFeeds04.QuarterlyRecordID
FROM         TwoDList INNER JOIN
                      AnimalsFeeds04 ON TwoDList.ListID = AnimalsFeeds04.FeedsID
WHERE     (AnimalsFeeds04.QuarterlyRecordID = @QuarterlyRecordID) AND (TwoDList.ListID = 2)
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterDeleteProductsMovement]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterDeleteProductsMovement]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@ProductID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE ProductsMovement04
	WHERE ProductID=@ProductID AND ProductID>5
	
	DELETE TwoDList
	WHERE ListID=@ProductID AND ListItemStatus=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspDistrictQuarterDeleteLivestockMovement]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspDistrictQuarterDeleteLivestockMovement] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@LivestockID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE FROM LivestockMovement04
	WHERE LivestockID=@LivestockID AND LivestockID>6
	
	DELETE FROM LivestockList
	WHERE LivestockListID=@LivestockID AND LivestockStatus=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdatePesticide]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualUpdatePesticide]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@PestcideListID int,
	@PestcideType nvarchar(30),
	@PestcideStatus int,
	@Pestcide03ID uniqueidentifier,
	@Pestcide03Name nvarchar(50),
	@Measurement nvarchar(10),	
	@UsagePerYear float,
	@Remarks nvarchar(50),
	@AnnualRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
	IF NOT EXISTS(SELECT * FROM Pestcide03 WHERE Pestcide03ID=@Pestcide03ID)
	
	BEGIN
	DECLARE @PesticideID int
	
	BEGIN TRANSACTION
	INSERT INTO PestcideList
	VALUES(@PestcideType,@PestcideStatus)
	
	-- Get back the customer ID
	SET @PesticideID = SCOPE_IDENTITY()
	
	INSERT INTO Pestcide03
	VALUES(@Pestcide03ID,@PesticideID,@Pestcide03Name,@Measurement,@UsagePerYear,
	@Remarks,@AnnualRecordID,@FormSerialID)
	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE PestcideList
	SET PestcideName=@PestcideType
	WHERE PestcideListID=@PestcideListID and PestcideStatus=1
	END
	
	BEGIN
	UPDATE Pestcide03
	SET 
	Pestcide03Name=@Pestcide03Name,
	Measurement=@Measurement,
	UsagePerYear=@UsagePerYear,
	Remarks=@Remarks,
	FormSerialID=@FormSerialID
	WHERE Pestcide03ID=@Pestcide03ID
	END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateFertilizer]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualUpdateFertilizer]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@FertilizerListID int,
	@FertilizerName nvarchar(30),
	@FertilizerStatus int,
	@Fertilizer03ID uniqueidentifier,
	@AnnualNeeds float,
	@AnnualUsage float,	
	@Explanation nvarchar(50),
	@AnnualRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
	IF NOT EXISTS(SELECT * FROM Fertilizer03 WHERE Fertilizer03ID=@Fertilizer03ID)
	
	BEGIN
	DECLARE @FertilizerID int
	
	BEGIN TRANSACTION
	INSERT INTO FertilizerList
	VALUES(@FertilizerName,@FertilizerStatus)
	
	-- Get back the customer ID
	SET @FertilizerID = SCOPE_IDENTITY()
	
	INSERT INTO Fertilizer03
	VALUES(@Fertilizer03ID,@FertilizerID,@AnnualNeeds,@AnnualUsage,@Explanation,
	@AnnualRecordID,@FormSerialID)
	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE FertilizerList
	SET FertilizerName=@FertilizerName
	WHERE FertilizerListID=@FertilizerListID and FertilizerStatus=1
	END
	
	BEGIN
	UPDATE Fertilizer03
	SET 
	AnnualNeeds=@AnnualNeeds,
	AnnualUsage=@AnnualUsage,
	Explanation=@Explanation,
	FormSerialID=@FormSerialID
	WHERE Fertilizer03ID=@Fertilizer03ID
	END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyFillFoodCondition]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterlyFillFoodCondition] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT        
FoodConditionID, 
FoodStatustID, 
Remarks, 
FamilyNoFood, 
FamilyLessFood, 
FamilyEnoughFood, 
FamilyExcessFood, 
RecordID, 
FormSerialID
FROM            
FoodCondition02
WHERE        
(RecordID = @RecordID)
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyInsertFoodCondition]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterlyInsertFoodCondition]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@FoodConditionID uniqueidentifier,
	@FoodStatustID int,
	@Remarks varchar(50),
	@FamilyNoFood int,
	@FamilyLessFood int,
	@FamilyEnoughFood int,
	@FamilyExcessFood int,
	@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@RecordID
	
	IF NOT EXISTS(SELECT * FROM FoodCondition02 WHERE RecordID=@RecordID)
BEGIN
	INSERT INTO FoodCondition02
	VALUES(@FoodConditionID,@FoodStatustID,@Remarks,@FamilyNoFood,@FamilyLessFood,@FamilyEnoughFood,@FamilyExcessFood,@RecordID,@FormSerialID)
END

ELSE
BEGIN
    UPDATE FoodCondition02
    SET FoodStatustID=@FoodStatustID,Remarks=@Remarks,FamilyNoFood=@FamilyNoFood,FamilyLessFood=@FamilyLessFood,FamilyEnoughFood=@FamilyEnoughFood,FamilyExcessFood=@FamilyExcessFood
    	,FormSerialID=@FormSerialID
    WHERE RecordID=@RecordID
END
	
END
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_selectrow]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MonthlyRecord_selectrow]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_scope_restore_count Int
AS
BEGIN
SELECT [side].[RecordID], [base].[Month], [base].[FormSerialID], [side].[sync_row_is_tombstone], [side].[local_update_peer_timestamp] as sync_row_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then COALESCE([side].[restore_timestamp], [side].[local_update_peer_timestamp]) else [side].[scope_update_peer_timestamp] end as sync_update_peer_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_update_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_update_peer_key] end else [side].[scope_update_peer_key] end as sync_update_peer_key, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then [side].[local_create_peer_timestamp] else [side].[scope_create_peer_timestamp] end as sync_create_peer_timestamp, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_create_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_create_peer_key] end else [side].[scope_create_peer_key] end as sync_create_peer_key from [MonthlyRecord] [base] right join [MonthlyRecord_tracking] [side] on [base].[RecordID] = [side].[RecordID] WHERE [side].[RecordID] = @P_1
END
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_selectchanges]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MonthlyRecord_selectchanges]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@sync_scope_restore_count Int,
	@sync_update_peer_key Int
AS
BEGIN
SELECT [side].[RecordID], [base].[Month], [base].[FormSerialID], [side].[sync_row_is_tombstone], [side].[local_update_peer_timestamp] as sync_row_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then COALESCE([side].[restore_timestamp], [side].[local_update_peer_timestamp]) else [side].[scope_update_peer_timestamp] end as sync_update_peer_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_update_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_update_peer_key] end else [side].[scope_update_peer_key] end as sync_update_peer_key, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then [side].[local_create_peer_timestamp] else [side].[scope_create_peer_timestamp] end as sync_create_peer_timestamp, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_create_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_create_peer_key] end else [side].[scope_create_peer_key] end as sync_create_peer_key FROM [MonthlyRecord] [base] RIGHT JOIN [MonthlyRecord_tracking] [side] ON [base].[RecordID] = [side].[RecordID] WHERE (([side].[FormSerialID] LIKE '001AFRTZA001004002%') OR ([side].[sync_row_is_tombstone] = 1 AND ([side].[update_scope_local_id] = @sync_scope_local_id OR [side].[update_scope_local_id] IS NULL) AND [side].[FormSerialID] IS NULL)) AND  ([side].[update_scope_local_id] IS NULL OR [side].[update_scope_local_id] <> @sync_scope_local_id OR ([side].[update_scope_local_id] = @sync_scope_local_id AND [side].[scope_update_peer_key] <> @sync_update_peer_key)) AND [side].[local_update_peer_timestamp] > @sync_min_timestamp
END
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_bulkinsert]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MonthlyRecord_bulkinsert]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [MonthlyRecord_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated/inserted
DECLARE @changed TABLE ([RecordID] uniqueidentifier, PRIMARY KEY ([RecordID]));

-- update/insert into the base table
MERGE [MonthlyRecord] AS base USING
-- join done here against the side table to get the local timestamp for concurrency check
(SELECT p.*, t.local_update_peer_timestamp FROM @changeTable p LEFT JOIN [MonthlyRecord_tracking] t ON p.[RecordID] = t.[RecordID]) AS changes ON changes.[RecordID] = base.[RecordID]
WHEN NOT MATCHED BY TARGET AND changes.local_update_peer_timestamp <= @sync_min_timestamp OR changes.local_update_peer_timestamp IS NULL THEN
INSERT ([RecordID], [Month], [FormSerialID]) VALUES (changes.[RecordID], changes.[Month], changes.[FormSerialID])
OUTPUT INSERTED.[RecordID] INTO @changed; -- populates the temp table with successful PKs

UPDATE side SET
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0,
create_scope_local_id = @sync_scope_local_id,
scope_create_peer_key = changes.sync_create_peer_key,
scope_create_peer_timestamp = changes.sync_create_peer_timestamp,
local_create_peer_key = 0
FROM 
[MonthlyRecord_tracking] side JOIN 
(SELECT p.[RecordID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[RecordID] = t.[RecordID]) AS changes ON changes.[RecordID] = side.[RecordID]
SELECT [RecordID] FROM @changeTable t WHERE NOT EXISTS (SELECT [RecordID] from @changed i WHERE t.[RecordID] = i.[RecordID])
END
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_bulkdelete]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MonthlyRecord_bulkdelete]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [MonthlyRecord_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated/inserted
declare @changed TABLE ([RecordID] uniqueidentifier, PRIMARY KEY ([RecordID]));
DELETE [MonthlyRecord] 
OUTPUT DELETED.[RecordID] INTO @changed FROM [MonthlyRecord] base JOIN
(SELECT p.*, t.update_scope_local_id, t.scope_update_peer_key, t.local_update_peer_timestamp FROM @changeTable p JOIN [MonthlyRecord_tracking] t ON p.[RecordID] = t.[RecordID]) as changes ON changes.[RecordID] = base.[RecordID] WHERE (changes.update_scope_local_id = @sync_scope_local_id AND changes.scope_update_peer_key = changes.sync_update_peer_key) OR changes.local_update_peer_timestamp <= @sync_min_timestamp
UPDATE side SET
sync_row_is_tombstone = 1, 
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0
FROM 
[MonthlyRecord_tracking] side JOIN 
(SELECT p.[RecordID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[RecordID] = t.[RecordID]) AS changes ON changes.[RecordID] = side.[RecordID]
SELECT [RecordID] FROM @changeTable t WHERE NOT EXISTS (SELECT [RecordID] from @changed i WHERE t.[RecordID] = i.[RecordID])
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportAiredPrograms]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportAiredPrograms]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
AiredPrograms03.NameOfStation, 
AiredPrograms03.NameOfProgram, 
AiredPrograms03.FrequencyTimeInAWeek
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID 
INNER JOIN
AiredPrograms03 ON RecordInfo.RecordID = AiredPrograms03.AnnualRecordID
WHERE FormSerialNumber LIKE @FormSerialNumber 

END
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_update]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MonthlyRecord_update]
	@P_1 UniqueIdentifier,
	@P_2 TinyInt,
	@P_3 NVarChar(50),
	@sync_force_write Int,
	@sync_min_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; UPDATE [MonthlyRecord] SET [Month] = @P_2, [FormSerialID] = @P_3 FROM [MonthlyRecord] [base] JOIN [MonthlyRecord_tracking] [side] ON [base].[RecordID] = [side].[RecordID] WHERE ([side].[local_update_peer_timestamp] <= @sync_min_timestamp OR @sync_force_write = 1) AND ([base].[RecordID] = @P_1); SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_insert]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MonthlyRecord_insert]
	@P_1 UniqueIdentifier,
	@P_2 TinyInt,
	@P_3 NVarChar(50),
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; IF NOT EXISTS (SELECT * FROM [MonthlyRecord_tracking] WHERE [RecordID] = @P_1) BEGIN INSERT INTO [MonthlyRecord]([RecordID], [Month], [FormSerialID]) VALUES (@P_1, @P_2, @P_3);  SET @sync_row_count = @@rowcount;  END 
END
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_delete]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MonthlyRecord_delete]
	@P_1 UniqueIdentifier,
	@sync_force_write Int,
	@sync_min_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DELETE [MonthlyRecord] FROM [MonthlyRecord] [base] JOIN [MonthlyRecord_tracking] [side] ON [base].[RecordID] = [side].[RecordID] WHERE ([side].[local_update_peer_timestamp] <= @sync_min_timestamp OR @sync_force_write = 1) AND ([base].[RecordID] = @P_1); SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[MonthlyRecord_bulkupdate]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MonthlyRecord_bulkupdate]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [MonthlyRecord_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated
declare @changed TABLE ([RecordID] uniqueidentifier, PRIMARY KEY ([RecordID]));

-- update the base table
MERGE [MonthlyRecord] AS base USING
-- join done here against the side table to get the local timestamp for concurrency check
(SELECT p.*, t.update_scope_local_id, t.scope_update_peer_key, t.local_update_peer_timestamp FROM @changeTable p LEFT JOIN [MonthlyRecord_tracking] t ON p.[RecordID] = t.[RecordID]) as changes ON changes.[RecordID] = base.[RecordID]
WHEN MATCHED AND (changes.update_scope_local_id = @sync_scope_local_id AND changes.scope_update_peer_key = changes.sync_update_peer_key) OR changes.local_update_peer_timestamp <= @sync_min_timestamp THEN
UPDATE SET [Month] = changes.[Month], [FormSerialID] = changes.[FormSerialID]
OUTPUT INSERTED.[RecordID] into @changed; -- populates the temp table with successful PKs

UPDATE side SET
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0
FROM 
[MonthlyRecord_tracking] side JOIN 
(SELECT p.[RecordID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[RecordID] = t.[RecordID]) as changes ON changes.[RecordID] = side.[RecordID]
SELECT [RecordID] FROM @changeTable t WHERE NOT EXISTS (SELECT [RecordID] from @changed i WHERE t.[RecordID] = i.[RecordID])
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportPestcide]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportPestcide]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
PestcideList.PestcideListID, 
PestcideList.PestcideName, 
Pestcide03.Pestcide03Name, 
Pestcide03.Measurement,
Pestcide03.UsagePerYear,
Pestcide03.Remarks
FROM         
RecordInfo 
INNER JOIN
Pestcide03 ON RecordInfo.RecordID = Pestcide03.AnnualRecordID 
INNER JOIN
PestcideList ON Pestcide03.PesticideID = PestcideList.PestcideListID 
WHERE 
--FormSerialNumber LIKE @FormSerialNumber
--AND
(
Pestcide03.Pestcide03Name IS NOT NULL 
OR
Pestcide03.Pestcide03Name !=' ' 
)
ORDER BY PestcideList.PestcideListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportProdMilk]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardMonthlyReportProdMilk]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT      
ProdMilkList.ProdMilkListID,
ProdMilkList.ProdName, 
ProdMilk01.AmountThisMonth
FROM         
RecordInfo INNER JOIN
ProdMilk01 ON RecordInfo.RecordID = ProdMilk01.MonthlyRecordID 
INNER JOIN
ProdMilkList ON ProdMilk01.ProdTypeID = ProdMilkList.ProdMilkListID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY ProdMilkList.ProdMilkListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportFertilizer]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportFertilizer]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FertilizerList.FertilizerListID, 
FertilizerList.FertilizerName, 
Fertilizer03.AnnualNeeds,
Fertilizer03.AnnualUsage,
Fertilizer03.Explanation
FROM         
RecordInfo 
INNER JOIN
Fertilizer03 ON RecordInfo.RecordID = Fertilizer03.AnnualRecordID 
INNER JOIN
FertilizerList ON Fertilizer03.FertilizerID = FertilizerList.FertilizerListID
WHERE FormSerialNumber like @FormSerialNumber 
ORDER BY FertilizerList.FertilizerListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportCoopGroups]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardQuarterlyReportCoopGroups] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT 
CoopGroup.GroupID,
CoopGroup.GroupName, 
CoopGroupList.GroupDetails, 
CoopGroup02.NumberOfGroups, 
CoopGroup02.NumberOfMaleMembers, 
CoopGroup02.NumberOfFemaleMembers, 
CoopGroup02.NumberOfTotalMembers,
CoopGroup02.TotalNumberRegistered, 
CoopGroup02.TotalNumberWithBankAccount
FROM         
RecordInfo 
INNER JOIN
CoopGroup02 ON RecordInfo.RecordID = CoopGroup02.RecordID 
INNER JOIN
CoopGroupList ON CoopGroup02.CoopID = CoopGroupList.CoopGroupListID 
INNER JOIN
CoopGroup ON CoopGroupList.GroupID = CoopGroup.GroupID
WHERE FormSerialNumber LIKE @FormSerialNumber
ORDER BY CoopGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportFoodCondition]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardQuarterlyReportFoodCondition]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FoodStatusList.StatusDescription, 
FoodCondition02.Remarks, 
FoodCondition02.FamilyNoFood, 
FoodCondition02.FamilyLessFood, 
FoodCondition02.FamilyEnoughFood, 
FoodCondition02.FamilyExcessFood
FROM         
RecordInfo INNER JOIN
FoodCondition02 ON RecordInfo.RecordID = FoodCondition02.RecordID 
INNER JOIN
FoodStatusList ON FoodCondition02.FoodStatustID = FoodStatusList.FoodStatusListID
WHERE
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportFFS]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardQuarterlyReportFFS] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool02.FieldActivity, 
FarmersFieldSchool02.NumberOfFarmersTrainedMale,
FarmersFieldSchool02.NumberOfFarmersTrainedFemale, 
FarmersFieldSchool02.NumberOfFarmersTrainedLessThanWeek,  
FarmersFieldSchool02.NumberOfFarmersTrainedMoreThanWeek, 
FarmersFieldSchool02.MethodOfTraining,
FarmersFieldSchool02.NameOfTrainingPersonell, 
FarmersFieldSchool02.Remarks
FROM         
RecordInfo 
INNER JOIN
FarmersFieldSchool02 ON RecordInfo.RecordID = FarmersFieldSchool02.RecordID 
INNER JOIN
FFSGroup ON FarmersFieldSchool02.FieldID = FFSGroup.GroupID
WHERE 
FormSerialNumber LIKE @FormSerialNumber 
AND
FarmersFieldSchool02.FieldActivity IS NOT NULL
ORDER BY 
FFSGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_bulkinsert]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[QuarterlyRecord_bulkinsert]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [QuarterlyRecord_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated/inserted
DECLARE @changed TABLE ([RecordID] uniqueidentifier, PRIMARY KEY ([RecordID]));

-- update/insert into the base table
MERGE [QuarterlyRecord] AS base USING
-- join done here against the side table to get the local timestamp for concurrency check
(SELECT p.*, t.local_update_peer_timestamp FROM @changeTable p LEFT JOIN [QuarterlyRecord_tracking] t ON p.[RecordID] = t.[RecordID]) AS changes ON changes.[RecordID] = base.[RecordID]
WHEN NOT MATCHED BY TARGET AND changes.local_update_peer_timestamp <= @sync_min_timestamp OR changes.local_update_peer_timestamp IS NULL THEN
INSERT ([RecordID], [Quarter], [MonthInterval], [FormSerialID]) VALUES (changes.[RecordID], changes.[Quarter], changes.[MonthInterval], changes.[FormSerialID])
OUTPUT INSERTED.[RecordID] INTO @changed; -- populates the temp table with successful PKs

UPDATE side SET
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0,
create_scope_local_id = @sync_scope_local_id,
scope_create_peer_key = changes.sync_create_peer_key,
scope_create_peer_timestamp = changes.sync_create_peer_timestamp,
local_create_peer_key = 0
FROM 
[QuarterlyRecord_tracking] side JOIN 
(SELECT p.[RecordID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[RecordID] = t.[RecordID]) AS changes ON changes.[RecordID] = side.[RecordID]
SELECT [RecordID] FROM @changeTable t WHERE NOT EXISTS (SELECT [RecordID] from @changed i WHERE t.[RecordID] = i.[RecordID])
END
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_bulkdelete]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[QuarterlyRecord_bulkdelete]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [QuarterlyRecord_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated/inserted
declare @changed TABLE ([RecordID] uniqueidentifier, PRIMARY KEY ([RecordID]));
DELETE [QuarterlyRecord] 
OUTPUT DELETED.[RecordID] INTO @changed FROM [QuarterlyRecord] base JOIN
(SELECT p.*, t.update_scope_local_id, t.scope_update_peer_key, t.local_update_peer_timestamp FROM @changeTable p JOIN [QuarterlyRecord_tracking] t ON p.[RecordID] = t.[RecordID]) as changes ON changes.[RecordID] = base.[RecordID] WHERE (changes.update_scope_local_id = @sync_scope_local_id AND changes.scope_update_peer_key = changes.sync_update_peer_key) OR changes.local_update_peer_timestamp <= @sync_min_timestamp
UPDATE side SET
sync_row_is_tombstone = 1, 
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0
FROM 
[QuarterlyRecord_tracking] side JOIN 
(SELECT p.[RecordID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[RecordID] = t.[RecordID]) AS changes ON changes.[RecordID] = side.[RecordID]
SELECT [RecordID] FROM @changeTable t WHERE NOT EXISTS (SELECT [RecordID] from @changed i WHERE t.[RecordID] = i.[RecordID])
END
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_selectrow]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[QuarterlyRecord_selectrow]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_scope_restore_count Int
AS
BEGIN
SELECT [side].[RecordID], [base].[Quarter], [base].[MonthInterval], [base].[FormSerialID], [side].[sync_row_is_tombstone], [side].[local_update_peer_timestamp] as sync_row_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then COALESCE([side].[restore_timestamp], [side].[local_update_peer_timestamp]) else [side].[scope_update_peer_timestamp] end as sync_update_peer_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_update_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_update_peer_key] end else [side].[scope_update_peer_key] end as sync_update_peer_key, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then [side].[local_create_peer_timestamp] else [side].[scope_create_peer_timestamp] end as sync_create_peer_timestamp, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_create_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_create_peer_key] end else [side].[scope_create_peer_key] end as sync_create_peer_key from [QuarterlyRecord] [base] right join [QuarterlyRecord_tracking] [side] on [base].[RecordID] = [side].[RecordID] WHERE [side].[RecordID] = @P_1
END
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_selectchanges]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[QuarterlyRecord_selectchanges]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@sync_scope_restore_count Int,
	@sync_update_peer_key Int
AS
BEGIN
SELECT [side].[RecordID], [base].[Quarter], [base].[MonthInterval], [base].[FormSerialID], [side].[sync_row_is_tombstone], [side].[local_update_peer_timestamp] as sync_row_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then COALESCE([side].[restore_timestamp], [side].[local_update_peer_timestamp]) else [side].[scope_update_peer_timestamp] end as sync_update_peer_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_update_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_update_peer_key] end else [side].[scope_update_peer_key] end as sync_update_peer_key, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then [side].[local_create_peer_timestamp] else [side].[scope_create_peer_timestamp] end as sync_create_peer_timestamp, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_create_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_create_peer_key] end else [side].[scope_create_peer_key] end as sync_create_peer_key FROM [QuarterlyRecord] [base] RIGHT JOIN [QuarterlyRecord_tracking] [side] ON [base].[RecordID] = [side].[RecordID] WHERE (([side].[FormSerialID] LIKE '001AFRTZA001004002%') OR ([side].[sync_row_is_tombstone] = 1 AND ([side].[update_scope_local_id] = @sync_scope_local_id OR [side].[update_scope_local_id] IS NULL) AND [side].[FormSerialID] IS NULL)) AND  ([side].[update_scope_local_id] IS NULL OR [side].[update_scope_local_id] <> @sync_scope_local_id OR ([side].[update_scope_local_id] = @sync_scope_local_id AND [side].[scope_update_peer_key] <> @sync_update_peer_key)) AND [side].[local_update_peer_timestamp] > @sync_min_timestamp
END
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_update]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[QuarterlyRecord_update]
	@P_1 UniqueIdentifier,
	@P_2 Int,
	@P_3 NVarChar(10),
	@P_4 NVarChar(50),
	@sync_force_write Int,
	@sync_min_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; UPDATE [QuarterlyRecord] SET [Quarter] = @P_2, [MonthInterval] = @P_3, [FormSerialID] = @P_4 FROM [QuarterlyRecord] [base] JOIN [QuarterlyRecord_tracking] [side] ON [base].[RecordID] = [side].[RecordID] WHERE ([side].[local_update_peer_timestamp] <= @sync_min_timestamp OR @sync_force_write = 1) AND ([base].[RecordID] = @P_1); SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_insert]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[QuarterlyRecord_insert]
	@P_1 UniqueIdentifier,
	@P_2 Int,
	@P_3 NVarChar(10),
	@P_4 NVarChar(50),
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; IF NOT EXISTS (SELECT * FROM [QuarterlyRecord_tracking] WHERE [RecordID] = @P_1) BEGIN INSERT INTO [QuarterlyRecord]([RecordID], [Quarter], [MonthInterval], [FormSerialID]) VALUES (@P_1, @P_2, @P_3, @P_4);  SET @sync_row_count = @@rowcount;  END 
END
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_delete]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[QuarterlyRecord_delete]
	@P_1 UniqueIdentifier,
	@sync_force_write Int,
	@sync_min_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DELETE [QuarterlyRecord] FROM [QuarterlyRecord] [base] JOIN [QuarterlyRecord_tracking] [side] ON [base].[RecordID] = [side].[RecordID] WHERE ([side].[local_update_peer_timestamp] <= @sync_min_timestamp OR @sync_force_write = 1) AND ([base].[RecordID] = @P_1); SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[QuarterlyRecord_bulkupdate]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[QuarterlyRecord_bulkupdate]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [QuarterlyRecord_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated
declare @changed TABLE ([RecordID] uniqueidentifier, PRIMARY KEY ([RecordID]));

-- update the base table
MERGE [QuarterlyRecord] AS base USING
-- join done here against the side table to get the local timestamp for concurrency check
(SELECT p.*, t.update_scope_local_id, t.scope_update_peer_key, t.local_update_peer_timestamp FROM @changeTable p LEFT JOIN [QuarterlyRecord_tracking] t ON p.[RecordID] = t.[RecordID]) as changes ON changes.[RecordID] = base.[RecordID]
WHEN MATCHED AND (changes.update_scope_local_id = @sync_scope_local_id AND changes.scope_update_peer_key = changes.sync_update_peer_key) OR changes.local_update_peer_timestamp <= @sync_min_timestamp THEN
UPDATE SET [Quarter] = changes.[Quarter], [MonthInterval] = changes.[MonthInterval], [FormSerialID] = changes.[FormSerialID]
OUTPUT INSERTED.[RecordID] into @changed; -- populates the temp table with successful PKs

UPDATE side SET
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0
FROM 
[QuarterlyRecord_tracking] side JOIN 
(SELECT p.[RecordID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[RecordID] = t.[RecordID]) as changes ON changes.[RecordID] = side.[RecordID]
SELECT [RecordID] FROM @changeTable t WHERE NOT EXISTS (SELECT [RecordID] from @changed i WHERE t.[RecordID] = i.[RecordID])
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualAiredPrograms]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualAiredPrograms]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
    @FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
AiredPrograms03.NameOfStation, 
AiredPrograms03.NameOfProgram, 
AiredPrograms03.FrequencyTimeInAWeek, 
AiredPrograms03.TypeOfInformation
FROM         
AiredPrograms03 
INNER JOIN
RecordInfo ON AiredPrograms03.AnnualRecordID = RecordInfo.RecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteAiredPrograms]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualDeleteAiredPrograms]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AiredProgramsID uniqueidentifier

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	DELETE AiredPrograms03
	WHERE AiredProgramsID=@AiredProgramsID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualFertilizer]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualFertilizer]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
FertilizerList.FertilizerListID, 
FertilizerList.FertilizerName, 
SUM(Fertilizer03.AnnualNeeds) AS AnnualNeeds, 
SUM(Fertilizer03.AnnualUsage) AS AnnualUsage
FROM      
FertilizerList 
INNER JOIN
Fertilizer03 ON FertilizerList.FertilizerListID = Fertilizer03.FertilizerID 
INNER JOIN
RecordInfo ON Fertilizer03.AnnualRecordID = RecordInfo.RecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'

GROUP BY FertilizerList.FertilizerListID,FertilizerList.FertilizerName
ORDER BY FertilizerList.FertilizerListID                     
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualExtensionServiceProviders]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualExtensionServiceProviders]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT 
ExtensionServiceProviders05.ExtensionServiceProviderID,
ExtensionServiceProviders05.NameOfServiceProvider, 
ExtensionServiceProviders05.TypeOfServiceProvider,
ExtensionServiceProviders05.TypeOfService,
SUM(ExtensionServiceProviders05.NumberOFVillages) AS NumberOFVillages
FROM         
ExtensionServiceProviders05 
INNER JOIN
RecordInfo ON ExtensionServiceProviders05.AnnuallyRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY 
ExtensionServiceProviders05.ExtensionServiceProviderID, 
ExtensionServiceProviders05.NameOfServiceProvider, 
ExtensionServiceProviders05.TypeOfServiceProvider, 
ExtensionServiceProviders05.TypeOfService
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualExtensionOfficersTrained]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualExtensionOfficersTrained]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@FormSerialNumber varchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
ExtensionOfficersTrained05.FieldActivity, 
SUM(ExtensionOfficersTrained05.NumberOfMaleOfficersTrained) AS NumberOfMaleOfficersTrained, 
SUM(ExtensionOfficersTrained05.NumberOfFemaleOfficersTrained) AS NumberOfFemaleOfficersTrained, 
SUM(ExtensionOfficersTrained05.NumberOfOfficersTrainedLessThanSixMonths) AS NumberOfOfficersTrainedLessThanSixMonths, 
SUM(ExtensionOfficersTrained05.NumberOfOfficersTrainedMoreThanSixMonths) AS NumberOfOfficersTrainedMoreThanSixMonths
FROM         
RecordInfo 
INNER JOIN
ExtensionOfficersTrained05 ON RecordInfo.RecordID = ExtensionOfficersTrained05.AnnuallyRecordID 
INNER JOIN
FFSGroup ON ExtensionOfficersTrained05.FieldID = FFSGroup.GroupID
WHERE
FormSerialNumber LIKE @FormSerialNumber
GROUP BY
FFSGroup.GroupID, 
FFSGroup.GroupName, 
ExtensionOfficersTrained05.FieldActivity
ORDER BY
FFSGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualExtensionOfficers]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualExtensionOfficers]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
ThreeDGroup.GroupDescription,
ThreeDList.ListID,
ThreeDList.ListItemEn,
SUM(ExtensionOfficers05.NumberOfDistrictMale) AS NumberOfDistrictMale,
SUM(ExtensionOfficers05.NumberOfDistrictFemale) AS NumberOfDistrictFemale, 
SUM(ExtensionOfficers05.NumberOfWardsMale) AS NumberOfWardsMale,
SUM(ExtensionOfficers05.NumberOfWardsFemale) AS NumberOfWardsFemale,
SUM(ExtensionOfficers05.NumberOfVillagesMale) AS NumberOfVillagesMale, 
SUM(ExtensionOfficers05.NumberOfVillagesFemale) AS NumberOfVillagesFemale,
SUM(ExtensionOfficers05.Total) AS Total,
SUM(ExtensionOfficers05.TotalRegisterd) AS TotalRegisterd
FROM         
ThreeDGroup 
INNER JOIN
ThreeDList ON ThreeDGroup.GroupID = ThreeDList.GroupID 
INNER JOIN
ExtensionOfficers05 ON ThreeDList.ListID = ExtensionOfficers05.SpecilizationID 
INNER JOIN
RecordInfo ON ExtensionOfficers05.AnnuallyRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY 
ThreeDGroup.GroupDescription, 
ThreeDList.ListID, 
ThreeDList.ListItemEn                   
ORDER BY 
ThreeDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualEducationLevel]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualEducationLevel]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
TwoDList.ListID,
TwoDList.ListItemSw,
TwoDList.ListItemEn,
SUM(EducationLevel05.HQMale) AS HQMale,
SUM(EducationLevel05.HQFemale) AS HQFemale,
SUM(EducationLevel05.WardMale) AS WardMale, 
SUM(EducationLevel05.WardFemale) AS WardFemale,
SUM(EducationLevel05.VillageMale) AS VillageMale,
SUM(EducationLevel05.VillageFemale) AS VillageFemale,
SUM(EducationLevel05.Total) AS Total
FROM         
TwoDList 
INNER JOIN
EducationLevel05 ON TwoDList.ListID = EducationLevel05.LevelID 
INNER JOIN
RecordInfo ON EducationLevel05.AnnuallyRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'                   
GROUP BY 
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn
ORDER BY 
TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualDistrictLivestockPopulation]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualDistrictLivestockPopulation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
LivestockPopulation05.NameOfFarm,
LivestockPopulation05.TypeOfOwnership,
LivestockPopulation05.RegistrationNumber,
SUM(LivestockPopulation05.NumberOfCattle) AS NumberOfCattle, 
SUM(LivestockPopulation05.NumberOfSheep) AS NumberOfSheep,
SUM(LivestockPopulation05.NumberOfGoats) AS NumberOfGoats,
SUM(LivestockPopulation05.NumberOfPigs) AS NumberOfPigs,
SUM(LivestockPopulation05.NumberOfLayers) AS NumberOfLayers, 
SUM(LivestockPopulation05.NumberOfBloilers) AS NumberOfBloilers
FROM         
LivestockPopulation05 
INNER JOIN
RecordInfo ON LivestockPopulation05.AnnuallyRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY 
LivestockPopulation05.NameOfFarm, 
LivestockPopulation05.TypeOfOwnership, 
LivestockPopulation05.RegistrationNumber
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualDistrictInfo]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualDistrictInfo] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
DistrictInfo05.NumberOfWards, 
DistrictInfo05.NumberOfVillages, 
DistrictInfo05.NumberOfHousehold, 
DistrictInfo05.NumberOfHouseholdAgriculture, 
DistrictInfo05.DistrictPopulation, 
DistrictInfo05.ModeOfInternetAccess, 
DistrictInfo05.NumberOfOfficersTrained, 
DistrictInfo05.NumberOfResourceCentres
FROM         
DistrictInfo05 
INNER JOIN
RecordInfo ON DistrictInfo05.AnnuallyRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualCoopGroup]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualCoopGroup]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CoopGroup.GroupID, 
CoopGroup.GroupName, 
CoopGroupList.CoopGroupListID, 
CoopGroupList.GroupDetails, 
SUM(CoopGroup02.NumberOfGroups) AS NumberOfGroups, 
SUM(CoopGroup02.NumberOfMaleMembers) AS NumberOfMaleMembers, SUM(CoopGroup02.NumberOfFemaleMembers) AS NumberOfFemaleMembers, SUM(CoopGroup02.TotalNumberRegistered) AS TotalNumberRegistered, 
SUM(CoopGroup02.TotalNumberWithBankAccount) AS TotalNumberWithBankAccount
FROM         
CoopGroup 
INNER JOIN
CoopGroupList ON CoopGroup.GroupID = CoopGroupList.GroupID 
INNER JOIN
CoopGroup02 ON CoopGroupList.CoopGroupListID = CoopGroup02.CoopID 
INNER JOIN
RecordInfo ON CoopGroup02.RecordID = RecordInfo.RecordID
WHERE 
FormSerialNumberIA like @FormSerialNumber
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY 
CoopGroup.GroupID,
CoopGroup.GroupName,
CoopGroupList.CoopGroupListID,
CoopGroupList.GroupDetails
ORDER BY 
CoopGroupList.CoopGroupListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualFoodSituation]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualFoodSituation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
ThreeDGroup.GroupDescription, 
ThreeDList.ListID,
ThreeDList.ListItemSw, 
ThreeDList.ListItemEn,
SUM(FoodSituation05.TotalProduction) AS TotalProduction,
SUM(FoodSituation05.Factor) AS Factor, 
SUM(FoodSituation05.CerealEquivalent) AS CerealEquivalent,
SUM(FoodSituation05.TotalCerealEquivalent) AS TotalCerealEquivalent,
SUM(FoodSituation05.RequirementCerealEquivalent) AS RequirementCerealEquivalent,
SUM(FoodSituation05.SurplusDeficit) AS SurplusDeficit
FROM         
ThreeDGroup 
INNER JOIN
ThreeDList ON ThreeDGroup.GroupID = ThreeDList.GroupID 
INNER JOIN
FoodSituation05 ON ThreeDList.ListID = FoodSituation05.FoodTypeID 
INNER JOIN
RecordInfo ON FoodSituation05.AnnuallyRecordID = RecordInfo.RecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'

GROUP BY 
ThreeDGroup.GroupDescription,
ThreeDList.ListID,
ThreeDList.ListItemSw,
ThreeDList.ListItemEn
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualFFSOther]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualFFSOther]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool02.FieldActivity, 
SUM(FarmersFieldSchool02.NumberOfFarmersTrainedMale) AS NumberOfFarmersTrainedMale, 
SUM(FarmersFieldSchool02.NumberOfFarmersTrainedFemale) AS NumberOfFarmersTrainedFemale, 
SUM(FarmersFieldSchool02.NumberOfFarmersTrainedLessThanWeek) AS NumberOfFarmersTrainedLessThanWeek, 
SUM(FarmersFieldSchool02.NumberOfFarmersTrainedMoreThanWeek) AS NumberOfFarmersTrainedMoreThanWeek
FROM        
FFSGroup 
INNER JOIN
FarmersFieldSchool02 ON FFSGroup.GroupID = FarmersFieldSchool02.FieldID 
INNER JOIN
RecordInfo ON FarmersFieldSchool02.RecordID = RecordInfo.RecordID
WHERE     
RecordInfo.FormSerialNumberIA LIKE @FormSerialNumber
AND
FarmersFieldSchool02.FieldActivity IS NOT NULL

--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'

GROUP BY FFSGroup.GroupID,FFSGroup.GroupName,FarmersFieldSchool02.FieldActivity
ORDER BY FFSGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualPlanningCommittee]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualPlanningCommittee]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn,
SUM(PlanningCommitee05.Number) AS Number,
SUM(PlanningCommitee05.Percentage) AS Percentage
FROM         
TwoDList 
INNER JOIN
PlanningCommitee05 ON TwoDList.ListID = PlanningCommitee05.SexID 
INNER JOIN
RecordInfo ON PlanningCommitee05.AnnuallyRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualPestcide]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualPestcide]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
PestcideList.PestcideListID, 
PestcideList.PestcideStatus, 
Pestcide03.Pestcide03Name, 
Pestcide03.Measurement, 
SUM(Pestcide03.UsagePerYear) AS UsagePerYear
FROM         
PestcideList 
INNER JOIN
Pestcide03 ON PestcideList.PestcideListID = Pestcide03.PesticideID 
INNER JOIN
RecordInfo ON Pestcide03.AnnualRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
AND
Pestcide03.Pestcide03Name IS NOT NULL
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
                      
GROUP BY 
PestcideList.PestcideListID, 
PestcideList.PestcideName, 
PestcideList.PestcideStatus, 
Pestcide03.Pestcide03Name, 
Pestcide03.Measurement
                     
END
GO
/****** Object:  StoredProcedure [dbo].[udp_insert_form]    Script Date: 05/06/2013 17:36:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[udp_insert_form]
-- Add the parameters for the stored procedure here
@RecordID uniqueidentifier,	
@AreaID varchar(255),
@OfficerName Nvarchar(50),
@SubmissionDate datetime,
@PeriodFrom datetime,
@PeriodTo datetime,
@FormTypeNumber int,
@DateCaptured datetime,
@CapturedByUserID varchar(3),
@OrganisationID varchar(3),
@FormSerialNumber varchar(41),
@FormSerialNumberIQ varchar(50),
@FormSerialNumberIA varchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

if (select COUNT (*) from RecordInfo where RecordID=@RecordID)=0
begin
Insert into RecordInfo(
RecordID,
AreaID,
OfficerName, 
SubmissionDate, 
PeriodFrom, 
PeriodTo,
FormTypeNumber, 
DateCaptured,
CapturedByUserID,  
OrganisationID,
FormSerialID,
FormSerialNumber,
FormSerialNumberIQ,
FormSerialNumberIA
)
Values
(
@RecordID,
@AreaID, 
@OfficerName, 
@SubmissionDate, 
@PeriodFrom, 
@PeriodTo, 
@FormTypeNumber, 
@DateCaptured,
@CapturedByUserID, 
@OrganisationID,
@FormSerialNumber, 
@FormSerialNumber,
@FormSerialNumberIQ,
@FormSerialNumberIA
)
		
if @FormTypeNumber=1 
Insert into MonthlyRecord
(RecordID,FormSerialID)
values 
(@RecordID,@FormSerialNumber)
--if @FormTypeNumber=1 Insert into MonthlyRecord  (RecordID,[Month]) values (@RecordID,1)
--if @FormTypeNumber=2 Insert into QuarterlyRecord  (RecordID,[Quarter],MonthInterval) values (@RecordID,1,1)
if @FormTypeNumber=2 
Insert into QuarterlyRecord  
(RecordID,FormSerialID) 
values 
(@RecordID,@FormSerialNumber)
if @FormTypeNumber=3 
Insert into AnnualRecord  
(RecordID,FormSerialID ) 
values 
(@RecordID,@FormSerialNumber)

end
else
update RecordInfo
set
OfficerName = @OfficerName,			
SubmissionDate = @SubmissionDate
where 
RecordID=@RecordID

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardAiredPrograms]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardAiredPrograms]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
AiredPrograms03.NameOfStation, 
AiredPrograms03.NameOfProgram, 
AVG(ISNULL(AiredPrograms03.FrequencyTimeInAWeek,0)) AS FrequencyTimeInAWeek
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID 
INNER JOIN
AiredPrograms03 ON RecordInfo.RecordID = AiredPrograms03.AnnualRecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE     
--((RecordInfo.PeriodFrom BETWEEN LEFT(@ParamYear, 4) + '-07-01' AND LEFT(@ParamYear, 4) + '-12-31') 
--OR
--(RecordInfo.PeriodTo BETWEEN RIGHT(@ParamYear, 4) + '-01-31' AND RIGHT(@ParamYear, 4) + '-06-30'))
GROUP BY 
AiredPrograms03.NameOfStation, 
AiredPrograms03.NameOfProgram

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardFertilizer]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardFertilizer]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FertilizerList.FertilizerListID, 
FertilizerList.FertilizerName, 
SUM(ISNULL(Fertilizer03.AnnualNeeds,0)) AS AnnualNeeds, 
SUM(ISNULL(Fertilizer03.AnnualUsage,0)) AS AnnualUsage
FROM         
RecordInfo 
INNER JOIN
Fertilizer03 ON RecordInfo.RecordID = Fertilizer03.AnnualRecordID 
INNER JOIN
FertilizerList ON Fertilizer03.FertilizerID = FertilizerList.FertilizerListID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
--OR
--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY FertilizerList.FertilizerListID, FertilizerList.FertilizerName
ORDER BY FertilizerList.FertilizerListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardPestcide]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardPestcide]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
PestcideList.PestcideListID, 
PestcideList.PestcideName, 
Pestcide03.Pestcide03Name, 
Pestcide03.Measurement,
SUM(ISNULL(Pestcide03.UsagePerYear,0)) AS UsagePerYear
FROM         
RecordInfo 
INNER JOIN
Pestcide03 ON RecordInfo.RecordID = Pestcide03.AnnualRecordID 
INNER JOIN
PestcideList ON Pestcide03.PesticideID = PestcideList.PestcideListID 
WHERE 
FormSerialNumber like @FormSerialNumber
AND
(
Pestcide03.Pestcide03Name IS NOT NULL
OR
Pestcide03.Pestcide03Name <>''
)
GROUP BY 
PestcideList.PestcideListID, 
PestcideList.PestcideName, 
Pestcide03.Pestcide03Name,  
Pestcide03.Measurement 
ORDER BY PestcideList.PestcideListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyProdMilk]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyProdMilk]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT     
ProdMilkList.ProdMilkListID, 
ProdMilkList.ProdName, 
SUM(ISNULL(ProdMilk01.AmountThisMonth,0)) AS AmountThisMonth
FROM         
RecordInfo INNER JOIN
ProdMilk01 ON RecordInfo.RecordID = ProdMilk01.MonthlyRecordID 
INNER JOIN
ProdMilkList ON ProdMilk01.ProdTypeID = ProdMilkList.ProdMilkListID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY 
ProdMilkList.ProdMilkListID, 
ProdMilkList.ProdName, 
ProdMilk01.AmountThisMonth
ORDER BY ProdMilkList.ProdMilkListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWorkingFacilities]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWorkingFacilities]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn,
SUM(WorkingFacilities05.NumberOfVehicleRequired) AS NumberOfVehicleRequired,
SUM(WorkingFacilities05.NumberOfVehicleAvailable) AS NumberOfVehicleAvailable, 
SUM(WorkingFacilities05.NumberOfMotorcycleRequired) AS NumberOfMotorcycleRequired,
SUM(WorkingFacilities05.NumberOfMotorcycleAvailable) AS NumberOfMotorcycleAvailable,
SUM(WorkingFacilities05.NumberOfBicycleRequired) AS NumberOfBicycleRequired, 
SUM(WorkingFacilities05.NumberOfBicycleAvailable) AS NumberOfBicycleAvailable,
SUM(WorkingFacilities05.NumberOfHousingRequired) AS NumberOfHousingRequired,
SUM(WorkingFacilities05.NumberOfHousingAvailable) AS NumberOfHousingAvailable
FROM         TwoDList INNER JOIN
                      WorkingFacilities05 ON TwoDList.ListID = WorkingFacilities05.StationID INNER JOIN
                      RecordInfo ON WorkingFacilities05.AnnuallyRecordID = RecordInfo.RecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'                   
GROUP BY TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWorkingEquipments]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWorkingEquipments]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn,
SUM(WorkingEquipments05.NumberOfExtensionKitRequired) AS NumberOfExtensionKitRequired, 
SUM(WorkingEquipments05.NumberOfExtensionKitAvailable) AS NumberOfExtensionKitAvailable,
SUM(WorkingEquipments05.NumberOfPhotocopierRequired) AS NumberOfPhotocopierRequired, 
SUM(WorkingEquipments05.NumberOfPhotocopierAvailable) AS NumberOfPhotocopierAvailable,
SUM(WorkingEquipments05.NumberOfComputerRequired) AS NumberOfComputerRequired, 
SUM(WorkingEquipments05.NumberOfComputerAvailable) AS NumberOfComputerAvailable
FROM         TwoDList INNER JOIN
                      WorkingEquipments05 ON TwoDList.ListID = WorkingEquipments05.StationID INNER JOIN
                      RecordInfo ON WorkingEquipments05.AnnuallyRecordID = RecordInfo.RecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'                   
GROUP BY TwoDList.ListID, TwoDList.ListItemSw, TwoDList.ListItemEn 
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualProductsProcessing]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualProductsProcessing]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
TwoDList.ListID,
TwoDList.ListItemSw,
TwoDList.ListItemEn,
ProductsProcessing05.NameOfBussiness,
ProductsProcessing05.RegistrationNumber, 
ProductsProcessing05.TypeOfProduct,
ProductsProcessing05.MeasurementUnit,
SUM(ProductsProcessing05.InstalledProduction) AS InstalledProduction, 
SUM(ProductsProcessing05.UtilizedProduction) AS UtilizedProduction
FROM         
TwoDList 
INNER JOIN
ProductsProcessing05 ON TwoDList.ListID = ProductsProcessing05.ProcessingID 
INNER JOIN
RecordInfo ON ProductsProcessing05.AnnuallyRecordID = RecordInfo.RecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30' 
GROUP BY 
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
ProductsProcessing05.NameOfBussiness, 
ProductsProcessing05.RegistrationNumber, 
ProductsProcessing05.TypeOfProduct, 
ProductsProcessing05.MeasurementUnit
ORDER BY TwoDList.ListID                  

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyLivestockMovement]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyLivestockMovement] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

    --@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
	--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 --  declare @myParamYear nvarchar(9)
 --  declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter =@ParamQuarter+2
	--	select @myParamYear=LEFT(@ParamYear,4)
 --   end
    
    
 --   if @ParamQuarter>2 
 --   begin
	--	select @myParamQuarter =@ParamQuarter-2
	--	select @myParamYear=righT(@ParamYear,4)
	--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
LivestockList.LivestockListID, 
LivestockList.LivestockName, 
LivestockList.LivestockNameEnglish, 
LivestockList.LivestockStatus, 
SUM(ISNULL(LivestockMovement04.AnimalsIntoNonTrade,0)) AS AnimalsIntoNonTrade, 
SUM(ISNULL(LivestockMovement04.AnimalsIntoTradeFromLGA,0)) AS AnimalsIntoTradeFromLGA,
SUM(ISNULL(LivestockMovement04.AnimalsIntoTradeFromCountries,0)) AS AnimalsIntoTradeFromCountries, 
SUM(ISNULL(LivestockMovement04.AnimalsToNonTrade,0)) AS AnimalsToNonTrade, 
SUM(ISNULL(LivestockMovement04.AnimalsToTradeLGA,0)) AS AnimalsToTradeLGA,
SUM(ISNULL(LivestockMovement04.AnimalsToTradeCountries,0)) AS AnimalsToTradeCountries, 
SUM(ISNULL(LivestockMovement04.AnimalsTransNonTrade,0)) AS AnimalsTransNonTrade, 
SUM(ISNULL(LivestockMovement04.AnimalsTransTrade,0)) AS AnimalsTransTrade
FROM         
LivestockList 
INNER JOIN
LivestockMovement04 ON LivestockList.LivestockListID = LivestockMovement04.LivestockID 
INNER JOIN
RecordInfo ON LivestockMovement04.QuarterlyRecordID = RecordInfo.RecordID
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@myParamYear,4)

--and 
--datepart(q,Periodto )=@myParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@myParamYear,4)

--and 
--datepart(q,PeriodFrom )=@ParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@ParamYear,4)

--and 
--datepart(q,Periodto )=@ParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@ParamYear,4)

GROUP BY 
LivestockList.LivestockListID,
LivestockList.LivestockName,
LivestockList.LivestockNameEnglish,
LivestockList.LivestockNameEnglish,
LivestockList.LivestockStatus
ORDER BY 
LivestockList.LivestockListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyLivestockMarketing]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyLivestockMarketing]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

    --@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
	--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 --   declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter =@ParamQuarter+2
	--	select @myParamYear=LEFT(@ParamYear,4)
 --   end
    
    
 --   if @ParamQuarter>2 
 --   begin
	--	select @myParamQuarter =@ParamQuarter-2
	--	select @myParamYear=righT(@ParamYear,4)
	--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus, 
SUM(ISNULL(LivestockMarketing04.WarmThisQuarter,0)) AS WarmThisQuarter, 
SUM(ISNULL(LivestockMarketing04.ChilledThisQuarter,0)) AS ChilledThisQuarter, 
SUM(ISNULL(LivestockMarketing04.FrozenThisQuarter,0)) AS FrozenThisQuarter
FROM         
TwoDList 
INNER JOIN
LivestockMarketing04 ON TwoDList.ListID = LivestockMarketing04.LivestockID 
INNER JOIN
RecordInfo ON LivestockMarketing04.QuarterlyRecordID = RecordInfo.RecordID
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber
--(TwoDList.ListItemType = 'LivestockMarketing04') --AND FormSerialNumber like @FormSerialNumber 
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@myParamYear,4)

--and 
--datepart(q,Periodto )=@myParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@myParamYear,4)

--and 
--datepart(q,PeriodFrom )=@ParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@ParamYear,4)

--and 
--datepart(q,Periodto )=@ParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@ParamYear,4)
GROUP BY 
TwoDList.ListID,
TwoDList.ListItemSw,
TwoDList.ListItemEn,
TwoDList.ListItemType,
TwoDList.ListItemStatus
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyAnimalFeeds]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyAnimalFeeds] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

    --@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
	--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	--declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter =@ParamQuarter+2
	--	select @myParamYear=LEFT(@ParamYear,4)
 --   end
    
    
 --   if @ParamQuarter>2 
 --   begin
	--	select @myParamQuarter =@ParamQuarter-2
	--	select @myParamYear=righT(@ParamYear,4)
	--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
AnimalsFeeds04.GenericName, 
AnimalsFeeds04.TradeName, 
AnimalsFeeds04.Source, 
AnimalsFeeds04.MeasurementUnit, 
SUM(AnimalsFeeds04.QuarterlyRequirement) AS QuarterlyRequirement, 
SUM(AnimalsFeeds04.QuarterlyAmountUsed) AS QuarterlyAmountUsed, 
SUM(AnimalsFeeds04.LowPrice) AS LowPrice, 
SUM(AnimalsFeeds04.HighPrice) AS HighPrice
FROM         
TwoDList 
INNER JOIN
AnimalsFeeds04 ON TwoDList.ListID = AnimalsFeeds04.FeedsID 
INNER JOIN
RecordInfo ON AnimalsFeeds04.QuarterlyRecordID = RecordInfo.RecordID     
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@myParamYear,4)

--and 
--datepart(q,Periodto )=@myParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@myParamYear,4)

--and 
--datepart(q,PeriodFrom )=@ParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@ParamYear,4)

--and 
--datepart(q,Periodto )=@ParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@ParamYear,4)
GROUP BY 
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn,
AnimalsFeeds04.GenericName,
AnimalsFeeds04.TradeName,
AnimalsFeeds04.Source,
AnimalsFeeds04.MeasurementUnit
ORDER BY TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyProdMilk]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyProdMilk]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9),
--@ParamQuarter nvarchar(1)
  @FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	--declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter = @ParamQuarter+2
	--	select @myParamYear = LEFT(@ParamYear,4)
	--end	
	--	else
	--begin
	--	select @myParamQuarter = @ParamQuarter-2
	--	select @myParamYear = RIGHT(@ParamYear,4)
	--end
	
SELECT     
ProdMilkList.ProdMilkListID, 
ProdMilkList.ProdName, 
SUM(ISNULL(ProdMilk01.AmountThisMonth,0)) AS AmountThisMonth
FROM         
ProdMilkList 
INNER JOIN
ProdMilk01 ON ProdMilkList.ProdMilkListID = ProdMilk01.ProdTypeID 
INNER JOIN
RecordInfo ON ProdMilk01.MonthlyRecordID = RecordInfo.RecordID
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber--and
--(datepart(YYYY,PeriodFrom )=@myParamYear
--and 
--datepart(q,PeriodFrom )=@myParamQuarter)

--or 
--(datepart(YYYY,Periodto )=@myParamYear
--and 
--datepart(q,Periodto )=@myParamQuarter)
GROUP BY ProdMilkList.ProdMilkListID,ProdMilkList.ProdName
ORDER BY ProdMilkList.ProdMilkListID

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyReproductionInputs]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyReproductionInputs]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

    --@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
	--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 --   declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter =@ParamQuarter+2
	--	select @myParamYear=LEFT(@ParamYear,4)
 --   end
    
    
 --   if @ParamQuarter>2 
 --   begin
	--	select @myParamQuarter =@ParamQuarter-2
	--	select @myParamYear=righT(@ParamYear,4)
	--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus, 
ReproductionInputs04.Breed, 
SUM(ISNULL(ReproductionInputs04.AmountRequired,0)) AS AmountRequired, 
SUM(ISNULL(ReproductionInputs04.AmountAvailable,0)) AS AmountAvailable
FROM         
TwoDList 
INNER JOIN
ReproductionInputs04 ON TwoDList.ListID = ReproductionInputs04.InputID 
INNER JOIN
RecordInfo ON ReproductionInputs04.QuarterlyRecordID = RecordInfo.RecordID
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@myParamYear,4)

--and 
--datepart(q,Periodto )=@myParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@myParamYear,4)

--and 
--datepart(q,PeriodFrom )=@ParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@ParamYear,4)

--and 
--datepart(q,Periodto )=@ParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@ParamYear,4)

GROUP BY 
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus, 
ReproductionInputs04.Breed
ORDER BY TwoDList.ListID

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlySubmissionStatus]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlySubmissionStatus] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	SELECT     Areas.Name
FROM         RecordInfo INNER JOIN
                      MonthlyRecord ON RecordInfo.RecordID = MonthlyRecord.RecordID INNER JOIN
                      Areas ON RecordInfo.AreaID = Areas.ID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyProductsMovement]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyProductsMovement] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

    --@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
	--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 --  declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter =@ParamQuarter+2
	--	select @myParamYear=LEFT(@ParamYear,4)
 --   end
    
    
 --   if @ParamQuarter>2 
 --   begin
	--	select @myParamQuarter =@ParamQuarter-2
	--	select @myParamYear=righT(@ParamYear,4)
	--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus, 
SUM(ISNULL(ProductsMovement04.SoldWithinDistricts,0)) AS SoldWithinDistricts, 
SUM(ISNULL(ProductsMovement04.SoldOtherDistricts,0)) AS SoldOtherDistricts, 
SUM(ISNULL(ProductsMovement04.SoldOtherCountries,0)) AS SoldOtherCountries
FROM         
TwoDList 
INNER JOIN
ProductsMovement04 ON TwoDList.ListID = ProductsMovement04.ProductID 
INNER JOIN
RecordInfo ON ProductsMovement04.QuarterlyRecordID = RecordInfo.RecordID
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber--and
--((datepart(YYYY,PeriodFrom )=@myParamYear
--and 
--datepart(q,PeriodFrom )=@myParamQuarter))

--or 
--((datepart(YYYY,Periodto )=@myParamYear
--and 
--datepart(q,Periodto )=@myParamQuarter))
GROUP BY 
TwoDList.ListID, 
TwoDList.ListItemSw, 
TwoDList.ListItemEn, 
TwoDList.ListItemType, 
TwoDList.ListItemStatus
HAVING      
(TwoDList.ListItemType = 'ProductsMovement04')
ORDER BY 
TwoDList.ListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardFoodCondition02]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyWardFoodCondition02]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	--@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
	--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
--declare @myParamYear nvarchar(9)
--declare @myParamQuarter nvarchar(1)

--if @ParamQuarter<3 
--begin
--select @myParamQuarter =@ParamQuarter+2
--select @myParamYear=LEFT(@ParamYear,4)
--end
    
--if @ParamQuarter>2 
--begin
--select @myParamQuarter =@ParamQuarter-2
--select @myParamYear=righT(@ParamYear,4)
--end
    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
SUM(FoodCondition02.FamilyNoFood) AS FamilyNoFood, 
SUM(FoodCondition02.FamilyLessFood) AS FamilyLessFood, 
SUM(FoodCondition02.FamilyEnoughFood) AS FamilyEnoughFood, 
SUM(FoodCondition02.FamilyExcessFood) AS FamilyExcessFood
FROM         
RecordInfo 
INNER JOIN
FoodCondition02 ON RecordInfo.RecordID = FoodCondition02.RecordID
WHERE FormSerialNumber like @FormSerialNumber 
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and datepart(YYYY,PeriodFrom )=LEFT (@myParamYear,4)

--and datepart(q,Periodto )=@myParamQuarter
--and datepart(YYYY,Periodto )=LEFT (@myParamYear,4))

--OR

--(datepart(q,PeriodFrom )=@ParamQuarter
--and datepart(YYYY,PeriodFrom )=RIGHT (@ParamYear,4)

--and datepart(q,Periodto )=@ParamQuarter
--and datepart(YYYY,Periodto )=RIGHT (@ParamYear,4))
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardFoodCondition01]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyWardFoodCondition01] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--declare @myParamYear nvarchar(9)
--declare @myParamQuarter nvarchar(1)

--if @ParamQuarter<3 
--begin
--select @myParamQuarter =@ParamQuarter+2
--select @myParamYear=LEFT(@ParamYear,4)
--end
    
--if @ParamQuarter>2 
--begin
--select @myParamQuarter =@ParamQuarter-2
--select @myParamYear=righT(@ParamYear,4)
--end
    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
FoodStatusList.FoodStatusListID, 
FoodStatusList.StatusDescription, 
COUNT(ISNULL(FoodCondition02.FoodStatustID,0)) AS FoodStatustID
FROM         
RecordInfo 
INNER JOIN
FoodCondition02 ON RecordInfo.RecordID = FoodCondition02.RecordID 
INNER JOIN
FoodStatusList ON FoodCondition02.FoodStatustID = FoodStatusList.FoodStatusListID
WHERE FormSerialNumber like @FormSerialNumber 
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and datepart(YYYY,PeriodFrom )=LEFT (@myParamYear,4)

--and datepart(q,Periodto )=@myParamQuarter
--and datepart(YYYY,Periodto )=LEFT (@myParamYear,4))

--OR

--(datepart(q,PeriodFrom )=@ParamQuarter
--and datepart(YYYY,PeriodFrom )=RIGHT (@ParamYear,4)

--and datepart(q,Periodto )=@ParamQuarter
--and datepart(YYYY,Periodto )=RIGHT (@ParamYear,4))
GROUP BY 
FoodStatusList.FoodStatusListID, 
FoodStatusList.StatusDescription
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardFFS]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyWardFFS] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool02.FieldActivity, 
SUM(ISNULL(FarmersFieldSchool02.NumberOfFarmersTrainedMale,0)) AS NumberOfFarmersTrainedMale,
SUM(ISNULL(FarmersFieldSchool02.NumberOfFarmersTrainedFemale,0)) AS NumberOfFarmersTrainedFemale, 
SUM(ISNULL(FarmersFieldSchool02.NumberOfFarmersTrainedLessThanWeek,0)) AS NumberOfFarmersTrainedLessThanWeek,  
SUM(ISNULL(FarmersFieldSchool02.NumberOfFarmersTrainedMoreThanWeek,0)) AS NumberOfFarmersTrainedMoreThanWeek, 
FarmersFieldSchool02.MethodOfTraining
FROM         
RecordInfo 
INNER JOIN
FarmersFieldSchool02 ON RecordInfo.RecordID = FarmersFieldSchool02.RecordID 
INNER JOIN
FFSGroup ON FarmersFieldSchool02.FieldID = FFSGroup.GroupID
WHERE 
FormSerialNumber like @FormSerialNumber 
AND
FarmersFieldSchool02.FieldActivity IS NOT NULL
GROUP BY 
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool02.FieldActivity,
FarmersFieldSchool02.MethodOfTraining
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardCoopGroups]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyWardCoopGroups] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--declare @myParamYear nvarchar(9)
--declare @myParamQuarter nvarchar(1)

--if @ParamQuarter<3 
--begin
--select @myParamQuarter =@ParamQuarter+2
--select @myParamYear=LEFT(@ParamYear,4)
--end
    
--if @ParamQuarter>2 
--begin
--select @myParamQuarter =@ParamQuarter-2
--select @myParamYear=righT(@ParamYear,4)
--end
    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT 
CoopGroup.GroupID,
CoopGroup.GroupName, 
CoopGroupList.GroupDetails, 
SUM(isnull(CoopGroup02.NumberOfGroups,0)) AS NumberOfGroups, 
SUM(isnull(CoopGroup02.NumberOfMaleMembers,0)) AS NumberOfMaleMembers, 
SUM(isnull(CoopGroup02.NumberOfFemaleMembers,0)) AS NumberOfFemaleMembers, 
SUM(isnull(CoopGroup02.NumberOfTotalMembers,0)) AS NumberOfTotalMembers, 
SUM(isnull(CoopGroup02.TotalNumberRegistered,0)) AS TotalNumberRegistered, 
SUM(isnull(CoopGroup02.TotalNumberWithBankAccount,0)) AS TotalNumberWithBankAccount
FROM         
RecordInfo 
INNER JOIN
CoopGroup02 ON RecordInfo.RecordID = CoopGroup02.RecordID 
INNER JOIN
CoopGroupList ON CoopGroup02.CoopID = CoopGroupList.CoopGroupListID 
INNER JOIN
CoopGroup ON CoopGroupList.GroupID = CoopGroup.GroupID
WHERE FormSerialNumber like @FormSerialNumber 
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and datepart(YYYY,PeriodFrom )=LEFT (@myParamYear,4)

--and datepart(q,Periodto )=@myParamQuarter
--and datepart(YYYY,Periodto )=LEFT (@myParamYear,4))

--OR

--(datepart(q,PeriodFrom )=@ParamQuarter
--and datepart(YYYY,PeriodFrom )=RIGHT (@ParamYear,4)

--and datepart(q,Periodto )=@ParamQuarter
--and datepart(YYYY,Periodto )=RIGHT (@ParamYear,4))
GROUP BY 
CoopGroup.GroupID,CoopGroup.GroupName, CoopGroupList.GroupDetails
ORDER BY CoopGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardSoilErosion]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyWardSoilErosion] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--declare @myParamYear nvarchar(9)
--declare @myParamQuarter nvarchar(1)

--if @ParamQuarter<3 
--begin
--select @myParamQuarter =@ParamQuarter+2
--select @myParamYear=LEFT(@ParamYear,4)
--end
    
--if @ParamQuarter>2 
--begin
--select @myParamQuarter =@ParamQuarter-2
--select @myParamYear=righT(@ParamYear,4)
--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
--SELECT     
--SoilErosion02.SoilErosionListID,
----Areas.Name, 
--SoilErosion02.VillagesInvolved, 
--SoilErosion02.ControlMeasures, 
--SUM(ISNULL(SoilErosion02.AreaDestroyed,0)) AS Value,
--'Eneo lililoharibiwa (ha)' AS Data
--FROM         
--RecordInfo 
--INNER JOIN
--Areas ON RecordInfo.AreaID = Areas.ID 
--INNER JOIN
--SoilErosion02 ON RecordInfo.RecordID = SoilErosion02.RecordID
--WHERE FormSerialNumber like @FormSerialNumber 
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and datepart(YYYY,PeriodFrom )=LEFT (@myParamYear,4)

--and datepart(q,Periodto )=@myParamQuarter
--and datepart(YYYY,Periodto )=LEFT (@myParamYear,4))

--OR

--(datepart(q,PeriodFrom )=@ParamQuarter
--and datepart(YYYY,PeriodFrom )=RIGHT (@ParamYear,4)

--and datepart(q,Periodto )=@ParamQuarter
--and datepart(YYYY,Periodto )=RIGHT (@ParamYear,4))
--GROUP BY 
--SoilErosion02.SoilErosionListID, 
----Areas.Name,
--SoilErosion02.VillagesInvolved, 
--SoilErosion02.ControlMeasures

--UNION

--SELECT     
--SoilErosion02.SoilErosionListID,
----Areas.Name, 
--SoilErosion02.VillagesInvolved, 
--SoilErosion02.ControlMeasures, 
--SUM(SoilErosion02.AreaControlled) AS Value,
--'Eneo lililokarabatiwa (ha)' AS Data
--FROM         
--RecordInfo 
--INNER JOIN
--Areas ON RecordInfo.AreaID = Areas.ID 
--INNER JOIN
--SoilErosion02 ON RecordInfo.RecordID = SoilErosion02.RecordID
--WHERE FormSerialNumber like @FormSerialNumber 
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and datepart(YYYY,PeriodFrom )=LEFT (@myParamYear,4)

--and datepart(q,Periodto )=@myParamQuarter
--and datepart(YYYY,Periodto )=LEFT (@myParamYear,4))

--OR

--(datepart(q,PeriodFrom )=@ParamQuarter
--and datepart(YYYY,PeriodFrom )=RIGHT (@ParamYear,4)

--and datepart(q,Periodto )=@ParamQuarter
--and datepart(YYYY,Periodto )=RIGHT (@ParamYear,4))
--GROUP BY
--SoilErosion02.SoilErosionListID, 
----Areas.Name,
--SoilErosion02.VillagesInvolved, 
--SoilErosion02.ControlMeasures

SELECT     
SoilErosion02.SoilErosionListID, 
--SoilErosion02.VillagesInvolved, 
SUM(SoilErosion02.AreaDestroyed) AS AreaDestroyed, 
SoilErosion02.ControlMeasures, 
SUM(SoilErosion02.AreaControlled) AS AreaControlled
FROM         
RecordInfo 
INNER JOIN
SoilErosion02 ON RecordInfo.RecordID = SoilErosion02.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
GROUP BY
SoilErosion02.SoilErosionListID, 
--SoilErosion02.VillagesInvolved, 
SoilErosion02.ControlMeasures
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardPlantHealth]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyWardPlantHealth] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--declare @myParamYear nvarchar(9)
--declare @myParamQuarter nvarchar(1)

--if @ParamQuarter<3 
--begin
--select @myParamQuarter =@ParamQuarter+2
--select @myParamYear=LEFT(@ParamYear,4)
--end
    
--if @ParamQuarter>2 
--begin
--select @myParamQuarter =@ParamQuarter-2
--select @myParamYear=righT(@ParamYear,4)
--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
PlantHealth02.DiseaseID, 
PlantHealth02.CropID, 
PlantHealth02.ControlMeasures,
--Areas.Name,
SUM(PlantHealth02.AreaControled) AS Value,
'Eneo lililodhibitiwa (ha)' AS Data
FROM         
RecordInfo 
INNER JOIN
PlantHealth02 ON RecordInfo.RecordID = PlantHealth02.RecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and datepart(YYYY,PeriodFrom )=LEFT (@myParamYear,4)

--and datepart(q,Periodto )=@myParamQuarter
--and datepart(YYYY,Periodto )=LEFT (@myParamYear,4))

--OR

--(datepart(q,PeriodFrom )=@ParamQuarter
--and datepart(YYYY,PeriodFrom )=RIGHT (@ParamYear,4)

--and datepart(q,Periodto )=@ParamQuarter
--and datepart(YYYY,Periodto )=RIGHT (@ParamYear,4))
GROUP BY
PlantHealth02.DiseaseID, 
PlantHealth02.CropID, 
PlantHealth02.ControlMeasures
--Areas.Name

UNION

SELECT     
PlantHealth02.DiseaseID, 
PlantHealth02.CropID, 
PlantHealth02.ControlMeasures, 
--Areas.Name, 
SUM(PlantHealth02.HouseholdsInvolved) AS Value,
'Kaya zilizohusika' AS Data
FROM         
RecordInfo 
INNER JOIN
PlantHealth02 ON RecordInfo.RecordID = PlantHealth02.RecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and datepart(YYYY,PeriodFrom )=LEFT (@myParamYear,4)

--and datepart(q,Periodto )=@myParamQuarter
--and datepart(YYYY,Periodto )=LEFT (@myParamYear,4))

--OR

--(datepart(q,PeriodFrom )=@ParamQuarter
--and datepart(YYYY,PeriodFrom )=RIGHT (@ParamYear,4)

--and datepart(q,Periodto )=@ParamQuarter
--and datepart(YYYY,Periodto )=RIGHT (@ParamYear,4))
GROUP BY
PlantHealth02.DiseaseID, 
PlantHealth02.CropID, 
PlantHealth02.ControlMeasures
--Areas.Name
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyTarget]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyTarget]
	-- Add the parameters for the stored procedure here
	
	--@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
	--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 --   declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter =@ParamQuarter+2
	--	select @myParamYear=LEFT(@ParamYear,4)
 --   end
   
 --   if @ParamQuarter>2 
 --   begin
	--	select @myParamQuarter =@ParamQuarter-2
	--	select @myParamYear=righT(@ParamYear,4)
	--end
     --Insert statements for procedure here

SELECT     
CropGroupList.CropGroupListID,
CropGroupList.GroupID,CropGroupList.CropName, 
SUM(ISNULL(TargetImplementationAndCropPrices01.ExpectedArea,0)) AS ExpectedArea, 
SUM(ISNULL(TargetImplementationAndCropPrices01.ExpectedProd,0)) AS ExpectedProd
FROM         
CropGroupList 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID
WHERE RecordInfo.FormSerialNumberIQ like @FormSerialNumber
--CropGroupList.GroupID=1 --and FormSerialNumber like @FormSerialNumber
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@myParamYear,4)

--and 
--datepart(q,Periodto )=@myParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@myParamYear,4)

--and 
--datepart(q,PeriodFrom )=@ParamQuarter
--and 
--datepart(YYYY,PeriodFrom )=right (@ParamYear,4)

--and 
--datepart(q,Periodto )=@ParamQuarter
--and 
--datepart(YYYY,Periodto )=right (@ParamYear,4)

GROUP BY 
CropGroupList.CropGroupListID,
CropGroupList.GroupID,
CropGroupList.CropName
ORDER BY 
CropGroupList.CropGroupListID

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardCropUnderIrrigation]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyWardCropUnderIrrigation] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--declare @myParamYear nvarchar(9)
--declare @myParamQuarter nvarchar(1)

--if @ParamQuarter<3 
--begin
--select @myParamQuarter =@ParamQuarter+2
--select @myParamYear=LEFT(@ParamYear,4)
--end
    
--if @ParamQuarter>2 
--begin
--select @myParamQuarter =@ParamQuarter-2
--select @myParamYear=righT(@ParamYear,4)
--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
Irrigation02.CropID, 
SUM(Irrigation02.PlantedAreaRainySeason) AS PlantedAreaRainySeason, 
SUM(Irrigation02.PlantedAreaDrySeason) AS PlantedAreaDrySeason,
SUM(Irrigation02.ProductionRainySeason) AS ProductionRainySeason,
SUM(Irrigation02.ProductionDrySeason) AS ProductionDrySeason,
SUM(Irrigation02.YieldRainySeason) AS YieldRainySeason,
SUM(Irrigation02.YieldDrySeason) AS YieldDrySeason
FROM         
RecordInfo 
INNER JOIN
Irrigation02 ON RecordInfo.RecordID = Irrigation02.RecordID
WHERE
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
GROUP BY Irrigation02.CropID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyWardCoopSaccos]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyWardCoopSaccos] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
--@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--declare @myParamYear nvarchar(9)
--declare @myParamQuarter nvarchar(1)

--if @ParamQuarter<3 
--begin
--select @myParamQuarter =@ParamQuarter+2
--select @myParamYear=LEFT(@ParamYear,4)
--end
    
--if @ParamQuarter>2 
--begin
--select @myParamQuarter =@ParamQuarter-2
--select @myParamYear=righT(@ParamYear,4)
--end
    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
SUM(CoopSaccos02.NumberOfSaccoss) AS NumberOfSaccoss, 
SUM(CoopSaccos02.MembersMale) AS MembersMale, 
SUM(CoopSaccos02.MembersFemale) AS MembersFemale, 
SUM(CoopSaccos02.MembersGroups) AS MembersGroups, 
SUM(CoopSaccos02.LoanCrop) AS LoanCrop, 
SUM(CoopSaccos02.LoanLivestock) AS LoanLivestock, 
SUM(CoopSaccos02.LoanFishery) AS LoanFishery, 
SUM(CoopSaccos02.LoanMarketing) AS LoanMarketing
FROM         
RecordInfo 
INNER JOIN
CoopSaccos02 ON RecordInfo.RecordID = CoopSaccos02.RecordID
WHERE FormSerialNumber like @FormSerialNumber 
--and 
--datepart(q,PeriodFrom )=@myParamQuarter
--and datepart(YYYY,PeriodFrom )=LEFT (@myParamYear,4)

--and datepart(q,Periodto )=@myParamQuarter
--and datepart(YYYY,Periodto )=LEFT (@myParamYear,4))

--OR

--(datepart(q,PeriodFrom )=@ParamQuarter
--and datepart(YYYY,PeriodFrom )=RIGHT (@ParamYear,4)

--and datepart(q,Periodto )=@ParamQuarter
--and datepart(YYYY,Periodto )=RIGHT (@ParamYear,4))
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyProdSkin]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyProdSkin]
	-- Add the parameters for the stored procedure here
	
--@ParamYear nvarchar(9),
--@ParamQuarter nvarchar(1)
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	--declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter = @ParamQuarter+2
	--	select @myParamYear = LEFT(@ParamYear,4)
	--end	
	--	else
	--begin
	--	select @myParamQuarter = @ParamQuarter-2
	--	select @myParamYear = RIGHT(@ParamYear,4)
	--end
	
SELECT     
ProdSkinList.ProdSkinID, 
ProdSkinList.ProdName, 
SUM(ProdSkin01.DrySuspended) AS DrySuspended, 
SUM(ProdSkin01.DrySalted) AS DrySalted, 
SUM(ProdSkin01.WetBlue) AS WetBlue
FROM         
ProdSkinList 
INNER JOIN
ProdSkin01 ON ProdSkinList.ProdSkinID = ProdSkin01.TypeOfProdID 
INNER JOIN
RecordInfo ON ProdSkin01.MonthlyRecordID = RecordInfo.RecordID
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber--and
--((datepart(YYYY,PeriodFrom )=@myParamYear
--and 
--datepart(q,PeriodFrom )=@myParamQuarter))
--or 
--((datepart(YYYY,Periodto )=@myParamYear
--and 
--datepart(q,Periodto )=@myParamQuarter))
GROUP BY ProdSkinList.ProdSkinID, ProdSkinList.ProdName
ORDER BY ProdSkinList.ProdSkinID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyPlantHealth]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyPlantHealth]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	--@ParamYear nvarchar(9),
	--@ParamQuarter nvarchar(1)
	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	--declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter = @ParamQuarter+2
	--	select @myParamYear = LEFT(@ParamYear,4)
	--end	
	--	else
	--begin
	--	select @myParamQuarter = @ParamQuarter-2
	--	select @myParamYear = RIGHT(@ParamYear,4)
	--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.AffectedArea) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Eneo lililoathiriwa (ha)' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.NumberOfVillageAffected) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Idadi ya vijiji vilivyoathiriwa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.AmountOfPestcideApplied) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Kiasi cha dawa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.NumberOfVillagesServed) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Idadi ya vijiji vilivyohudumiwa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.NumberOfHouseHoldServed) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Idadi ya kaya zilizohudumiwa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.AreaRescued) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Eneo lililookolewa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyMeatInspection]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyMeatInspection]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

    --@ParamYear nvarchar(9),
	--@ParamQuarter nvarchar(1)
	@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	--declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter = @ParamQuarter+2
	--	select @myParamYear = LEFT(@ParamYear,4)
	--end	
	--	else
	--begin
	--	select @myParamQuarter = @ParamQuarter-2
	--	select @myParamYear = RIGHT(@ParamYear,4)
	--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT     
MeatInspection01.TypeOfAnimal, 
SUM(MeatInspection01.NumberOfAnimalsAffected) AS NumberOfAnimalsAffected, 
MeatInspection01.ReasonsForCondemnations
FROM         
MeatInspection01 
INNER JOIN
RecordInfo ON MeatInspection01.MonthlyRecordID = RecordInfo.RecordID
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber
--FormSerialNumber like @FormSerialNumber 
--and 
--((datepart(YYYY,PeriodFrom )=@myParamYear
--and 
--datepart(q,PeriodFrom )=@myParamQuarter))

--or 
--((datepart(YYYY,Periodto )=@myParamYear
--and 
--datepart(q,Periodto )=@myParamQuarter))

GROUP BY MeatInspection01.TypeOfAnimal,MeatInspection01.ReasonsForCondemnations
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQuarterlyLivestockSlaughtered]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQuarterlyLivestockSlaughtered]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

 --@ParamYear nvarchar(9),
 --@ParamQuarter nvarchar(1)
   @FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    --Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	--declare @myParamYear nvarchar(9)
	--declare @myParamQuarter nvarchar(1)

 --   if @ParamQuarter<3 
 --   begin
	--	select @myParamQuarter = @ParamQuarter+2
	--	select @myParamYear = LEFT(@ParamYear,4)
	--end	
	--	else
	--begin
	--	select @myParamQuarter = @ParamQuarter-2
	--	select @myParamYear = RIGHT(@ParamYear,4)
	--end

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT     
LivestockSlaughList.LivestockListID,
LivestockSlaughList.LivestockName, 
SUM(ISNULL(LivestockSlaughtered01.TotalNumberSlaughteredThisMonth,0)) AS TotalNumberSlaughteredThisMonth, 
AVG(ISNULL(LivestockSlaughtered01.AverageRetailPriceKg,0)) AS AverageRetailPriceKg
FROM         
LivestockSlaughList 
INNER JOIN
LivestockSlaughtered01 ON LivestockSlaughList.LivestockListID = LivestockSlaughtered01.LivestockID 
INNER JOIN
RecordInfo ON LivestockSlaughtered01.MonthlyRecordID = RecordInfo.RecordID
WHERE 
RecordInfo.FormSerialNumberIQ like @FormSerialNumber
--and
--((datepart(YYYY,PeriodFrom )=@myParamYear
--and 
--datepart(q,PeriodFrom )=@myParamQuarter))

--or 
--((datepart(YYYY,Periodto )=@myParamYear
--and 
--datepart(q,Periodto )=@myParamQuarter))

GROUP BY 
LivestockSlaughList.LivestockListID,
LivestockSlaughList.LivestockName
ORDER BY LivestockSlaughList.LivestockListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspQRCereal]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspQRCereal]
	-- Add the parameters for the stored procedure here
	
	@ParamYear nvarchar(9),-- Quarterly parameter in a form of q-YYYY e.g 2012/2013
	@ParamQuarter nvarchar(1)-- Quarterly parameter in a form of q-YYYY e.g 1
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    declare @myParamYear nvarchar(9)
	declare @myParamQuarter nvarchar(1)

    if @ParamQuarter<3 
    begin
		select @myParamQuarter =@ParamQuarter+2
		select @myParamYear=LEFT(@ParamYear,4)
    end
    
    
    if @ParamQuarter>2 
    begin
		select @myParamQuarter =@ParamQuarter-2
		select @myParamYear=righT(@ParamYear,4)
	end
    -- Insert statements for procedure here
	
	
SELECT   datepart(YY,PeriodFrom ),     CropGroup.GroupID, CropGroup.GroupName, CropGroupList.CropGroupListID, CropGroupList.GroupID AS Expr1, CropGroupList.CropName, 
                         TargetImplementationAndCropPrices01.TargetImplementationAndCropPricesID, TargetImplementationAndCropPrices01.CropID, 
                         TargetImplementationAndCropPrices01.AreaDone, TargetImplementationAndCropPrices01.ProdDone, TargetImplementationAndCropPrices01.MonthlyRecordID, 
                         RecordInfo.OrganisationID, RecordInfo.PeriodFrom, RecordInfo.PeriodTo
FROM            CropGroupList INNER JOIN
                         TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID INNER JOIN
                         RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID INNER JOIN
                         CropGroup ON CropGroupList.GroupID = CropGroup.GroupID
WHERE        (CropGroup.GroupID = 1)

and datepart(YYYY,PeriodFrom )=right (@myParamYear,4)
and datepart(q,PeriodFrom )=@myParamQuarter

and datepart(YYYY,Periodto )=right (@myParamYear,4)
and datepart(q,Periodto )=@myParamQuarter

ORDER BY CropGroupList.CropGroupListID


END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyWeatherConditionRainfall]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyWeatherConditionRainfall] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)

SELECT     
AVG(ISNULL(WeatherCondition01.NumberOfDays,0)) AS NumberOfDays,
AVG(ISNULL(WeatherCondition01.AmountOfRain,0)) AS AmountOfRain
FROM         
RecordInfo 
INNER JOIN
WeatherCondition01 ON RecordInfo.RecordID = WeatherCondition01.MonthlyRecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyWeatherConditionDisaster]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyWeatherConditionDisaster]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT
WeatherCondition01.Disaster,
--@ParamMonth AS 'Month',
--@Year AS 'Year', 
Areas.Name AS 'WardName'
FROM         
RecordInfo
INNER JOIN
WeatherCondition01 ON RecordInfo.RecordID = WeatherCondition01.MonthlyRecordID
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyWeatherConditionActivities]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyWeatherConditionActivities]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT
WeatherCondition01.Activity,
--@ParamMonth AS 'Month',
--@Year AS 'Year', 
Areas.Name AS 'WardName'
FROM         
RecordInfo
INNER JOIN
WeatherCondition01 ON RecordInfo.RecordID = WeatherCondition01.MonthlyRecordID
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyVisitors]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyVisitors]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT     
CONVERT(VARCHAR(20),PeopleWhoVisitTheVillage01.VisitingDate,103) AS VisitingDate, 
PeopleWhoVisitTheVillage01.NameOfVisitor, 
PeopleWhoVisitTheVillage01.Address, 
PeopleWhoVisitTheVillage01.MainPurposeOfVisit, 
PeopleWhoVisitTheVillage01.InstructionsAdviceProvided, 
Areas.Name
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID 
INNER JOIN
PeopleWhoVisitTheVillage01 ON RecordInfo.RecordID = PeopleWhoVisitTheVillage01.MonthlyRecordID
WHERE FormSerialNumber like @FormSerialNumber 
--GROUP BY 
--Areas.Name,
--PeopleWhoVisitTheVillage01.VisitingDate,
--PeopleWhoVisitTheVillage01.Address,
--PeopleWhoVisitTheVillage01.MainPurposeOfVisit, 
--PeopleWhoVisitTheVillage01.InstructionsAdviceProvided,
--PeopleWhoVisitTheVillage01.NameOfVisitor
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
ORDER BY
PeopleWhoVisitTheVillage01.VisitingDate
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetViungo]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyTargetViungo]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT
CropGroupList.GroupID, 
CropGroupList.CropName, 
SUM(TargetImplementationAndCropPrices01.ExpectedArea) AS ExpectedArea, 
SUM(TargetImplementationAndCropPrices01.ExpectedProd) AS ExpectedProd, 
SUM(TargetImplementationAndCropPrices01.AreaDone) AS AreaDone, 
SUM(TargetImplementationAndCropPrices01.ProdDone) AS ProdDone
FROM         
CropGroupList 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY CropGroupList.GroupID, CropGroupList.CropName
HAVING      (CropGroupList.GroupID = 6)
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetMizizi]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyTargetMizizi]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT
CropGroupList.GroupID, 
CropGroupList.CropName, 
SUM(TargetImplementationAndCropPrices01.ExpectedArea) AS ExpectedArea, 
SUM(TargetImplementationAndCropPrices01.ExpectedProd) AS ExpectedProd, 
SUM(TargetImplementationAndCropPrices01.AreaDone) AS AreaDone, 
SUM(TargetImplementationAndCropPrices01.ProdDone) AS ProdDone
FROM         
CropGroupList 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY CropGroupList.GroupID, CropGroupList.CropName
HAVING      (CropGroupList.GroupID = 2)
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetMengineyo]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyTargetMengineyo]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT
CropGroupList.GroupID, 
CropGroupList.CropName, 
SUM(TargetImplementationAndCropPrices01.ExpectedArea) AS ExpectedArea, 
SUM(TargetImplementationAndCropPrices01.ExpectedProd) AS ExpectedProd, 
SUM(TargetImplementationAndCropPrices01.AreaDone) AS AreaDone, 
SUM(TargetImplementationAndCropPrices01.ProdDone) AS ProdDone
FROM         
CropGroupList 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY CropGroupList.GroupID, CropGroupList.CropName
HAVING      (CropGroupList.GroupID = 10)
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetMbogamboga]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyTargetMbogamboga]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT
CropGroupList.GroupID, 
CropGroupList.CropName, 
SUM(TargetImplementationAndCropPrices01.ExpectedArea) AS ExpectedArea, 
SUM(TargetImplementationAndCropPrices01.ExpectedProd) AS ExpectedProd, 
SUM(TargetImplementationAndCropPrices01.AreaDone) AS AreaDone, 
SUM(TargetImplementationAndCropPrices01.ProdDone) AS ProdDone
FROM         
CropGroupList 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY CropGroupList.GroupID, CropGroupList.CropName
HAVING      (CropGroupList.GroupID = 7)
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetMaua]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyTargetMaua]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT
CropGroupList.GroupID, 
CropGroupList.CropName, 
SUM(TargetImplementationAndCropPrices01.ExpectedArea) AS ExpectedArea, 
SUM(TargetImplementationAndCropPrices01.ExpectedProd) AS ExpectedProd, 
SUM(TargetImplementationAndCropPrices01.AreaDone) AS AreaDone, 
SUM(TargetImplementationAndCropPrices01.ProdDone) AS ProdDone
FROM         
CropGroupList 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY CropGroupList.GroupID, CropGroupList.CropName
HAVING      (CropGroupList.GroupID = 9)
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetMatunda]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyTargetMatunda]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT
CropGroupList.GroupID, 
CropGroupList.CropName, 
SUM(TargetImplementationAndCropPrices01.ExpectedArea) AS ExpectedArea, 
SUM(TargetImplementationAndCropPrices01.ExpectedProd) AS ExpectedProd, 
SUM(TargetImplementationAndCropPrices01.AreaDone) AS AreaDone, 
SUM(TargetImplementationAndCropPrices01.ProdDone) AS ProdDone
FROM         
CropGroupList 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY CropGroupList.GroupID, CropGroupList.CropName
HAVING      (CropGroupList.GroupID = 8)
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetMafuta]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyTargetMafuta]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT
CropGroupList.GroupID, 
CropGroupList.CropName, 
SUM(TargetImplementationAndCropPrices01.ExpectedArea) AS ExpectedArea, 
SUM(TargetImplementationAndCropPrices01.ExpectedProd) AS ExpectedProd, 
SUM(TargetImplementationAndCropPrices01.AreaDone) AS AreaDone, 
SUM(TargetImplementationAndCropPrices01.ProdDone) AS ProdDone
FROM         
CropGroupList 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY CropGroupList.GroupID, CropGroupList.CropName
HAVING      (CropGroupList.GroupID = 4)
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetKunde]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyTargetKunde]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT
CropGroupList.GroupID, 
CropGroupList.CropName, 
SUM(TargetImplementationAndCropPrices01.ExpectedArea) AS ExpectedArea, 
SUM(TargetImplementationAndCropPrices01.ExpectedProd) AS ExpectedProd, 
SUM(TargetImplementationAndCropPrices01.AreaDone) AS AreaDone, 
SUM(TargetImplementationAndCropPrices01.ProdDone) AS ProdDone
FROM         
CropGroupList 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY CropGroupList.GroupID, CropGroupList.CropName
HAVING      (CropGroupList.GroupID = 5)
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetIndustrial]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyTargetIndustrial]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT
CropGroupList.GroupID, 
CropGroupList.CropName, 
SUM(TargetImplementationAndCropPrices01.ExpectedArea) AS ExpectedArea, 
SUM(TargetImplementationAndCropPrices01.ExpectedProd) AS ExpectedProd, 
SUM(TargetImplementationAndCropPrices01.AreaDone) AS AreaDone, 
SUM(TargetImplementationAndCropPrices01.ProdDone) AS ProdDone
FROM         
CropGroupList 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY CropGroupList.GroupID, CropGroupList.CropName
HAVING      (CropGroupList.GroupID = 3)
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTargetCereal]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyTargetCereal]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT
CropGroupList.GroupID, 
CropGroupList.CropName, 
SUM(TargetImplementationAndCropPrices01.ExpectedArea) AS ExpectedArea, 
SUM(TargetImplementationAndCropPrices01.ExpectedProd) AS ExpectedProd, 
SUM(TargetImplementationAndCropPrices01.AreaDone) AS AreaDone, 
SUM(TargetImplementationAndCropPrices01.ProdDone) AS ProdDone
FROM         
CropGroupList 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY CropGroupList.GroupID, CropGroupList.CropName
HAVING      (CropGroupList.GroupID = 1)
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyTarget]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyTarget]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT
CropGroup.GroupName,
CropGroupList.CropGroupListID, 
CropGroupList.GroupID, 
CropGroupList.CropName, 
SUM(TargetImplementationAndCropPrices01.AreaDone) AS AreaDone, 
SUM(TargetImplementationAndCropPrices01.ProdDone) AS ProdDone,
AVG(TargetImplementationAndCropPrices01.Price) AS Price
FROM        
CropGroupList 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID 
INNER JOIN
TargetImplementationAndCropPrices01 ON CropGroupList.CropGroupListID = TargetImplementationAndCropPrices01.CropID 
INNER JOIN
RecordInfo ON TargetImplementationAndCropPrices01.MonthlyRecordID = RecordInfo.RecordID 
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY
CropGroup.GroupName,
CropGroupList.CropGroupListID, 
CropGroupList.GroupID, 
CropGroupList.CropName
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyProdSkin]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyProdSkin]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT     
ProdSkinList.ProdSkinID, 
ProdSkinList.ProdName, 
SUM(ISNULL(ProdSkin01.DrySuspended,0)) AS DrySuspended, 
SUM(ISNULL(ProdSkin01.DrySalted,0)) AS DrySalted, 
SUM(ISNULL(ProdSkin01.WetBlue,0)) AS WetBlue
FROM         
RecordInfo 
INNER JOIN
ProdSkin01 ON RecordInfo.RecordID = ProdSkin01.MonthlyRecordID 
INNER JOIN
ProdSkinList ON ProdSkin01.TypeOfProdID = ProdSkinList.ProdSkinID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY ProdSkinList.ProdSkinID, ProdSkinList.ProdName
ORDER BY ProdSkinList.ProdSkinID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardTVAndRadio]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardTVAndRadio]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     MediaList.MediaListID, MediaList.MediaID, MediaList.MediaName, SUM(ISNULL(TVAndRadioStation03.NumberOfVillagesCovered, 0)) 
                      AS NumberOfVillagesCovered
FROM         RecordInfo INNER JOIN
                      TVAndRadioStation03 ON RecordInfo.RecordID = TVAndRadioStation03.AnnualRecordID INNER JOIN
                      MediaList ON TVAndRadioStation03.StationID = MediaList.MediaListID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE     (RecordInfo.PeriodFrom BETWEEN LEFT(@ParamYear, 4) + '-07-01' AND LEFT(@ParamYear, 4) + '-12-31') OR
--                      (RecordInfo.PeriodTo BETWEEN RIGHT(@ParamYear, 4) + '-01-31' AND RIGHT(@ParamYear, 4) + '-06-30')
GROUP BY MediaList.MediaListID, MediaList.MediaID, MediaList.MediaName
HAVING      (MediaList.MediaID = 1)
ORDER BY MediaList.MediaListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardTelecommunication]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardTelecommunication]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
TelecomCompaList.TelecomCompaListID, 
TelecomCompaList.MediaName, 
SUM(ISNULL(Telecommunication03.NumberOfVillagesCovered,0))
FROM         
RecordInfo 
INNER JOIN
Telecommunication03 ON RecordInfo.RecordID = Telecommunication03.AnnualRecordID 
INNER JOIN
TelecomCompaList ON Telecommunication03.TelecomCompID = TelecomCompaList.TelecomCompaListID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
--OR
--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY TelecomCompaList.TelecomCompaListID, TelecomCompaList.MediaName
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardProcessingMachine]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardProcessingMachine]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
ProcessingMachinesList.ProcessingMachineListID, 
ProcessingMachinesList.MachineName, 
SUM(ISNULL(ProcessingMachines03.WorkingIndividuallyOwned,0)) AS WorkingIndividuallyOwned, 
SUM(ISNULL(ProcessingMachines03.WorkingGroupowned,0)) AS WorkingGroupowned, 
SUM(ISNULL(ProcessingMachines03.NotWorkingIndividuallyOwned,0)) AS NotWorkingIndividuallyOwned, 
SUM(ISNULL(ProcessingMachines03.NotWorkingGroupowned,0)) AS NotWorkingGroupowned 
FROM         
RecordInfo INNER JOIN
ProcessingMachines03 ON RecordInfo.RecordID = ProcessingMachines03.AnnualRecordID 
INNER JOIN
ProcessingMachinesList ON ProcessingMachines03.MachineID = ProcessingMachinesList.ProcessingMachineListID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
--OR
--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY 
ProcessingMachinesList.ProcessingMachineListID, 
ProcessingMachinesList.MachineName
ORDER BY ProcessingMachinesList.ProcessingMachineListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyPlantHealth]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyPlantHealth] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.AffectedArea) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Eneo lililoathiriwa (ha)' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.NumberOfVillageAffected) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Idadi ya vijiji vilivyoathiriwa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.AmountOfPestcideApplied) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Kiasi cha dawa (Kg/Ltr)' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.NumberOfVillagesServed) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Idadi ya vijiji vilivyohudumiwa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.NumberOfHouseHoldServed) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Idadi ya kaya zilizohudumiwa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied

UNION

SELECT  
ChemicalControl01.PestID, 
ChemicalControl01.CropID,
ChemicalControl01.Severity,
SUM(ChemicalControl01.AreaRescued) AS 'Value', 
ChemicalControl01.PestcideApplied,
'Eneo lililookolewa' as 'Data'
FROM
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID 
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
ChemicalControl01.PestID,
ChemicalControl01.CropID,
ChemicalControl01.Severity,
ChemicalControl01.PestcideApplied
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyMedication]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyMedication] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT     
Medication01.LivestockListID, 
Medication01.PestDiseaseListID,
Medication01.TreatmentMedicineApplied,
SUM(Medication01.NumberAffected) AS Value,
'Idadi ya walioathirika' AS Data 
--Areas.Name,  
FROM         
RecordInfo 
INNER JOIN
Medication01 ON RecordInfo.RecordID = Medication01.MonthlyRecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY 
Medication01.LivestockListID,
Medication01.PestDiseaseListID,
--Areas.Name,
Medication01.TreatmentMedicineApplied 

UNION

SELECT     
Medication01.LivestockListID, 
Medication01.PestDiseaseListID, 
Medication01.TreatmentMedicineApplied, 
SUM(Medication01.NumberTreated) AS Value,
'Idadi ya waliotibiwa' AS Data
--Areas.Name, 
FROM         
RecordInfo 
INNER JOIN
Medication01 ON RecordInfo.RecordID = Medication01.MonthlyRecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY 
Medication01.LivestockListID,
Medication01.PestDiseaseListID,
--Areas.Name,
Medication01.TreatmentMedicineApplied 

UNION

SELECT     
Medication01.LivestockListID, 
Medication01.PestDiseaseListID,
Medication01.TreatmentMedicineApplied, 
SUM(Medication01.NumberRecovered) AS Value,
'Idadi ya waliopona' AS Data
--Areas.Name, 
FROM         
RecordInfo 
INNER JOIN
Medication01 ON RecordInfo.RecordID = Medication01.MonthlyRecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY 
Medication01.LivestockListID,
Medication01.PestDiseaseListID,
--Areas.Name,
Medication01.TreatmentMedicineApplied 

UNION

SELECT     
Medication01.LivestockListID, 
Medication01.PestDiseaseListID,
Medication01.TreatmentMedicineApplied,  
SUM(Medication01.NumberDied) AS Value,
'Idadi ya waliokufa' AS Data
--Areas.Name,
FROM         
RecordInfo 
INNER JOIN
Medication01 ON RecordInfo.RecordID = Medication01.MonthlyRecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY 
Medication01.LivestockListID,
Medication01.PestDiseaseListID,
--Areas.Name,
Medication01.TreatmentMedicineApplied 
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyMeatInspection]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyMeatInspection]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT     
MeatInspection01.TypeOfAnimal,  
MeatInspection01.ReasonsForCondemnations,
SUM(ISNULL(MeatInspection01.NumberOfAnimalsAffected,0)) AS Value,
'Idadi ya viungo vilivyotupwa' AS Data
FROM         
RecordInfo 
INNER JOIN
MeatInspection01 ON RecordInfo.RecordID = MeatInspection01.MonthlyRecordID
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
MeatInspection01.TypeOfAnimal,  
MeatInspection01.ReasonsForCondemnations

UNION

SELECT     
MeatInspection01.TypeOfAnimal,  
MeatInspection01.ReasonsForCondemnations,
SUM(ISNULL(MeatInspection01.NumberOfCases,0)) AS Value,
'Idadi ya wanyama walioathirika' AS Data
FROM         
RecordInfo 
INNER JOIN
MeatInspection01 ON RecordInfo.RecordID = MeatInspection01.MonthlyRecordID 
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
MeatInspection01.TypeOfAnimal,  
MeatInspection01.ReasonsForCondemnations
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyLivestockSlaughtered]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyLivestockSlaughtered]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT     
LivestockSlaughList.LivestockListID, 
LivestockSlaughList.LivestockName, 
SUM(ISNULL(LivestockSlaughtered01.TotalNumberSlaughteredThisMonth,0)) AS TotalNumberSlaughteredThisMonth,
AVG(ISNULL(LivestockSlaughtered01.AverageRetailPriceKg,0)) AS AverageRetailPriceKg
FROM         
RecordInfo 
INNER JOIN
LivestockSlaughtered01 ON RecordInfo.RecordID = LivestockSlaughtered01.MonthlyRecordID 
INNER JOIN
LivestockSlaughList ON LivestockSlaughtered01.LivestockID = LivestockSlaughList.LivestockListID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY 
LivestockSlaughList.LivestockListID, 
LivestockSlaughList.LivestockName
ORDER BY LivestockSlaughList.LivestockListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyLivestockServices]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyLivestockServices]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT 
LivestockList.LivestockListID,    
LivestockList.LivestockName, 
SUM(LivestockService01.CuttingHoof) AS CuttingHoof, 
SUM(LivestockService01.Castration) AS Castration, 
SUM(LivestockService01.AI) AS AI, 
SUM(LivestockService01.CuttingHorn) AS CuttingHorn, 
SUM(LivestockService01.Branding) AS Branding, 
SUM(LivestockService01.CuttingTail) AS CuttingTail, 
SUM(LivestockService01.CuttingTeeth) AS CuttingTeeth, 
SUM(LivestockService01.CuttingBillBeak) AS CuttingBillBeak 
FROM         
RecordInfo 
INNER JOIN
LivestockService01 ON RecordInfo.RecordID = LivestockService01.MonthlyRecordID 
INNER JOIN
LivestockList ON LivestockService01.LivestockID = LivestockList.LivestockListID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY LivestockList.LivestockListID,LivestockList.LivestockName
ORDER BY LivestockList.LivestockListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyDipping]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyDipping]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT 
DippingSprayingVaccination01.LivestockListID, 
DippingSprayingVaccination01.DippingMedicineApplied,
DippingSprayingVaccination01.SprayMedicineApplied,
DippingSprayingVaccination01.VaccineApplied,
SUM(ISNULL(DippingSprayingVaccination01.NumberDipped,0)) AS Value, 
'Idadi ya walioogeshwa' AS Data
--Areas.Name, 
FROM         
RecordInfo 
INNER JOIN
DippingSprayingVaccination01 ON RecordInfo.RecordID = DippingSprayingVaccination01.MonthlyRecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY 
DippingSprayingVaccination01.LivestockListID, 
DippingSprayingVaccination01.DippingMedicineApplied,
DippingSprayingVaccination01.SprayMedicineApplied,
DippingSprayingVaccination01.VaccineApplied

UNION

SELECT 
DippingSprayingVaccination01.LivestockListID, 
DippingSprayingVaccination01.DippingMedicineApplied,
DippingSprayingVaccination01.SprayMedicineApplied,
DippingSprayingVaccination01.VaccineApplied,
SUM(ISNULL(DippingSprayingVaccination01.NumberSprayed,0)) AS Value, 
'Idadi ya walionyunyiziwa' AS Data
--Areas.Name, 
FROM         
RecordInfo 
INNER JOIN
DippingSprayingVaccination01 ON RecordInfo.RecordID = DippingSprayingVaccination01.MonthlyRecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY 
DippingSprayingVaccination01.LivestockListID, 
DippingSprayingVaccination01.DippingMedicineApplied,
DippingSprayingVaccination01.SprayMedicineApplied,
DippingSprayingVaccination01.VaccineApplied

UNION

SELECT 
DippingSprayingVaccination01.LivestockListID, 
DippingSprayingVaccination01.DippingMedicineApplied,
DippingSprayingVaccination01.SprayMedicineApplied,
DippingSprayingVaccination01.VaccineApplied,
SUM(ISNULL(DippingSprayingVaccination01.NumberVaccinated,0)) AS Value, 
'Idadi ya waliochanjwa' AS Data
--Areas.Name, 
FROM         
RecordInfo 
INNER JOIN
DippingSprayingVaccination01 ON RecordInfo.RecordID = DippingSprayingVaccination01.MonthlyRecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY 
DippingSprayingVaccination01.LivestockListID, 
DippingSprayingVaccination01.DippingMedicineApplied,
DippingSprayingVaccination01.SprayMedicineApplied,
DippingSprayingVaccination01.VaccineApplied
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspMonthlyCommentsOfVillageOfficer]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspMonthlyCommentsOfVillageOfficer]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9),
--@ParamMonth int
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
--DECLARE @Year nvarchar(4)
--DECLARE @Month int

--if @ParamMonth < 7
--set @Year=RIGHT(@ParamYear,4)
--else
--set @Year=LEFT(@ParamYear,4)
SELECT     
CommentsOfVillageOfficer01.Achievement, 
CommentsOfVillageOfficer01.Challenges, 
Areas.Name
FROM         
RecordInfo 
INNER JOIN
CommentsOfVillageOfficer01 ON RecordInfo.RecordID = CommentsOfVillageOfficer01.MonthlyRecordID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--(@Year=DATEPART(YY,RecordInfo.PeriodFrom)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodFrom))
--OR
--(@Year=DATEPART(YY,RecordInfo.PeriodTo)
--AND
--@ParamMonth=DATEPART(MM,RecordInfo.PeriodTo))
GROUP BY Areas.Name,CommentsOfVillageOfficer01.Achievement, CommentsOfVillageOfficer01.Challenges
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardMachines]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardMachines]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
MachineryList.MachineryListID, 
MachineryList.MachineryName, 
SUM(ISNULL(Machines03.WorkingIndividuallyOwned,0)) AS WorkingIndividuallyOwned, 
SUM(ISNULL(Machines03.WorkingGroupOwned,0)) AS WorkingGroupOwned, 
SUM(ISNULL(Machines03.NotWorkingIndividuallyOwned,0))AS NotWorkingIndividuallyOwned, 
SUM(ISNULL(Machines03.NotWorkingGroupowned,0)) AS NotWorkingGroupowned 
FROM         
RecordInfo 
INNER JOIN
Machines03 ON RecordInfo.RecordID = Machines03.AnnualRecordID 
INNER JOIN
MachineryList ON Machines03.MachineryID = MachineryList.MachineryListID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
--OR
--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY 
MachineryList.MachineryListID, 
MachineryList.MachineryName
ORDER BY MachineryList.MachineryListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardMachineryDrawn]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardMachineryDrawn]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
DrawnList.DrawnListID, 
DrawnList.DrawnName, 
SUM(ISNULL(MachineryDrawn03.WorkingIndividuallyOwned,0)) AS WorkingIndividuallyOwned, 
SUM(ISNULL(MachineryDrawn03.WorkingGroupowned,0)) AS WorkingGroupowned
FROM         
RecordInfo 
INNER JOIN
MachineryDrawn03 ON RecordInfo.RecordID = MachineryDrawn03.AnnualRecordID 
INNER JOIN
DrawnList ON MachineryDrawn03.DrawnID = DrawnList.DrawnListID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
--OR
--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY DrawnList.DrawnListID, DrawnList.DrawnName
ORDER BY DrawnList.DrawnListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardLivestockPopulation]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardLivestockPopulation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
AnimalsGroup.GroupID, 
AnimalsGroup.GroupName, 
AnimalsList.AnimalListID, 
AnimalsList.GroupID AS Expr1, 
AnimalsList.AnimalName, 
SUM(ISNULL(Livestock03.NumberOfIndigenous,0)) AS NumberOfIndigenous,
SUM(ISNULL(Livestock03.NumberOfImprovedMeat,0)) AS NumberOfImprovedMeat, 
SUM(ISNULL(Livestock03.NumberOfImprovedDairy,0)) AS NumberOfImprovedDairy, 
SUM(ISNULL(Livestock03.TotalRegistered,0)) AS TotalRegistered 
FROM         
RecordInfo 
INNER JOIN
Livestock03 ON RecordInfo.RecordID = Livestock03.AnnualRecordID 
INNER JOIN
AnimalsList ON Livestock03.AnimalID = AnimalsList.AnimalListID 
INNER JOIN
AnimalsGroup ON AnimalsList.GroupID = AnimalsGroup.GroupID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE     
--(RecordInfo.PeriodFrom BETWEEN LEFT(@ParamYear, 4) + '-07-01' AND LEFT(@ParamYear, 4) + '-12-31') 
--OR
--(RecordInfo.PeriodTo BETWEEN RIGHT(@ParamYear, 4) + '-01-31' AND RIGHT(@ParamYear, 4) + '-06-30')
GROUP BY 
AnimalsGroup.GroupID, 
AnimalsGroup.GroupName, 
AnimalsList.AnimalListID, 
AnimalsList.GroupID, 
AnimalsList.AnimalName
ORDER BY AnimalsGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardLivestockInfrastructure]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardLivestockInfrastructure]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
InfraList.InfraListID, 
InfraList.InfraName, 
SUM(ISNULL(LivestockInfrastructure03.Working,0)) AS Working,
SUM(ISNULL(LivestockInfrastructure03.NotWorking,0)) AS NotWorking, 
SUM(ISNULL(LivestockInfrastructure03.NumberRequired,0)) AS NumberRequired, 
SUM(ISNULL(LivestockInfrastructure03.NumberOfRegistered,0)) AS NumberOfRegistered
FROM         
RecordInfo 
INNER JOIN
LivestockInfrastructure03 ON RecordInfo.RecordID = LivestockInfrastructure03.AnnualRecordID 
INNER JOIN
InfraList ON LivestockInfrastructure03.InfraID = InfraList.InfraListID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
--OR
--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY InfraList.InfraListID, InfraList.InfraName 
ORDER BY InfraList.InfraListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardIrrigationScheme]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardIrrigationScheme]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT     
SchemeGroup.GroupID, 
SchemeGroup.GroupName, 
IrrigationScheme03.SchemeName, 
IrrigationScheme03.NameOfWaterSource, 
SUM(IrrigationScheme03.PotentialArea) AS PotentialArea, 
SUM(IrrigationScheme03.AreaUnderImprovedIrrigation) AS AreaUnderImprovedIrrigation, 
IrrigationScheme03.Seasonirrigated, 
IrrigationScheme03.StatusOfScheme, 
SUM(IrrigationScheme03.NumberOfMembersInIrrigationSchemeMale) AS NumberOfMembersInIrrigationSchemeMale, 
SUM(IrrigationScheme03.NumberOfMembersInIrrigationSchemeFemale) AS NumberOfMembersInIrrigationSchemeFemale, 
SUM(IrrigationScheme03.NumberOfFarmersUsingInfrastructureMale) AS NumberOfFarmersUsingInfrastructureMale, 
SUM(IrrigationScheme03.NumberOfFarmersUsingInfrastructureFemale) AS NumberOfFarmersUsingInfrastructureFemale
FROM         
RecordInfo 
INNER JOIN
IrrigationScheme03 ON RecordInfo.RecordID = IrrigationScheme03.AnnualRecordID 
INNER JOIN
SchemeGroup ON IrrigationScheme03.SchemeID = SchemeGroup.GroupID
WHERE
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
AND
IrrigationScheme03.SchemeName IS NOT NULL
GROUP BY
SchemeGroup.GroupID, 
SchemeGroup.GroupName, 
IrrigationScheme03.SchemeName, 
IrrigationScheme03.NameOfWaterSource, 
IrrigationScheme03.Seasonirrigated, 
IrrigationScheme03.StatusOfScheme
ORDER BY SchemeGroup.GroupID
	
--SELECT     
--SchemeGroup.GroupID, 
--SchemeGroup.GroupName, 
--IrrigationScheme03.SchemeName, 
--IrrigationScheme03.NameOfWaterSource, 
--SUM(ISNULL(IrrigationScheme03.PotentialArea,0)) AS PotentialArea, 
--SUM(ISNULL(IrrigationScheme03.AreaUnderImprovedIrrigation,0)) AS AreaUnderImprovedIrrigation,
--SUM(ISNULL(IrrigationScheme03.NumberOfMembersInIrrigationSchemeMale,0)) AS Value,
--IrrigationScheme03.Seasonirrigated, 
--IrrigationScheme03.StatusOfScheme,
--'Idadi ya wanachama katika chama cha wamwagiliaji (IO)' AS Header1,
--'Wanaume' AS Header2
--FROM         
--RecordInfo 
--INNER JOIN
--IrrigationScheme03 ON RecordInfo.RecordID = IrrigationScheme03.AnnualRecordID 
--INNER JOIN
--SchemeGroup ON IrrigationScheme03.SchemeID = SchemeGroup.GroupID
--WHERE FormSerialNumber like @FormSerialNumber 
----WHERE
----RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
----OR
----RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
--GROUP BY 
--SchemeGroup.GroupID, 
--SchemeGroup.GroupName, 
--IrrigationScheme03.SchemeName, 
--IrrigationScheme03.NameOfWaterSource, 
--IrrigationScheme03.Seasonirrigated, 
--IrrigationScheme03.StatusOfScheme

--UNION

--SELECT     
--SchemeGroup.GroupID, 
--SchemeGroup.GroupName, 
--IrrigationScheme03.SchemeName, 
--IrrigationScheme03.NameOfWaterSource, 
--SUM(ISNULL(IrrigationScheme03.PotentialArea,0)) AS PotentialArea, 
--SUM(ISNULL(IrrigationScheme03.AreaUnderImprovedIrrigation,0)) AS AreaUnderImprovedIrrigation,
--SUM(ISNULL(IrrigationScheme03.NumberOfMembersInIrrigationSchemeFemale,0)) AS Value,
--IrrigationScheme03.Seasonirrigated, 
--IrrigationScheme03.StatusOfScheme,
--'Idadi ya wanachama katika chama cha wamwagiliaji (IO)' AS Header1,
--'Wanawake' AS Header2
--FROM         
--RecordInfo 
--INNER JOIN
--IrrigationScheme03 ON RecordInfo.RecordID = IrrigationScheme03.AnnualRecordID 
--INNER JOIN
--SchemeGroup ON IrrigationScheme03.SchemeID = SchemeGroup.GroupID
--WHERE FormSerialNumber like @FormSerialNumber 
----WHERE
----RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
----OR
----RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
--GROUP BY 
--SchemeGroup.GroupID, 
--SchemeGroup.GroupName, 
--IrrigationScheme03.SchemeName, 
--IrrigationScheme03.NameOfWaterSource, 
--IrrigationScheme03.Seasonirrigated, 
--IrrigationScheme03.StatusOfScheme

--UNION

--SELECT     
--SchemeGroup.GroupID, 
--SchemeGroup.GroupName, 
--IrrigationScheme03.SchemeName, 
--IrrigationScheme03.NameOfWaterSource, 
--SUM(ISNULL(IrrigationScheme03.PotentialArea,0)) AS PotentialArea, 
--SUM(ISNULL(IrrigationScheme03.AreaUnderImprovedIrrigation,0)) AS AreaUnderImprovedIrrigation,
--SUM(ISNULL(IrrigationScheme03.NumberOfFarmersUsingInfrastructureMale,0)) AS Value,
--IrrigationScheme03.Seasonirrigated, 
--IrrigationScheme03.StatusOfScheme,
--'Idadi ya wamwagiliaji (wanachama na wasiowanachama)' AS Header1,
--'Wanaume' AS Header2
--FROM         
--RecordInfo 
--INNER JOIN
--IrrigationScheme03 ON RecordInfo.RecordID = IrrigationScheme03.AnnualRecordID 
--INNER JOIN
--SchemeGroup ON IrrigationScheme03.SchemeID = SchemeGroup.GroupID
--WHERE FormSerialNumber like @FormSerialNumber 
----WHERE
----RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
----OR
----RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
--GROUP BY 
--SchemeGroup.GroupID, 
--SchemeGroup.GroupName, 
--IrrigationScheme03.SchemeName, 
--IrrigationScheme03.NameOfWaterSource, 
--IrrigationScheme03.Seasonirrigated, 
--IrrigationScheme03.StatusOfScheme

--UNION

--SELECT     
--SchemeGroup.GroupID, 
--SchemeGroup.GroupName, 
--IrrigationScheme03.SchemeName, 
--IrrigationScheme03.NameOfWaterSource, 
--SUM(ISNULL(IrrigationScheme03.PotentialArea,0)) AS PotentialArea, 
--SUM(ISNULL(IrrigationScheme03.AreaUnderImprovedIrrigation,0)) AS AreaUnderImprovedIrrigation,
--SUM(ISNULL(IrrigationScheme03.NumberOfFarmersUsingInfrastructureFemale,0)) AS Value,
--IrrigationScheme03.Seasonirrigated, 
--IrrigationScheme03.StatusOfScheme,
--'Idadi ya wamwagiliaji (wanachama na wasiowanachama)' AS Header1,
--'Wanawake' AS Header2
--FROM         
--RecordInfo 
--INNER JOIN
--IrrigationScheme03 ON RecordInfo.RecordID = IrrigationScheme03.AnnualRecordID 
--INNER JOIN
--SchemeGroup ON IrrigationScheme03.SchemeID = SchemeGroup.GroupID
--WHERE FormSerialNumber like @FormSerialNumber 
----WHERE
----RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
----OR
----RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
--GROUP BY 
--SchemeGroup.GroupID, 
--SchemeGroup.GroupName, 
--IrrigationScheme03.SchemeName, 
--IrrigationScheme03.NameOfWaterSource, 
--IrrigationScheme03.Seasonirrigated, 
--IrrigationScheme03.StatusOfScheme

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardImprovedSeedsOthers]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardImprovedSeedsOthers]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
SeedGroup.GroupID, 
SeedGroup.GroupName,
ImprovedSeeds03.CropNameOthers, 
SUM(ISNULL(ImprovedSeeds03.AnnualRequirementForTheReportingYear, 0)) AS AnnualRequirementForTheReportingYear,
ImprovedSeeds03.NameOfImprovedVariety,
SUM(ISNULL(ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed,0)) AS AmountUsedInTheReportingYearQualityDeclareSeed,
SUM(ISNULL(ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed, 0)) AS AmountUsedInTheReportingYearCertifiedSeed
FROM         
RecordInfo 
INNER JOIN
ImprovedSeeds03 ON RecordInfo.RecordID = ImprovedSeeds03.AnnualRecordID 
INNER JOIN
SeedGroup ON ImprovedSeeds03.CropID = SeedGroup.GroupID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--AND     
--((RecordInfo.PeriodFrom BETWEEN LEFT(@ParamYear, 4) + '-07-01' AND LEFT(@ParamYear, 4) + '-12-31') 
--OR
--(RecordInfo.PeriodTo BETWEEN RIGHT(@ParamYear, 4) + '-01-31' AND RIGHT(@ParamYear, 4) + '-06-30'))
AND
SeedGroup.GroupID = 7
AND
ImprovedSeeds03.CropNameOthers IS NOT NULL
GROUP BY 
SeedGroup.GroupID, 
SeedGroup.GroupName, 
ImprovedSeeds03.CropNameOthers,
ImprovedSeeds03.NameOfImprovedVariety
----Areas.Name

--UNION

--SELECT     
--SeedGroup.GroupID, 
--SeedGroup.GroupName, 
--SUM(ISNULL(ImprovedSeeds03.AnnualRequirementForTheReportingYear, 0)) AS AnnualRequirementForTheReportingYear,
--ImprovedSeeds03.NameOfImprovedVariety,
----Areas.Name,
--SUM(ISNULL(ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed,0)) AS Value,
--'Matumizi kwa mwaka (kg)' AS Header1,
--'Mbegu zenye ubora uliothibitishwa (Certified seed)' AS Header2
--FROM         
--RecordInfo 
--INNER JOIN
--ImprovedSeeds03 ON RecordInfo.RecordID = ImprovedSeeds03.AnnualRecordID 
--INNER JOIN
--SeedGroup ON ImprovedSeeds03.CropID = SeedGroup.GroupID 
--INNER JOIN
--Areas ON RecordInfo.AreaID = Areas.ID
--WHERE FormSerialNumber like @FormSerialNumber
--AND  
----((RecordInfo.PeriodFrom BETWEEN LEFT(@ParamYear, 4) + '-07-01' AND LEFT(@ParamYear, 4) + '-12-31') 
----OR
----(RecordInfo.PeriodTo BETWEEN RIGHT(@ParamYear, 4) + '-01-31' AND RIGHT(@ParamYear, 4) + '-06-30'))
----AND
--SeedGroup.GroupID<>7
--AND
--ImprovedSeeds03.NameOfImprovedVariety IS NOT NULL
--GROUP BY 
--SeedGroup.GroupID, 
--SeedGroup.GroupName, 
--ImprovedSeeds03.NameOfImprovedVariety
----Areas.Name
--ORDER BY SeedGroup.GroupID
	
--SELECT     
--SeedGroup.GroupID, 
--SeedGroup.GroupName, 
--SUM(ISNULL(ImprovedSeeds03.AnnualRequirementForTheReportingYear, 0)) AS AnnualRequirementForTheReportingYear,
--ImprovedSeeds03.CropNameOthers,
--ImprovedSeeds03.NameOfImprovedVariety,
----Areas.Name,
--SUM(ISNULL(ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed,0)) AS Value,
--'Matumizi kwa mwaka (kg)' AS Header1,
--'Mbegu zenye ubora unaotambulika (Quality Declared Seed)' AS Header2
--FROM         
--RecordInfo 
--INNER JOIN
--ImprovedSeeds03 ON RecordInfo.RecordID = ImprovedSeeds03.AnnualRecordID 
--INNER JOIN
--SeedGroup ON ImprovedSeeds03.CropID = SeedGroup.GroupID 
--INNER JOIN
--Areas ON RecordInfo.AreaID = Areas.ID
--WHERE FormSerialNumber like @FormSerialNumber 
--AND    
----((RecordInfo.PeriodFrom BETWEEN LEFT(@ParamYear, 4) + '-07-01' AND LEFT(@ParamYear, 4) + '-12-31') 
----OR
----(RecordInfo.PeriodTo BETWEEN RIGHT(@ParamYear, 4) + '-01-31' AND RIGHT(@ParamYear, 4) + '-06-30'))
----AND
--SeedGroup.GroupID=7
--GROUP BY 
--SeedGroup.GroupID, 
--SeedGroup.GroupName, 
--ImprovedSeeds03.CropNameOthers,
--ImprovedSeeds03.NameOfImprovedVariety
----Areas.Name

--UNION

--SELECT     
--SeedGroup.GroupID, 
--SeedGroup.GroupName, 
--SUM(ISNULL(ImprovedSeeds03.AnnualRequirementForTheReportingYear, 0)) AS AnnualRequirementForTheReportingYear,
--ImprovedSeeds03.CropNameOthers,
--ImprovedSeeds03.NameOfImprovedVariety,
----Areas.Name,
--SUM(ISNULL(ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed,0)) AS Value,
--'Matumizi kwa mwaka (kg)' AS Header1,
--'Mbegu zenye ubora uliothibitishwa (Certified seed)' AS Header2
--FROM         
--RecordInfo 
--INNER JOIN
--ImprovedSeeds03 ON RecordInfo.RecordID = ImprovedSeeds03.AnnualRecordID 
--INNER JOIN
--SeedGroup ON ImprovedSeeds03.CropID = SeedGroup.GroupID 
--INNER JOIN
--Areas ON RecordInfo.AreaID = Areas.ID
--WHERE FormSerialNumber like @FormSerialNumber 
--AND   
----((RecordInfo.PeriodFrom BETWEEN LEFT(@ParamYear, 4) + '-07-01' AND LEFT(@ParamYear, 4) + '-12-31') 
----OR
----(RecordInfo.PeriodTo BETWEEN RIGHT(@ParamYear, 4) + '-01-31' AND RIGHT(@ParamYear, 4) + '-06-30'))
----AND
--SeedGroup.GroupID=7
--GROUP BY 
--SeedGroup.GroupID, 
--SeedGroup.GroupName, 
--ImprovedSeeds03.CropNameOthers,
--ImprovedSeeds03.NameOfImprovedVariety
----Areas.Name
--ORDER BY SeedGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardImprovedSeeds]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardImprovedSeeds]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
SeedGroup.GroupID, 
SeedGroup.GroupName, 
SUM(ISNULL(ImprovedSeeds03.AnnualRequirementForTheReportingYear, 0)) AS AnnualRequirementForTheReportingYear,
ImprovedSeeds03.NameOfImprovedVariety,
SUM(ISNULL(ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed,0)) AS AmountUsedInTheReportingYearQualityDeclareSeed,
SUM(ISNULL(ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed, 0)) AS AmountUsedInTheReportingYearCertifiedSeed
FROM         
RecordInfo 
INNER JOIN
ImprovedSeeds03 ON RecordInfo.RecordID = ImprovedSeeds03.AnnualRecordID 
INNER JOIN
SeedGroup ON ImprovedSeeds03.CropID = SeedGroup.GroupID 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID
WHERE FormSerialNumber like @FormSerialNumber 
--AND     
--((RecordInfo.PeriodFrom BETWEEN LEFT(@ParamYear, 4) + '-07-01' AND LEFT(@ParamYear, 4) + '-12-31') 
--OR
--(RecordInfo.PeriodTo BETWEEN RIGHT(@ParamYear, 4) + '-01-31' AND RIGHT(@ParamYear, 4) + '-06-30'))
AND
SeedGroup.GroupID<>7
AND
ImprovedSeeds03.NameOfImprovedVariety IS NOT NULL
GROUP BY 
SeedGroup.GroupID, 
SeedGroup.GroupName, 
ImprovedSeeds03.NameOfImprovedVariety
----Areas.Name

--UNION

--SELECT     
--SeedGroup.GroupID, 
--SeedGroup.GroupName, 
--SUM(ISNULL(ImprovedSeeds03.AnnualRequirementForTheReportingYear, 0)) AS AnnualRequirementForTheReportingYear,
--ImprovedSeeds03.NameOfImprovedVariety,
----Areas.Name,
--SUM(ISNULL(ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed,0)) AS Value,
--'Matumizi kwa mwaka (kg)' AS Header1,
--'Mbegu zenye ubora uliothibitishwa (Certified seed)' AS Header2
--FROM         
--RecordInfo 
--INNER JOIN
--ImprovedSeeds03 ON RecordInfo.RecordID = ImprovedSeeds03.AnnualRecordID 
--INNER JOIN
--SeedGroup ON ImprovedSeeds03.CropID = SeedGroup.GroupID 
--INNER JOIN
--Areas ON RecordInfo.AreaID = Areas.ID
--WHERE FormSerialNumber like @FormSerialNumber
--AND  
----((RecordInfo.PeriodFrom BETWEEN LEFT(@ParamYear, 4) + '-07-01' AND LEFT(@ParamYear, 4) + '-12-31') 
----OR
----(RecordInfo.PeriodTo BETWEEN RIGHT(@ParamYear, 4) + '-01-31' AND RIGHT(@ParamYear, 4) + '-06-30'))
----AND
--SeedGroup.GroupID<>7
--AND
--ImprovedSeeds03.NameOfImprovedVariety IS NOT NULL
--GROUP BY 
--SeedGroup.GroupID, 
--SeedGroup.GroupName, 
--ImprovedSeeds03.NameOfImprovedVariety
----Areas.Name
--ORDER BY SeedGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardImprovedPasture]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardImprovedPasture]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
SUM(ISNULL(ImprovedPasture03.NumberOfFarms,0)) AS NumberOfFarms, 
SUM(ISNULL(ImprovedPasture03.Area,0)) AS Area, 
SUM(ISNULL(ImprovedPasture03.SeedProduction,0)) AS SeedProduction, 
SUM(ISNULL(ImprovedPasture03.AmountOfHayBales,0)) AS AmountOfHayBales
FROM         
RecordInfo 
INNER JOIN
ImprovedPasture03 ON RecordInfo.RecordID = ImprovedPasture03.AnnualRecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
--OR
--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardImplements]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardImplements]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
ImplementsList.ImplementsListID, 
ImplementsList.ImplementNameEn, 
ImplementsList.ImplementNameSw,
SUM(ISNULL(HandOperatedImplements03.NumberOfImplements,0)) AS NumberOfImplements
FROM         
RecordInfo 
INNER JOIN
HandOperatedImplements03 ON RecordInfo.RecordID = HandOperatedImplements03.AnnualRecordID 
INNER JOIN
ImplementsList ON HandOperatedImplements03.ImplementID = ImplementsList.ImplementsListID
WHERE FormSerialNumber like @FormSerialNumber 
GROUP BY 
ImplementsList.ImplementsListID, 
ImplementsList.ImplementNameEn,
ImplementsList.ImplementNameSw
ORDER BY ImplementsList.ImplementsListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardGrazingLand]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardGrazingLand]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
AnimalsGrazedList.AnimalsListID, 
AnimalsGrazedList.AnimalName, 
SUM(ISNULL(GrazingLand03.NumberOfAnimals,0)) AS NumberOfAnimals, 
SUM(ISNULL(GrazingLand03.TotalGrazingLandInTheVillage,0)) AS TotalGrazingLandInTheVillage, 
SUM(ISNULL(GrazingLand03.UtilizedLand,0)) AS UtilizedLand, 
SUM(ISNULL(GrazingLand03.TotalDemarcatedLand,0)) AS TotalDemarcatedLand, 
SUM(ISNULL(GrazingLand03.TotalAreaLeased,0)) AS TotalAreaLeased 
FROM         
RecordInfo 
INNER JOIN
GrazingLand03 ON RecordInfo.RecordID = GrazingLand03.AnnualRecordID 
INNER JOIN
AnimalsGrazedList ON GrazingLand03.LivestockID = AnimalsGrazedList.AnimalsListID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
--OR
--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY AnimalsGrazedList.AnimalsListID, AnimalsGrazedList.AnimalName
ORDER BY AnimalsGrazedList.AnimalsListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardFFS]    Script Date: 05/06/2013 17:36:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardFFS]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool03.FieldActivity, 
SUM(ISNULL(FarmersFieldSchool03.NumberOfFieldSchool,0)) AS NumberOfFieldSchool, 
SUM(ISNULL(FarmersFieldSchool03.NumberOfFarmersStartedMale,0)) AS NumberOfFarmersStartedMale,
SUM(ISNULL(FarmersFieldSchool03.NumberOfFarmersStartedFemale,0)) AS NumberOfFarmersStartedFemale, 
AVG(ISNULL(FarmersFieldSchool03.AverageDuration,0)) AS AverageDuration, 
SUM(ISNULL(FarmersFieldSchool03.NumberOfFarmersCompletedMale,0)) AS NumberOfFarmersCompletedMale, 
SUM(ISNULL(FarmersFieldSchool03.NumberOfFarmersCompletedFemale,0)) AS NumberOfFarmersCompletedFemale, 
SUM(ISNULL(FarmersFieldSchool03.NumberOfVillagesCovered,0)) AS NumberOfVillagesCovered,
SUM(ISNULL(FarmersFieldSchool03.NumberOfFarmersWhoAppliedTheTechniquesLearned,0)) AS NumberOfFarmersWhoAppliedTheTechniquesLearned
FROM         
RecordInfo 
INNER JOIN
FarmersFieldSchool03 ON RecordInfo.RecordID = FarmersFieldSchool03.AnnualRecordID 
INNER JOIN
FFSGroup ON FarmersFieldSchool03.FieldID = FFSGroup.GroupID
WHERE 
FormSerialNumber like @FormSerialNumber 
AND
FarmersFieldSchool03.FieldActivity IS NOT NULL
GROUP BY 
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool03.FieldActivity
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardCropResidue]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardCropResidue]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CropResidue03.TypeOfCrop, 
SUM(ISNULL(CropResidue03.AmountOfHayBales,0)) AS AmountOfHayBales,
SUM(ISNULL(CropResidue03.AreaOfFarmsPlotsGazedinSitu,0)) AS AreaOfFarmsPlotsGazedinSitu
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID 
INNER JOIN
CropResidue03 ON RecordInfo.RecordID = CropResidue03.AnnualRecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE     
--((RecordInfo.PeriodFrom BETWEEN LEFT(@ParamYear, 4) + '-07-01' AND LEFT(@ParamYear, 4) + '-12-31') 
--OR
--(RecordInfo.PeriodTo BETWEEN RIGHT(@ParamYear, 4) + '-01-31' AND RIGHT(@ParamYear, 4) + '-06-30'))
GROUP BY 
CropResidue03.TypeOfCrop

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardContractFarming]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardContractFarming]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT 
Group2D.GroupID,    
Group2D.GroupName, 
SUM(ISNULL(ContractFarming03.ContractNumberOfHouseholdInvolved,0)) AS ContractNumberOfHouseholdInvolved, 
SUM(ISNULL(ContractFarming03.ContractNumberOfContractorsInvolved,0)) AS ContractNumberOfContractorsInvolved,
SUM(ISNULL(ContractFarming03.OutgrowersNumberOfHouseholdInvolved,0)) AS OutgrowersNumberOfHouseholdInvolved, 
SUM(ISNULL(ContractFarming03.OutgrowersNumberOfContractorsInvolved,0)) AS OutgrowersNumberOfContractorsInvolved
FROM       
RecordInfo 
INNER JOIN
ContractFarming03 ON RecordInfo.RecordID = ContractFarming03.AnnualRecordID 
INNER JOIN
Group2D ON ContractFarming03.ActivityID = Group2D.GroupID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
--OR
--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY Group2D.GroupID,Group2D.GroupName
ORDER BY Group2D.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardBasicInformation]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardBasicInformation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
SUM(ISNULL(BasicInformation03.MaleHeadedHousehold,0)) AS MaleHeadedHousehold, 
SUM(ISNULL(BasicInformation03.FemaleHeadedHousehold,0)) AS FemaleHeadedHousehold, 
SUM(ISNULL(BasicInformation03.NumberOfHouseholdEngagingInAgriculture,0)) AS NumberOfHouseholdEngagingInAgriculture, 
SUM(ISNULL(BasicInformation03.PopulationMale,0)) AS PopulationMale, 
SUM(ISNULL(BasicInformation03.PopulationFemale,0)) AS PopulationFemale, 
SUM(ISNULL(BasicInformation03.PopulationEngagingInAgriculture,0)) AS PopulationEngagingInAgriculture
FROM         
RecordInfo 
INNER JOIN
BasicInformation03 ON RecordInfo.RecordID = BasicInformation03.AnnualRecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
--OR
--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualWardAnimalDrawn]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualWardAnimalDrawn]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
DrawnList.DrawnListID, 
DrawnList.DrawnName, 
SUM(ISNULL(AnimalDrawn03.WorkingIndividuallyOwned,0)) AS WorkingIndividuallyOwned, 
SUM(ISNULL(AnimalDrawn03.WorkingGroupowned,0)) AS WorkingGroupowned
FROM         
RecordInfo 
INNER JOIN
AnimalDrawn03 ON RecordInfo.RecordID = AnimalDrawn03.AnnualRecordID 
INNER JOIN
DrawnList ON AnimalDrawn03.DrawnID = DrawnList.DrawnListID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE
--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
--OR
--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY DrawnList.DrawnListID, DrawnList.DrawnName
ORDER BY DrawnList.DrawnListID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualTVAndRadioStation]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualTVAndRadioStation] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
MediaList.MediaListID,
MediaList.MediaID, 
MediaList.MediaName, 
SUM(TVAndRadioStation03.NumberOfVillagesCovered) AS NumberOfVillagesCovered
FROM         
MediaGroup 
INNER JOIN
MediaList ON MediaGroup.MediaGroupID = MediaList.MediaID 
INNER JOIN
TVAndRadioStation03 ON MediaList.MediaListID = TVAndRadioStation03.StationID 
INNER JOIN
RecordInfo ON TVAndRadioStation03.AnnualRecordID = RecordInfo.RecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'

GROUP BY MediaList.MediaListID,MediaList.MediaID, MediaList.MediaName
ORDER BY MediaList.MediaListID

                      
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualTelecommunication]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualTelecommunication] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
TelecomCompaList.TelecomCompaListID, 
TelecomCompaList.MediaName, 
SUM(Telecommunication03.NumberOfVillagesCovered) AS NumberOfVillagesCovered
FROM         
TelecomCompaList 
INNER JOIN
Telecommunication03 ON TelecomCompaList.TelecomCompaListID = Telecommunication03.TelecomCompID 
INNER JOIN
RecordInfo ON Telecommunication03.AnnualRecordID = RecordInfo.RecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY TelecomCompaList.TelecomCompaListID, TelecomCompaList.MediaName
ORDER BY TelecomCompaList.TelecomCompaListID
                      
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualSaccos]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualSaccos]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
sum(CoopSaccos02.NumberOfSaccoss) as NumberOfSaccoss, 
sum(CoopSaccos02.MembersMale) as MembersMale, 
sum(CoopSaccos02.MembersFemale) as MembersFemale, 
sum(CoopSaccos02.MembersGroups) as MembersGroups, 
sum(CoopSaccos02.LoanCrop) as LoanCrop, 
sum(CoopSaccos02.LoanLivestock) as LoanLivestock, 
sum(CoopSaccos02.LoanFishery) as LoanFishery, 
sum(CoopSaccos02.LoanMarketing) as LoanMarketing
FROM         
CoopSaccos02 
INNER JOIN
RecordInfo ON CoopSaccos02.RecordID = RecordInfo.RecordID
WHERE FormSerialNumberIA like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualProcessingMachines]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualProcessingMachines]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
ProcessingMachinesList.ProcessingMachineListID, 
ProcessingMachinesList.MachineName, 
SUM(ProcessingMachines03.WorkingIndividuallyOwned) AS WorkingIndividuallyOwned, 
SUM(ProcessingMachines03.WorkingGroupowned) AS WorkingGroupowned, 
SUM(ProcessingMachines03.NotWorkingIndividuallyOwned) AS NotWorkingIndividuallyOwned, 
SUM(ProcessingMachines03.NotWorkingGroupowned) AS NotWorkingGroupowned
FROM       
ProcessingMachinesList 
INNER JOIN
ProcessingMachines03 ON ProcessingMachinesList.ProcessingMachineListID = ProcessingMachines03.MachineID 
INNER JOIN
RecordInfo ON ProcessingMachines03.AnnualRecordID = RecordInfo.RecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'

GROUP BY ProcessingMachinesList.ProcessingMachineListID,ProcessingMachinesList.MachineName
ORDER BY ProcessingMachinesList.ProcessingMachineListID

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualFFS]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualFFS]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool03.FieldActivity, 
SUM(FarmersFieldSchool03.NumberOfFieldSchool) AS NumberOfFieldSchool, 
SUM(FarmersFieldSchool03.NumberOfFarmersStartedMale) AS NumberOfFarmersStartedMale, 
SUM(FarmersFieldSchool03.NumberOfFarmersStartedFemale) AS NumberOfFarmersStartedFemale, 
SUM(FarmersFieldSchool03.AverageDuration) AS AverageDuration, 
SUM(FarmersFieldSchool03.NumberOfFarmersCompletedMale) AS NumberOfFarmersCompletedMale, 
SUM(FarmersFieldSchool03.NumberOfFarmersCompletedFemale) AS NumberOfFarmersCompletedFemale, 
SUM(FarmersFieldSchool03.NumberOfVillagesCovered) AS NumberOfVillagesCovered, 
SUM(FarmersFieldSchool03.NumberOfFarmersWhoAppliedTheTechniquesLearned) AS NumberOfFarmersWhoAppliedTheTechniquesLearned
FROM         
FFSGroup 
INNER JOIN
FarmersFieldSchool03 ON FFSGroup.GroupID = FarmersFieldSchool03.FieldID 
INNER JOIN
RecordInfo ON FarmersFieldSchool03.AnnualRecordID = RecordInfo.RecordID
WHERE     
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
AND
FarmersFieldSchool03.FieldActivity IS NOT NULL
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY FFSGroup.GroupID,FFSGroup.GroupName,FarmersFieldSchool03.FieldActivity
ORDER BY FFSGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualContractFarming]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualContractFarming]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
Group2D.GroupID,
Group2D.GroupName, 
sum(ContractFarming03.ContractNumberOfHouseholdInvolved) as ContractNumberOfHouseholdInvolved, 
sum(ContractFarming03.ContractNumberOfContractorsInvolved) as ContractNumberOfContractorsInvolved, 
sum(ContractFarming03.OutgrowersNumberOfHouseholdInvolved) as OutgrowersNumberOfHouseholdInvolved, 
sum(ContractFarming03.OutgrowersNumberOfContractorsInvolved) as OutgrowersNumberOfContractorsInvolved                      
FROM         
Group2D 
INNER JOIN
ContractFarming03 ON Group2D.GroupID = ContractFarming03.ActivityID 
INNER JOIN
RecordInfo ON ContractFarming03.AnnualRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber                     
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
                      
GROUP BY Group2D.GroupID,Group2D.GroupName
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualAnimalDrawn]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualAnimalDrawn] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
DrawnList.DrawnListID, 
DrawnList.DrawnName, 
SUM(AnimalDrawn03.WorkingIndividuallyOwned) AS WorkingIndividuallyOwned, 
SUM(AnimalDrawn03.WorkingGroupowned) AS WorkingGroupowned
FROM         
DrawnList 
INNER JOIN
AnimalDrawn03 ON DrawnList.DrawnListID = AnimalDrawn03.DrawnID 
INNER JOIN
RecordInfo ON AnimalDrawn03.AnnualRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'

GROUP BY DrawnList.DrawnListID,DrawnList.DrawnName
ORDER BY DrawnList.DrawnListID

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualMachines]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualMachines]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
MachineryList.MachineryListID, 
MachineryList.MachineryName, 
SUM(Machines03.WorkingIndividuallyOwned) AS WorkingIndividuallyOwned, 
SUM(Machines03.WorkingGroupOwned) AS WorkingGroupOwned, 
SUM(Machines03.NotWorkingIndividuallyOwned) AS NotWorkingIndividuallyOwned, 
SUM(Machines03.NotWorkingGroupowned) AS NotWorkingGroupowned
FROM         
MachineryList 
INNER JOIN
Machines03 ON MachineryList.MachineryListID = Machines03.MachineryID 
INNER JOIN
RecordInfo ON Machines03.AnnualRecordID = RecordInfo.RecordID  
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
                      
GROUP BY MachineryList.MachineryListID,MachineryList.MachineryName
ORDER BY MachineryList.MachineryListID                    

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualMachineryDrawn]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualMachineryDrawn] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
DrawnList.DrawnListID, 
DrawnList.DrawnName, 
sum(MachineryDrawn03.WorkingIndividuallyOwned) AS WorkingIndividuallyOwned,
sum(MachineryDrawn03.WorkingGroupowned) as WorkingGroupowned
FROM         
DrawnList 
INNER JOIN
MachineryDrawn03 ON DrawnList.DrawnListID = MachineryDrawn03.DrawnID 
INNER JOIN
RecordInfo ON MachineryDrawn03.AnnualRecordID = RecordInfo.RecordID
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'

GROUP BY DrawnList.DrawnListID,DrawnList.DrawnName
ORDER BY DrawnList.DrawnListID

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualLivestockPopulation]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualLivestockPopulation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
AnimalsGroup.GroupID, 
AnimalsGroup.GroupName, 
AnimalsList.AnimalName, 
SUM(Livestock03.NumberOfIndigenous) AS NumberOfIndigenous, 
SUM(Livestock03.NumberOfImprovedMeat) AS NumberOfImprovedMeat, 
SUM(Livestock03.NumberOfImprovedDairy) AS NumberOfImprovedDairy, 
SUM(Livestock03.TotalRegistered) AS TotalRegistered
FROM         
AnimalsGroup 
INNER JOIN
AnimalsList ON AnimalsGroup.GroupID = AnimalsList.GroupID 
INNER JOIN
Livestock03 ON AnimalsList.AnimalListID = Livestock03.AnimalID 
INNER JOIN
RecordInfo ON Livestock03.AnnualRecordID = RecordInfo.RecordID
                      
WHERE FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
                      
GROUP BY AnimalsGroup.GroupID,AnimalsGroup.GroupName,AnimalsList.AnimalName
ORDER BY AnimalsGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualLivestockInfrastracture]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualLivestockInfrastracture] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
InfraList.InfraListID, 
InfraList.InfraName, 
SUM(ISNULL(LivestockInfrastructure03.Working,0)) AS Working, 
SUM(ISNULL(LivestockInfrastructure03.NotWorking,0)) AS NotWorking,
SUM(ISNULL(LivestockInfrastructure03.NumberRequired,0)) AS NumberRequired ,
SUM(ISNULL(LivestockInfrastructure03.NumberOfRegistered,0)) AS NumberOfRegistered
FROM         
RecordInfo 
INNER JOIN
LivestockInfrastructure03 ON RecordInfo.RecordID = LivestockInfrastructure03.AnnualRecordID 
INNER JOIN
InfraList ON LivestockInfrastructure03.InfraID = InfraList.InfraListID
WHERE 
FormSerialNumber like @FormSerialNumber 
--WHERE
--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 
--OR
--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY 
InfraList.InfraListID, 
InfraList.InfraName 
ORDER BY InfraList.InfraListID
                      
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualIrrigationScheme]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualIrrigationScheme]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
SchemeGroup.GroupID, 
SchemeGroup.GroupName, 
IrrigationScheme03.SchemeName, 
IrrigationScheme03.NameOfWaterSource, 
SUM(IrrigationScheme03.PotentialArea) AS PotentialArea, 
SUM(IrrigationScheme03.AreaUnderImprovedIrrigation) AS AreaUnderImprovedIrrigation, IrrigationScheme03.Seasonirrigated, IrrigationScheme03.StatusOfScheme, 
SUM(IrrigationScheme03.NumberOfMembersInIrrigationSchemeMale) AS NumberOfMembersInIrrigationSchemeMale, SUM(IrrigationScheme03.NumberOfMembersInIrrigationSchemeFemale) AS NumberOfMembersInIrrigationSchemeFemale, 
SUM(IrrigationScheme03.NumberOfFarmersUsingInfrastructureMale) AS NumberOfFarmersUsingInfrastructureMale, SUM(IrrigationScheme03.NumberOfFarmersUsingInfrastructureFemale) AS NumberOfFarmersUsingInfrastructureFemale
FROM         
SchemeGroup 
INNER JOIN
IrrigationScheme03 ON SchemeGroup.GroupID = IrrigationScheme03.SchemeID 
INNER JOIN
RecordInfo ON IrrigationScheme03.AnnualRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber
AND
IrrigationScheme03.SchemeName IS NOT NULL
GROUP BY 
SchemeGroup.GroupID,SchemeGroup.GroupName,IrrigationScheme03.SchemeName,IrrigationScheme03.NameOfWaterSource,IrrigationScheme03.Seasonirrigated,IrrigationScheme03.StatusOfScheme
ORDER BY 
SchemeGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualIrrigation]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualIrrigation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
Irrigation02.CropID, 
sum(Irrigation02.PlantedAreaRainySeason) as PlantedAreaRainySeason, 
sum(Irrigation02.PlantedAreaDrySeason) as PlantedAreaDrySeason, 
sum(Irrigation02.ProductionRainySeason) as ProductionRainySeason, 
sum(Irrigation02.ProductionDrySeason) as ProductionDrySeason,
sum(Irrigation02.YieldRainySeason) as YieldRainySeason, 
sum(Irrigation02.YieldDrySeason) as YieldDrySeason 
FROM         
Irrigation02 
INNER JOIN
RecordInfo ON Irrigation02.RecordID = RecordInfo.RecordID
WHERE 
FormSerialNumberIA like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY Irrigation02.CropID
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualImprovedSeeds]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualImprovedSeeds]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
SeedGroup.GroupID, 
SeedGroup.GroupName, 
ImprovedSeeds03.NameOfImprovedVariety, 
SUM(ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed) AS QualityDeclareSeed, 
SUM(ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed) AS CertifiedSeed
FROM         
SeedGroup 
INNER JOIN
ImprovedSeeds03 ON SeedGroup.GroupID = ImprovedSeeds03.CropID 
INNER JOIN
RecordInfo ON ImprovedSeeds03.AnnualRecordID = RecordInfo.RecordID
WHERE     
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
AND
ImprovedSeeds03.NameOfImprovedVariety IS NOT NULL
GROUP BY 
SeedGroup.GroupID, 
SeedGroup.GroupName, 
ImprovedSeeds03.NameOfImprovedVariety
ORDER BY SeedGroup.GroupID
                      
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualImprovedPasture]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualImprovedPasture]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
SUM(ImprovedPasture03.NumberOfFarms) AS NumberOfFarms, 
SUM(ImprovedPasture03.Area) AS Area, 
SUM(ImprovedPasture03.SeedProduction) AS SeedProduction, 
SUM(ImprovedPasture03.AmountOfHayBales) AS AmountOfHayBales
FROM         
ImprovedPasture03 
INNER JOIN
RecordInfo ON ImprovedPasture03.AnnualRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'                   
 
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualHandOperatedImplements]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualHandOperatedImplements]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
ImplementsList.ImplementsListID, 
ImplementsList.ImplementNameEn, 
ImplementsList.ImplementNameSw, 
ImplementsList.ImplementStatus, 
SUM(HandOperatedImplements03.NumberOfImplements) AS NumberOfImplements
FROM         
ImplementsList 
INNER JOIN
HandOperatedImplements03 ON ImplementsList.ImplementsListID = HandOperatedImplements03.ImplementID 
INNER JOIN
RecordInfo ON HandOperatedImplements03.AnnualRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
GROUP BY 
ImplementsList.ImplementsListID, 
ImplementsList.ImplementNameSw,
ImplementsList.ImplementNameEn,
ImplementsList.ImplementStatus
ORDER BY 
ImplementsList.ImplementsListID
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'

END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualGrazingLand]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualGrazingLand]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
AnimalsGrazedList.AnimalsListID, 
AnimalsGrazedList.AnimalName, 
SUM(GrazingLand03.NumberOfAnimals) AS NumberOfAnimals, 
SUM(GrazingLand03.TotalGrazingLandInTheVillage) AS TotalGrazingLandInTheVillage, 
SUM(GrazingLand03.UtilizedLand) AS UtilizedLand, 
SUM(GrazingLand03.TotalDemarcatedLand) AS TotalDemarcatedLand, 
SUM(GrazingLand03.TotalAreaLeased) AS TotalAreaLeased
FROM         
AnimalsGrazedList 
INNER JOIN
GrazingLand03 ON AnimalsGrazedList.AnimalsListID = GrazingLand03.LivestockID 
INNER JOIN
RecordInfo ON GrazingLand03.AnnualRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'                   

GROUP BY AnimalsGrazedList.AnimalsListID,AnimalsGrazedList.AnimalName
ORDER BY AnimalsGrazedList.AnimalsListID   
END
GO
/****** Object:  StoredProcedure [dbo].[rptUspAnnualCropResidue]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[rptUspAnnualCropResidue]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

--@ParamYear nvarchar(9)   --Parameter for year e.g 2000/2001 commented on year for testing purpose
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CropResidue03.TypeOfCrop, 
SUM(CropResidue03.AmountOfHayBales) AS AmountOfHayBales, 
SUM(CropResidue03.AreaOfFarmsPlotsGazedinSitu) AS AreaOfFarmsPlotsGazedinSitu
FROM         
CropResidue03 
INNER JOIN
RecordInfo ON CropResidue03.AnnualRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber like @FormSerialNumber 
--WHERE

--RecordInfo.PeriodFrom between  left(@ParamYear,4) + '-07-01' AND left(@ParamYear,4) + '-12-31' 

--OR

--RecordInfo.PeriodTo between right(@ParamYear,4) + '-01-31' AND right(@ParamYear,4) + '-06-30'
GROUP BY 
CropResidue03.TypeOfCrop
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportPlantHealth]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardQuarterlyReportPlantHealth] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
PlantHealth02.DiseaseID, 
PlantHealth02.CropID, 
PlantHealth02.ControlMeasures,
PlantHealth02.AreaControled,
PlantHealth02.HouseholdsInvolved,
PlantHealth02.Comments
FROM         
RecordInfo 
INNER JOIN
PlantHealth02 ON RecordInfo.RecordID = PlantHealth02.RecordID 
WHERE 
FormSerialNumber LIKE @FormSerialNumber 
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportSoilErosion]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardQuarterlyReportSoilErosion] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
SoilErosion02.SoilErosionListID, 
SoilErosion02.VillagesInvolved, 
SoilErosion02.AreaDestroyed, 
SoilErosion02.ControlMeasures, 
SoilErosion02.AreaControlled, 
SoilErosion02.Remarks
FROM         
RecordInfo 
INNER JOIN
SoilErosion02 ON RecordInfo.RecordID = SoilErosion02.RecordID
WHERE
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportCropUnderIrrigation]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardQuarterlyReportCropUnderIrrigation] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
Irrigation02.CropID, 
Irrigation02.PlantedAreaRainySeason, 
Irrigation02.PlantedAreaDrySeason, 
Irrigation02.ProductionRainySeason, 
Irrigation02.ProductionDrySeason,
Irrigation02.YieldRainySeason, 
Irrigation02.YieldDrySeason 
FROM         
RecordInfo 
INNER JOIN
Irrigation02 ON RecordInfo.RecordID = Irrigation02.RecordID
WHERE RecordInfo.FormSerialNumber LIKE @FormSerialNumber
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardQuarterlyReportCoopSaccos]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardQuarterlyReportCoopSaccos] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
CoopSaccos02.NumberOfSaccoss, 
CoopSaccos02.MembersMale, 
CoopSaccos02.MembersFemale, 
CoopSaccos02.MembersGroups, 
CoopSaccos02.LoanCrop, 
CoopSaccos02.LoanLivestock, 
CoopSaccos02.LoanFishery, 
CoopSaccos02.LoanMarketing
FROM         
RecordInfo 
INNER JOIN
CoopSaccos02 ON RecordInfo.RecordID = CoopSaccos02.RecordID
WHERE FormSerialNumber LIKE @FormSerialNumber 

END
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportWeatherCondition]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardMonthlyReportWeatherCondition] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
WeatherCondition01.NumberOfDays,
WeatherCondition01.AmountOfRain,
WeatherCondition01.Explanation,
WeatherCondition01.Disaster,
WeatherCondition01.Activity
FROM         
RecordInfo 
INNER JOIN
WeatherCondition01 ON RecordInfo.RecordID = WeatherCondition01.MonthlyRecordID
WHERE FormSerialNumber LIKE @FormSerialNumber 
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportVisitors]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardMonthlyReportVisitors]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT     
CONVERT(VARCHAR(20),PeopleWhoVisitTheVillage01.VisitingDate,103) AS VisitingDate, 
PeopleWhoVisitTheVillage01.NameOfVisitor, 
PeopleWhoVisitTheVillage01.Address, 
PeopleWhoVisitTheVillage01.MainPurposeOfVisit, 
PeopleWhoVisitTheVillage01.InstructionsAdviceProvided
FROM         
RecordInfo 
INNER JOIN
PeopleWhoVisitTheVillage01 ON RecordInfo.RecordID = PeopleWhoVisitTheVillage01.MonthlyRecordID
WHERE 
FormSerialNumber LIKE @FormSerialNumber 
ORDER BY
PeopleWhoVisitTheVillage01.VisitingDate
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportTarget]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardMonthlyReportTarget]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT  
CropGroup.GroupID,   
CropGroup.GroupName, 
CropGroupList.CropGroupListID, 
CropGroupList.CropName, 
TargetImplementationAndCropPrices01.AreaDone, 
TargetImplementationAndCropPrices01.ProdDone, 
TargetImplementationAndCropPrices01.Price, 
TargetImplementationAndCropPrices01.Explanation
FROM         
RecordInfo 
INNER JOIN
TargetImplementationAndCropPrices01 ON RecordInfo.RecordID = TargetImplementationAndCropPrices01.MonthlyRecordID 
INNER JOIN
CropGroupList ON TargetImplementationAndCropPrices01.CropID = CropGroupList.CropGroupListID 
INNER JOIN
CropGroup ON CropGroupList.GroupID = CropGroup.GroupID
WHERE
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
ORDER BY 
CropGroupList.CropGroupListID

END
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportProdSkin]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardMonthlyReportProdSkin]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     
ProdSkinList.ProdName, 
ProdSkin01.DrySuspended, 
ProdSkin01.DrySalted,
ProdSkin01.WetBlue,
ProdSkin01.Remarks
FROM         
RecordInfo 
INNER JOIN
ProdSkin01 ON RecordInfo.RecordID = ProdSkin01.MonthlyRecordID 
INNER JOIN
ProdSkinList ON ProdSkin01.TypeOfProdID = ProdSkinList.ProdSkinID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY ProdSkinList.ProdSkinID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportProcessingMachine]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportProcessingMachine]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
ProcessingMachinesList.ProcessingMachineListID, 
ProcessingMachinesList.MachineName, 
ProcessingMachines03.WorkingIndividuallyOwned, 
ProcessingMachines03.WorkingGroupowned, 
ProcessingMachines03.NotWorkingIndividuallyOwned, 
ProcessingMachines03.NotWorkingGroupowned, 
ProcessingMachines03.ReasonForNotWorking
FROM         
RecordInfo INNER JOIN
ProcessingMachines03 ON RecordInfo.RecordID = ProcessingMachines03.AnnualRecordID 
INNER JOIN
ProcessingMachinesList ON ProcessingMachines03.MachineID = ProcessingMachinesList.ProcessingMachineListID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY ProcessingMachinesList.ProcessingMachineListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportCropResidue]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportCropResidue]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
CropResidue03.TypeOfCrop, 
CropResidue03.AmountOfHayBales,
CropResidue03.AreaOfFarmsPlotsGazedinSitu,
CropResidue03.Remarks
FROM         
RecordInfo 
INNER JOIN
Areas ON RecordInfo.AreaID = Areas.ID 
INNER JOIN
CropResidue03 ON RecordInfo.RecordID = CropResidue03.AnnualRecordID
WHERE FormSerialNumber LIKE @FormSerialNumber 

END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportContractFarming]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportContractFarming]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT 
Group2D.GroupID,    
Group2D.GroupName, 
ContractFarming03.ContractNumberOfHouseholdInvolved, 
ContractFarming03.ContractNumberOfContractorsInvolved,
ContractFarming03.ContractMajorProducts,
ContractFarming03.OutgrowersNumberOfHouseholdInvolved, 
ContractFarming03.OutgrowersNumberOfContractorsInvolved,
ContractFarming03.OutgrowersMajorProducts
FROM       
RecordInfo 
INNER JOIN
ContractFarming03 ON RecordInfo.RecordID = ContractFarming03.AnnualRecordID 
INNER JOIN
Group2D ON ContractFarming03.ActivityID = Group2D.GroupID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY Group2D.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportBasicInformation]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportBasicInformation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
BasicInformation03.MaleHeadedHousehold, 
BasicInformation03.FemaleHeadedHousehold, 
BasicInformation03.NumberOfHouseholdEngagingInAgriculture, 
BasicInformation03.PopulationMale,
BasicInformation03.PopulationFemale,
BasicInformation03.PopulationEngagingInAgriculture
FROM         
RecordInfo 
INNER JOIN
BasicInformation03 ON RecordInfo.RecordID = BasicInformation03.AnnualRecordID
WHERE FormSerialNumber LIKE @FormSerialNumber
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportAnimalDrawn]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportAnimalDrawn]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
DrawnList.DrawnListID, 
DrawnList.DrawnName, 
AnimalDrawn03.WorkingIndividuallyOwned, 
AnimalDrawn03.WorkingGroupowned
FROM         
RecordInfo 
INNER JOIN
AnimalDrawn03 ON RecordInfo.RecordID = AnimalDrawn03.AnnualRecordID 
INNER JOIN
DrawnList ON AnimalDrawn03.DrawnID = DrawnList.DrawnListID
WHERE FormSerialNumber like @FormSerialNumber 
ORDER BY DrawnList.DrawnListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportPlantHealth]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardMonthlyReportPlantHealth] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT     
ChemicalControl01.PestID, 
ChemicalControl01.CropID, 
ChemicalControl01.Severity, 
ChemicalControl01.AffectedArea, 
ChemicalControl01.NumberOfVillageAffected, 
ChemicalControl01.PestcideApplied, 
ChemicalControl01.AmountOfPestcideApplied, 
ChemicalControl01.Unit, 
ChemicalControl01.NumberOfVillagesServed, 
ChemicalControl01.NumberOfHouseHoldServed, 
ChemicalControl01.AreaRescued, 
ChemicalControl01.Remarks
FROM         
RecordInfo 
INNER JOIN
ChemicalControl01 ON RecordInfo.RecordID = ChemicalControl01.MonthlyRecordID
WHERE
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportMedication]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardMonthlyReportMedication] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT     
Medication01.LivestockListID, 
Medication01.PestDiseaseListID, 
Medication01.NumberAffected, 
Medication01.NumberTreated, 
Medication01.NumberRecovered, 
Medication01.NumberDied, 
Medication01.TreatmentMedicineApplied
FROM         
RecordInfo 
INNER JOIN
Medication01 ON RecordInfo.RecordID = Medication01.MonthlyRecordID
WHERE
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
ORDER BY Medication01.LivestockListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportMeatInspection]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardMonthlyReportMeatInspection]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT 
MeatInspection01.NameofPlaceForSlaughter,
MeatInspection01.TypeOfAnimal, 
MeatInspection01.NumberOfAnimalsAffected, 
MeatInspection01.ReasonsForCondemnations, 
MeatInspection01.NumberOfCases
FROM         
MeatInspection01 
INNER JOIN
RecordInfo ON MeatInspection01.MonthlyRecordID = RecordInfo.RecordID
WHERE 
FormSerialNumber LIKE @FormSerialNumber
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportLivestockSlaughtered]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardMonthlyReportLivestockSlaughtered]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
LivestockSlaughList.LivestockListID,
LivestockSlaughList.LivestockName, 
LivestockSlaughtered01.TotalNumberSlaughteredThisMonth,
LivestockSlaughtered01.AverageRetailPriceKg
FROM         
RecordInfo 
INNER JOIN
LivestockSlaughtered01 ON RecordInfo.RecordID = LivestockSlaughtered01.MonthlyRecordID 
INNER JOIN
LivestockSlaughList ON LivestockSlaughtered01.LivestockID = LivestockSlaughList.LivestockListID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY LivestockSlaughList.LivestockListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportLivestockServices]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardMonthlyReportLivestockServices]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT 
LivestockList.LivestockListID,    
LivestockList.LivestockName, 
LivestockService01.CuttingHoof, 
LivestockService01.Castration, 
LivestockService01.AI, 
LivestockService01.CuttingHorn, 
LivestockService01.Branding, 
LivestockService01.CuttingTail, 
LivestockService01.CuttingTeeth, 
LivestockService01.CuttingBillBeak 
FROM         
RecordInfo 
INNER JOIN
LivestockService01 ON RecordInfo.RecordID = LivestockService01.MonthlyRecordID 
INNER JOIN
LivestockList ON LivestockService01.LivestockID = LivestockList.LivestockListID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY LivestockList.LivestockListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportDipping]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardMonthlyReportDipping]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT     
DippingSprayingVaccination01.LivestockListID, 
DippingSprayingVaccination01.NumberDipped, 
DippingSprayingVaccination01.DippingMedicineApplied, 
DippingSprayingVaccination01.NumberSprayed, 
DippingSprayingVaccination01.SprayMedicineApplied, 
DippingSprayingVaccination01.NumberVaccinated, 
DippingSprayingVaccination01.VaccineApplied
FROM         
RecordInfo 
INNER JOIN
DippingSprayingVaccination01 ON RecordInfo.RecordID = DippingSprayingVaccination01.MonthlyRecordID
WHERE
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
ORDER BY DippingSprayingVaccination01.LivestockListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardMonthlyReportCommentsOfVillageOfficer]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardMonthlyReportCommentsOfVillageOfficer]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

SELECT     
CommentsOfVillageOfficer01.Achievement, 
CommentsOfVillageOfficer01.Challenges
FROM         
RecordInfo 
INNER JOIN
CommentsOfVillageOfficer01 ON RecordInfo.RecordID = CommentsOfVillageOfficer01.MonthlyRecordID 
WHERE
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportTVAndRadio]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportTVAndRadio]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
MediaList.MediaListID, 
MediaList.MediaID, 
MediaList.MediaName, 
TVAndRadioStation03.NumberOfVillagesCovered
FROM         
RecordInfo 
INNER JOIN
TVAndRadioStation03 ON RecordInfo.RecordID = TVAndRadioStation03.AnnualRecordID 
INNER JOIN
MediaList ON TVAndRadioStation03.StationID = MediaList.MediaListID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY MediaList.MediaListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportTelecommunication]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportTelecommunication]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
TelecomCompaList.TelecomCompaListID, 
TelecomCompaList.MediaName, 
Telecommunication03.NumberOfVillagesCovered
FROM         
RecordInfo 
INNER JOIN
Telecommunication03 ON RecordInfo.RecordID = Telecommunication03.AnnualRecordID 
INNER JOIN
TelecomCompaList ON Telecommunication03.TelecomCompID = TelecomCompaList.TelecomCompaListID
WHERE FormSerialNumber LIKE @FormSerialNumber 
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportMachines]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportMachines]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
MachineryList.MachineryListID, 
MachineryList.MachineryName, 
Machines03.WorkingIndividuallyOwned,
Machines03.WorkingGroupOwned,
Machines03.NotWorkingIndividuallyOwned, 
Machines03.NotWorkingGroupowned,
Machines03.ReasonForNotWorking
FROM         
RecordInfo 
INNER JOIN
Machines03 ON RecordInfo.RecordID = Machines03.AnnualRecordID 
INNER JOIN
MachineryList ON Machines03.MachineryID = MachineryList.MachineryListID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY MachineryList.MachineryListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportMachineryDrawn]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportMachineryDrawn]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
DrawnList.DrawnListID, 
DrawnList.DrawnName, 
MachineryDrawn03.WorkingIndividuallyOwned, 
MachineryDrawn03.WorkingGroupowned
FROM         
RecordInfo 
INNER JOIN
MachineryDrawn03 ON RecordInfo.RecordID = MachineryDrawn03.AnnualRecordID 
INNER JOIN
DrawnList ON MachineryDrawn03.DrawnID = DrawnList.DrawnListID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY DrawnList.DrawnListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportLivestockPopulation]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportLivestockPopulation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
AnimalsGroup.GroupID, 
AnimalsGroup.GroupName, 
AnimalsList.AnimalListID, 
AnimalsList.GroupID AS Expr1, 
AnimalsList.AnimalName, 
Livestock03.NumberOfIndigenous,
Livestock03.NumberOfImprovedMeat, 
Livestock03.NumberOfImprovedDairy,
Livestock03.TotalRegistered
FROM         
RecordInfo 
INNER JOIN
Livestock03 ON RecordInfo.RecordID = Livestock03.AnnualRecordID 
INNER JOIN
AnimalsList ON Livestock03.AnimalID = AnimalsList.AnimalListID 
INNER JOIN
AnimalsGroup ON AnimalsList.GroupID = AnimalsGroup.GroupID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY AnimalsGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportLivestockInfrastructure]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportLivestockInfrastructure]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
InfraList.InfraListID, 
InfraList.InfraName, 
LivestockInfrastructure03.Working,
LivestockInfrastructure03.NotWorking, 
LivestockInfrastructure03.NumberRequired, 
LivestockInfrastructure03.NumberOfRegistered,
LivestockInfrastructure03.ReasonsForNotWorking
FROM         
RecordInfo 
INNER JOIN
LivestockInfrastructure03 ON RecordInfo.RecordID = LivestockInfrastructure03.AnnualRecordID 
INNER JOIN
InfraList ON LivestockInfrastructure03.InfraID = InfraList.InfraListID
WHERE FormSerialNumber like @FormSerialNumber 
ORDER BY InfraList.InfraListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportIrrigationScheme]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportIrrigationScheme]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
SchemeGroup.GroupID, 
SchemeGroup.GroupName, 
IrrigationScheme03.SchemeName, 
IrrigationScheme03.NameOfWaterSource, 
IrrigationScheme03.PotentialArea, 
IrrigationScheme03.AreaUnderImprovedIrrigation, 
IrrigationScheme03.Seasonirrigated, 
IrrigationScheme03.StatusOfScheme, 
IrrigationScheme03.NumberOfMembersInIrrigationSchemeMale, 
IrrigationScheme03.NumberOfMembersInIrrigationSchemeFemale, 
IrrigationScheme03.NumberOfFarmersUsingInfrastructureMale, 
IrrigationScheme03.NumberOfFarmersUsingInfrastructureFemale
FROM         
RecordInfo 
INNER JOIN
IrrigationScheme03 ON RecordInfo.RecordID = IrrigationScheme03.AnnualRecordID 
INNER JOIN
SchemeGroup ON IrrigationScheme03.SchemeID = SchemeGroup.GroupID
WHERE
RecordInfo.FormSerialNumber LIKE @FormSerialNumber
AND
IrrigationScheme03.SchemeName IS NOT NULL
ORDER BY SchemeGroup.GroupID

END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportImprovedSeedsOthers]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportImprovedSeedsOthers]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
SeedGroup.GroupID, 
SeedGroup.GroupName, 
ImprovedSeeds03.AnnualRequirementForTheReportingYear,
ImprovedSeeds03.CropNameOthers,
ImprovedSeeds03.NameOfImprovedVariety,
ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed,
ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed,
ImprovedSeeds03.Remarks
FROM         
RecordInfo 
INNER JOIN
ImprovedSeeds03 ON RecordInfo.RecordID = ImprovedSeeds03.AnnualRecordID 
INNER JOIN
SeedGroup ON ImprovedSeeds03.CropID = SeedGroup.GroupID 
WHERE 
FormSerialNumber LIKE @FormSerialNumber
AND
ImprovedSeeds03.CropNameOthers IS NOT NULL
AND    
SeedGroup.GroupID=7
ORDER BY SeedGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportImprovedSeeds]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportImprovedSeeds]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
SeedGroup.GroupID, 
SeedGroup.GroupName, 
ImprovedSeeds03.AnnualRequirementForTheReportingYear,
ImprovedSeeds03.NameOfImprovedVariety,
ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed,
ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed,
ImprovedSeeds03.Remarks
FROM         
RecordInfo 
INNER JOIN
ImprovedSeeds03 ON RecordInfo.RecordID = ImprovedSeeds03.AnnualRecordID 
INNER JOIN
SeedGroup ON ImprovedSeeds03.CropID = SeedGroup.GroupID 
WHERE 
FormSerialNumber LIKE @FormSerialNumber
AND
ImprovedSeeds03.NameOfImprovedVariety IS NOT NULL
AND     
SeedGroup.GroupID<>7
ORDER BY SeedGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportImprovedPasture]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportImprovedPasture]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
ImprovedPasture03.NumberOfFarms,
ImprovedPasture03.Area,
ImprovedPasture03.SeedProduction, 
ImprovedPasture03.AmountOfHayBales,
ImprovedPasture03.Remarks
FROM         
RecordInfo 
INNER JOIN
ImprovedPasture03 ON RecordInfo.RecordID = ImprovedPasture03.AnnualRecordID
WHERE FormSerialNumber LIKE @FormSerialNumber 
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportImplements]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportImplements]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
ImplementsList.ImplementsListID, 
ImplementsList.ImplementNameEn, 
ImplementsList.ImplementNameSw,
HandOperatedImplements03.NumberOfImplements
FROM         
RecordInfo 
INNER JOIN
HandOperatedImplements03 ON RecordInfo.RecordID = HandOperatedImplements03.AnnualRecordID 
INNER JOIN
ImplementsList ON HandOperatedImplements03.ImplementID = ImplementsList.ImplementsListID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY ImplementsList.ImplementsListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportGrazingLand]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportGrazingLand]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
AnimalsGrazedList.AnimalsListID, 
AnimalsGrazedList.AnimalName, 
GrazingLand03.NumberOfAnimals,
GrazingLand03.TotalGrazingLandInTheVillage,
GrazingLand03.UtilizedLand,
GrazingLand03.TotalDemarcatedLand,
GrazingLand03.TotalAreaLeased 
FROM         
RecordInfo 
INNER JOIN
GrazingLand03 ON RecordInfo.RecordID = GrazingLand03.AnnualRecordID 
INNER JOIN
AnimalsGrazedList ON GrazingLand03.LivestockID = AnimalsGrazedList.AnimalsListID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY AnimalsGrazedList.AnimalsListID
END
GO
/****** Object:  StoredProcedure [dbo].[prntWardAnnualReportFFS]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[prntWardAnnualReportFFS]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@FormSerialNumber nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool03.FieldActivity, 
FarmersFieldSchool03.NumberOfFieldSchool,
FarmersFieldSchool03.NumberOfFarmersStartedMale,
FarmersFieldSchool03.NumberOfFarmersStartedFemale, 
FarmersFieldSchool03.AverageDuration, 
FarmersFieldSchool03.NumberOfFarmersCompletedMale,
FarmersFieldSchool03.NumberOfFarmersCompletedFemale,
FarmersFieldSchool03.NumberOfVillagesCovered,
FarmersFieldSchool03.NumberOfFarmersWhoAppliedTheTechniquesLearned,
FarmersFieldSchool03.Remarks
FROM         
RecordInfo 
INNER JOIN
FarmersFieldSchool03 ON RecordInfo.RecordID = FarmersFieldSchool03.AnnualRecordID 
INNER JOIN
FFSGroup ON FarmersFieldSchool03.FieldID = FFSGroup.GroupID
WHERE FormSerialNumber LIKE @FormSerialNumber 
ORDER BY FFSGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_update]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ChemicalControl01_update]
	@P_1 UniqueIdentifier,
	@P_2 NVarChar(30),
	@P_3 NVarChar(30),
	@P_4 NVarChar(10),
	@P_5 Float,
	@P_6 Int,
	@P_7 NVarChar(100),
	@P_8 Float,
	@P_9 NVarChar(10),
	@P_10 Int,
	@P_11 Int,
	@P_12 Float,
	@P_13 NVarChar(200),
	@P_14 UniqueIdentifier,
	@P_15 NVarChar(50),
	@sync_force_write Int,
	@sync_min_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; UPDATE [ChemicalControl01] SET [PestID] = @P_2, [CropID] = @P_3, [Severity] = @P_4, [AffectedArea] = @P_5, [NumberOfVillageAffected] = @P_6, [PestcideApplied] = @P_7, [AmountOfPestcideApplied] = @P_8, [Unit] = @P_9, [NumberOfVillagesServed] = @P_10, [NumberOfHouseHoldServed] = @P_11, [AreaRescued] = @P_12, [Remarks] = @P_13, [MonthlyRecordID] = @P_14, [FormSerialID] = @P_15 FROM [ChemicalControl01] [base] JOIN [ChemicalControl01_tracking] [side] ON [base].[ChemicalControlID] = [side].[ChemicalControlID] WHERE ([side].[local_update_peer_timestamp] <= @sync_min_timestamp OR @sync_force_write = 1) AND ([base].[ChemicalControlID] = @P_1); SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_insert]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ChemicalControl01_insert]
	@P_1 UniqueIdentifier,
	@P_2 NVarChar(30),
	@P_3 NVarChar(30),
	@P_4 NVarChar(10),
	@P_5 Float,
	@P_6 Int,
	@P_7 NVarChar(100),
	@P_8 Float,
	@P_9 NVarChar(10),
	@P_10 Int,
	@P_11 Int,
	@P_12 Float,
	@P_13 NVarChar(200),
	@P_14 UniqueIdentifier,
	@P_15 NVarChar(50),
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; IF NOT EXISTS (SELECT * FROM [ChemicalControl01_tracking] WHERE [ChemicalControlID] = @P_1) BEGIN INSERT INTO [ChemicalControl01]([ChemicalControlID], [PestID], [CropID], [Severity], [AffectedArea], [NumberOfVillageAffected], [PestcideApplied], [AmountOfPestcideApplied], [Unit], [NumberOfVillagesServed], [NumberOfHouseHoldServed], [AreaRescued], [Remarks], [MonthlyRecordID], [FormSerialID]) VALUES (@P_1, @P_2, @P_3, @P_4, @P_5, @P_6, @P_7, @P_8, @P_9, @P_10, @P_11, @P_12, @P_13, @P_14, @P_15);  SET @sync_row_count = @@rowcount;  END 
END
GO
/****** Object:  StoredProcedure [dbo].[FillIrrigationScheme03]    Script Date: 05/06/2013 17:36:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[FillIrrigationScheme03]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	SELECT     SchemeList.SchemeListID, SchemeList.SchemeName, IrrigationScheme03.IrrigationSchemeID, IrrigationScheme03.SchemeID, 
                      IrrigationScheme03.NameOfWaterSource, IrrigationScheme03.PotentialArea, IrrigationScheme03.AreaUnderImprovedIrrigation, IrrigationScheme03.Seasonirrigated, 
                      IrrigationScheme03.StatusOfScheme, IrrigationScheme03.NumberOfMembersInIrrigationSchemeMale, 
                      IrrigationScheme03.NumberOfMembersInIrrigationSchemeFemale, IrrigationScheme03.NumberOfFarmersUsingInfrastructureMale, 
                      IrrigationScheme03.NumberOfFarmersUsingInfrastructureFemale, IrrigationScheme03.AnnualRecordID
FROM         SchemeList INNER JOIN
                      IrrigationScheme03 ON SchemeList.SchemeListID = IrrigationScheme03.SchemeID
WHERE     (IrrigationScheme03.AnnualRecordID = @AnnualRecordID)
ORDER BY SchemeList.SchemeListID
END
GO
/****** Object:  StoredProcedure [dbo].[cleanDB]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[cleanDB] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

/****** Script for SelectTopNRows command from SSMS  ******/
 --return
 --Records
 
delete from ChemicalControl01 
delete from CommentsOfVillageOfficer01 
delete from DippingSprayingVaccination01 
delete from LivestockService01 
delete from LivestockSlaughtered01 
delete from MeatInspection01 
delete from Medication01 
delete from PeopleWhoVisitTheVillage01 
delete from ProdMilk01 
delete from ProdSkin01 
delete from TargetImplementationAndCropPrices01 
delete from WeatherCondition01 

delete from CoopGroup02 
delete from CoopSaccos02 
delete from FarmersFieldSchool02 
delete from FoodCondition02 
delete from Irrigation02 
delete from PlantHealth02 
delete from ProdLand02 
delete from SoilErosion02
 
delete from AiredPrograms03 
delete from AnimalDrawn03 
delete from BasicInformation03 
delete from ContractFarming03 
delete from CropResidue03 
delete from FarmersFieldSchool03 
delete from Fertilizer03 
delete from GrazingLand03 
delete from HandOperatedImplements03 
delete from ImprovedPasture03 
delete from ImprovedSeeds03 
delete from IrrigationScheme03 
delete from Livestock03 
delete from LivestockInfrastructure03 
delete from MachineryDrawn03 
delete from Machines03 
delete from Pestcide03 
delete from ProcessingMachines03 
delete from Telecommunication03 
delete from TVAndRadioStation03 

delete from AnimalsFeeds04 
delete from LivestockMarketing04 
delete from LivestockMovement04 
delete from ProductsMovement04 
delete from ReproductionInputs04
 
delete from DistrictInfo05 
delete from EducationLevel05 
delete from ExtensionOfficers05
delete from ExtensionOfficersTrained05 
delete from ExtensionServiceProviders05 
delete from FoodSituation05 
delete from LivestockInfrastructure05 
delete from LivestockPopulation05 
delete from Oxenizing05 
delete from PlanningCommitee05 
delete from ProductsProcessing05 
delete from WorkingEquipments05 
delete from WorkingFacilities05 

delete from TargetImplementationAndCropPrices06

delete from AnnualRecord
delete from MonthlyRecord
delete from QuarterlyRecord 
delete from RecordInfo 
delete from tbl_config

END
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_selectrow]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ChemicalControl01_selectrow]
	@P_1 UniqueIdentifier,
	@sync_scope_local_id Int,
	@sync_scope_restore_count Int
AS
BEGIN
SELECT [side].[ChemicalControlID], [base].[PestID], [base].[CropID], [base].[Severity], [base].[AffectedArea], [base].[NumberOfVillageAffected], [base].[PestcideApplied], [base].[AmountOfPestcideApplied], [base].[Unit], [base].[NumberOfVillagesServed], [base].[NumberOfHouseHoldServed], [base].[AreaRescued], [base].[Remarks], [base].[MonthlyRecordID], [base].[FormSerialID], [side].[sync_row_is_tombstone], [side].[local_update_peer_timestamp] as sync_row_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then COALESCE([side].[restore_timestamp], [side].[local_update_peer_timestamp]) else [side].[scope_update_peer_timestamp] end as sync_update_peer_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_update_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_update_peer_key] end else [side].[scope_update_peer_key] end as sync_update_peer_key, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then [side].[local_create_peer_timestamp] else [side].[scope_create_peer_timestamp] end as sync_create_peer_timestamp, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_create_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_create_peer_key] end else [side].[scope_create_peer_key] end as sync_create_peer_key from [ChemicalControl01] [base] right join [ChemicalControl01_tracking] [side] on [base].[ChemicalControlID] = [side].[ChemicalControlID] WHERE [side].[ChemicalControlID] = @P_1
END
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_selectchanges]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ChemicalControl01_selectchanges]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@sync_scope_restore_count Int,
	@sync_update_peer_key Int
AS
BEGIN
SELECT [side].[ChemicalControlID], [base].[PestID], [base].[CropID], [base].[Severity], [base].[AffectedArea], [base].[NumberOfVillageAffected], [base].[PestcideApplied], [base].[AmountOfPestcideApplied], [base].[Unit], [base].[NumberOfVillagesServed], [base].[NumberOfHouseHoldServed], [base].[AreaRescued], [base].[Remarks], [base].[MonthlyRecordID], [base].[FormSerialID], [side].[sync_row_is_tombstone], [side].[local_update_peer_timestamp] as sync_row_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then COALESCE([side].[restore_timestamp], [side].[local_update_peer_timestamp]) else [side].[scope_update_peer_timestamp] end as sync_update_peer_timestamp, case when ([side].[update_scope_local_id] is null or [side].[update_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_update_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_update_peer_key] end else [side].[scope_update_peer_key] end as sync_update_peer_key, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then [side].[local_create_peer_timestamp] else [side].[scope_create_peer_timestamp] end as sync_create_peer_timestamp, case when ([side].[create_scope_local_id] is null or [side].[create_scope_local_id] <> @sync_scope_local_id) then case when ([side].[local_create_peer_key] > @sync_scope_restore_count) then @sync_scope_restore_count else [side].[local_create_peer_key] end else [side].[scope_create_peer_key] end as sync_create_peer_key FROM [ChemicalControl01] [base] RIGHT JOIN [ChemicalControl01_tracking] [side] ON [base].[ChemicalControlID] = [side].[ChemicalControlID] WHERE (([side].[FormSerialID] LIKE '001AFRTZA001004002%') OR ([side].[sync_row_is_tombstone] = 1 AND ([side].[update_scope_local_id] = @sync_scope_local_id OR [side].[update_scope_local_id] IS NULL) AND [side].[FormSerialID] IS NULL)) AND  ([side].[update_scope_local_id] IS NULL OR [side].[update_scope_local_id] <> @sync_scope_local_id OR ([side].[update_scope_local_id] = @sync_scope_local_id AND [side].[scope_update_peer_key] <> @sync_update_peer_key)) AND [side].[local_update_peer_timestamp] > @sync_min_timestamp
END
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_delete]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ChemicalControl01_delete]
	@P_1 UniqueIdentifier,
	@sync_force_write Int,
	@sync_min_timestamp BigInt,
	@sync_row_count Int OUTPUT
AS
BEGIN
SET @sync_row_count = 0; DELETE [ChemicalControl01] FROM [ChemicalControl01] [base] JOIN [ChemicalControl01_tracking] [side] ON [base].[ChemicalControlID] = [side].[ChemicalControlID] WHERE ([side].[local_update_peer_timestamp] <= @sync_min_timestamp OR @sync_force_write = 1) AND ([base].[ChemicalControlID] = @P_1); SET @sync_row_count = @@ROWCOUNT;
END
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_bulkupdate]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ChemicalControl01_bulkupdate]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [ChemicalControl01_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated
declare @changed TABLE ([ChemicalControlID] uniqueidentifier, PRIMARY KEY ([ChemicalControlID]));

-- update the base table
MERGE [ChemicalControl01] AS base USING
-- join done here against the side table to get the local timestamp for concurrency check
(SELECT p.*, t.update_scope_local_id, t.scope_update_peer_key, t.local_update_peer_timestamp FROM @changeTable p LEFT JOIN [ChemicalControl01_tracking] t ON p.[ChemicalControlID] = t.[ChemicalControlID]) as changes ON changes.[ChemicalControlID] = base.[ChemicalControlID]
WHEN MATCHED AND (changes.update_scope_local_id = @sync_scope_local_id AND changes.scope_update_peer_key = changes.sync_update_peer_key) OR changes.local_update_peer_timestamp <= @sync_min_timestamp THEN
UPDATE SET [PestID] = changes.[PestID], [CropID] = changes.[CropID], [Severity] = changes.[Severity], [AffectedArea] = changes.[AffectedArea], [NumberOfVillageAffected] = changes.[NumberOfVillageAffected], [PestcideApplied] = changes.[PestcideApplied], [AmountOfPestcideApplied] = changes.[AmountOfPestcideApplied], [Unit] = changes.[Unit], [NumberOfVillagesServed] = changes.[NumberOfVillagesServed], [NumberOfHouseHoldServed] = changes.[NumberOfHouseHoldServed], [AreaRescued] = changes.[AreaRescued], [Remarks] = changes.[Remarks], [MonthlyRecordID] = changes.[MonthlyRecordID], [FormSerialID] = changes.[FormSerialID]
OUTPUT INSERTED.[ChemicalControlID] into @changed; -- populates the temp table with successful PKs

UPDATE side SET
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0
FROM 
[ChemicalControl01_tracking] side JOIN 
(SELECT p.[ChemicalControlID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[ChemicalControlID] = t.[ChemicalControlID]) as changes ON changes.[ChemicalControlID] = side.[ChemicalControlID]
SELECT [ChemicalControlID] FROM @changeTable t WHERE NOT EXISTS (SELECT [ChemicalControlID] from @changed i WHERE t.[ChemicalControlID] = i.[ChemicalControlID])
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyInsertCoopSaccos]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterlyInsertCoopSaccos]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@CoopSaccosID uniqueidentifier,
	@NumberOfSaccoss int,
	@MembersMale int,
	@MembersFemale int,
	@MembersGroups int,
	@LoanCrop float,
	@LoanLivestock float,
	@LoanFishery float,
	@LoanMarketing float,
	@RecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@RecordID
		
	IF NOT EXISTS(SELECT * FROM CoopSaccos02 WHERE RecordID=@RecordID)
	
BEGIN
    INSERT INTO CoopSaccos02
	VALUES(@CoopSaccosID,@NumberOfSaccoss,@MembersMale,@MembersFemale,@MembersGroups,@LoanCrop,@LoanLivestock,@LoanFishery,@LoanMarketing,@RecordID,@FormSerialID)
END
   
   ELSE
BEGIN
UPDATE CoopSaccos02
SET NumberOfSaccoss=@NumberOfSaccoss,MembersMale=@MembersMale,MembersFemale=@MembersFemale,MembersGroups=@MembersGroups,LoanCrop=@LoanCrop,LoanLivestock=@LoanLivestock,LoanFishery=@LoanFishery,LoanMarketing=@LoanMarketing
	,FormSerialID=@FormSerialID
WHERE RecordID=@RecordID
END
	
END
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_bulkinsert]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ChemicalControl01_bulkinsert]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [ChemicalControl01_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated/inserted
DECLARE @changed TABLE ([ChemicalControlID] uniqueidentifier, PRIMARY KEY ([ChemicalControlID]));

-- update/insert into the base table
MERGE [ChemicalControl01] AS base USING
-- join done here against the side table to get the local timestamp for concurrency check
(SELECT p.*, t.local_update_peer_timestamp FROM @changeTable p LEFT JOIN [ChemicalControl01_tracking] t ON p.[ChemicalControlID] = t.[ChemicalControlID]) AS changes ON changes.[ChemicalControlID] = base.[ChemicalControlID]
WHEN NOT MATCHED BY TARGET AND changes.local_update_peer_timestamp <= @sync_min_timestamp OR changes.local_update_peer_timestamp IS NULL THEN
INSERT ([ChemicalControlID], [PestID], [CropID], [Severity], [AffectedArea], [NumberOfVillageAffected], [PestcideApplied], [AmountOfPestcideApplied], [Unit], [NumberOfVillagesServed], [NumberOfHouseHoldServed], [AreaRescued], [Remarks], [MonthlyRecordID], [FormSerialID]) VALUES (changes.[ChemicalControlID], changes.[PestID], changes.[CropID], changes.[Severity], changes.[AffectedArea], changes.[NumberOfVillageAffected], changes.[PestcideApplied], changes.[AmountOfPestcideApplied], changes.[Unit], changes.[NumberOfVillagesServed], changes.[NumberOfHouseHoldServed], changes.[AreaRescued], changes.[Remarks], changes.[MonthlyRecordID], changes.[FormSerialID])
OUTPUT INSERTED.[ChemicalControlID] INTO @changed; -- populates the temp table with successful PKs

UPDATE side SET
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0,
create_scope_local_id = @sync_scope_local_id,
scope_create_peer_key = changes.sync_create_peer_key,
scope_create_peer_timestamp = changes.sync_create_peer_timestamp,
local_create_peer_key = 0
FROM 
[ChemicalControl01_tracking] side JOIN 
(SELECT p.[ChemicalControlID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[ChemicalControlID] = t.[ChemicalControlID]) AS changes ON changes.[ChemicalControlID] = side.[ChemicalControlID]
SELECT [ChemicalControlID] FROM @changeTable t WHERE NOT EXISTS (SELECT [ChemicalControlID] from @changed i WHERE t.[ChemicalControlID] = i.[ChemicalControlID])
END
GO
/****** Object:  StoredProcedure [dbo].[ChemicalControl01_bulkdelete]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ChemicalControl01_bulkdelete]
	@sync_min_timestamp BigInt,
	@sync_scope_local_id Int,
	@changeTable [ChemicalControl01_BulkType] READONLY
AS
BEGIN
-- use a temp table to store the list of PKs that successfully got updated/inserted
declare @changed TABLE ([ChemicalControlID] uniqueidentifier, PRIMARY KEY ([ChemicalControlID]));
DELETE [ChemicalControl01] 
OUTPUT DELETED.[ChemicalControlID] INTO @changed FROM [ChemicalControl01] base JOIN
(SELECT p.*, t.update_scope_local_id, t.scope_update_peer_key, t.local_update_peer_timestamp FROM @changeTable p JOIN [ChemicalControl01_tracking] t ON p.[ChemicalControlID] = t.[ChemicalControlID]) as changes ON changes.[ChemicalControlID] = base.[ChemicalControlID] WHERE (changes.update_scope_local_id = @sync_scope_local_id AND changes.scope_update_peer_key = changes.sync_update_peer_key) OR changes.local_update_peer_timestamp <= @sync_min_timestamp
UPDATE side SET
sync_row_is_tombstone = 1, 
update_scope_local_id = @sync_scope_local_id, 
scope_update_peer_key = changes.sync_update_peer_key, 
scope_update_peer_timestamp = changes.sync_update_peer_timestamp,
local_update_peer_key = 0
FROM 
[ChemicalControl01_tracking] side JOIN 
(SELECT p.[ChemicalControlID], p.sync_update_peer_timestamp, p.sync_update_peer_key, p.sync_create_peer_key, p.sync_create_peer_timestamp FROM @changed t JOIN @changeTable p ON p.[ChemicalControlID] = t.[ChemicalControlID]) AS changes ON changes.[ChemicalControlID] = side.[ChemicalControlID]
SELECT [ChemicalControlID] FROM @changeTable t WHERE NOT EXISTS (SELECT [ChemicalControlID] from @changed i WHERE t.[ChemicalControlID] = i.[ChemicalControlID])
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyInsertSoilErosion]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterlyInsertSoilErosion]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@SoilErosionID uniqueidentifier,
	@SoilErosionListID varchar(20),
	@VillagesInvolved nvarchar(100),
	@AreaDestroyed float,
	@ControlMeasures nvarchar(100),
	@AreaControlled float,
	@Remarks nvarchar(200),
	@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@RecordID
	
	IF NOT EXISTS(SELECT * FROM SoilErosion02 WHERE SoilErosionID=@SoilErosionID)
	BEGIN
	INSERT INTO SoilErosion02
	VALUES(@SoilErosionID,@SoilErosionListID,@VillagesInvolved,@AreaDestroyed,@ControlMeasures,
	@AreaControlled,@Remarks,@RecordID,@FormSerialID)
	END
	
	ELSE
	
	BEGIN
	UPDATE SoilErosion02
	SET SoilErosionListID=@SoilErosionListID,
	VillagesInvolved=@VillagesInvolved,
	AreaDestroyed=@AreaDestroyed,
	ControlMeasures=@ControlMeasures,
	AreaControlled=@AreaControlled,
	Remarks=@Remarks
		,FormSerialID=@FormSerialID
	WHERE SoilErosionID=@SoilErosionID
	END
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyInsertPlantHealth]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterlyInsertPlantHealth] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@PlantHealthID uniqueidentifier,
	@DiseaseID varchar(20),
	@CropID varchar(20),
	@ControlMeasures nvarchar(100),
	@AreaControled float,
	@HouseholdsInvolved int,
    @Comments nvarchar(100),
    @RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@RecordID
	
	IF NOT EXISTS(SELECT * FROM PlantHealth02 WHERE PlantHealthID=@PlantHealthID)
	BEGIN
	INSERT INTO PlantHealth02
    VALUES(@PlantHealthID,@DiseaseID,@CropID,@ControlMeasures,@AreaControled,@HouseholdsInvolved,
    @Comments,@RecordID,@FormSerialID)
	END
	
	ELSE

	BEGIN
	UPDATE PlantHealth02
	SET DiseaseID=@DiseaseID,
	CropID=@CropID,
	ControlMeasures=@ControlMeasures,
	AreaControled=@AreaControled,
	HouseholdsInvolved=@HouseholdsInvolved,
	Comments=@Comments
		,FormSerialID=@FormSerialID
	WHERE PlantHealthID=@PlantHealthID
	END
	
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyInsertIrrigation]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterlyInsertIrrigation] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
  @IrrigationID uniqueidentifier,
  @CropID nvarchar(200),
  @PlantedAreaRainySeason float,
  @PlantedAreaDrySeason float,
  @ProductionRainySeason float,
  @ProductionDrySeason float,
  @YieldRainySeason float,
  @YieldDrySeason float,
  @RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
		
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@RecordID
	
	IF NOT EXISTS(SELECT * FROM Irrigation02 WHERE IrrigationID=@IrrigationID)
	BEGIN
    INSERT INTO Irrigation02
    VALUES
    (
    @IrrigationID,
    @CropID,
    @PlantedAreaRainySeason,
    @PlantedAreaDrySeason,
    @ProductionRainySeason,
    @ProductionDrySeason,
    @YieldRainySeason,
    @YieldDrySeason,
    @RecordID,
    @FormSerialID
    )                       
	END
	
	ELSE
	
	BEGIN
	UPDATE Irrigation02
	SET 
	CropID=@CropID,
	PlantedAreaRainySeason=@PlantedAreaRainySeason,
	PlantedAreaDrySeason=@PlantedAreaDrySeason,
	ProductionRainySeason=@ProductionRainySeason,
	ProductionDrySeason=@ProductionDrySeason,
	YieldRainySeason=@YieldRainySeason,
	YieldDrySeason=@YieldDrySeason,
	FormSerialID=@FormSerialID
	WHERE IrrigationID=@IrrigationID
	END
	       
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyDeleteSoilErosion]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterlyDeleteSoilErosion]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@SoilErosionID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	DELETE SoilErosion02
	WHERE SoilErosionID=@SoilErosionID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyDeletePlantHealth]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterlyDeletePlantHealth] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@PlantHealthID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	DELETE PlantHealth02
	WHERE PlantHealthID=@PlantHealthID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyDeleteIrrigation]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterlyDeleteIrrigation] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@IrrigationID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	DELETE Irrigation02
	WHERE IrrigationID=@IrrigationID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspQuarterlyDeleteForm]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspQuarterlyDeleteForm] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
delete from CoopGroup02 where RecordID=@RecordID 
delete from CoopSaccos02 where RecordID=@RecordID  
delete from FarmersFieldSchool02 where RecordID=@RecordID  
delete from FoodCondition02 where RecordID=@RecordID  
delete from Irrigation02 where RecordID=@RecordID  
delete from PlantHealth02 where RecordID=@RecordID  
delete from ProdLand02 where RecordID=@RecordID  
delete from SoilErosion02 where RecordID=@RecordID 
delete from QuarterlyRecord where RecordID=@RecordID
delete from RecordInfo where RecordID=@RecordId
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyUpdateTargets]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyUpdateTargets]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@CropGroupListID int,
	@GroupID int,
	@CropName nvarchar(50),
	@Status int,
	@TargetImplementationAndCropPricesID uniqueidentifier,
	--@ExpectedArea float,
	--@ExpectedProd float,
	@AreaDone float,
	@ProdDone float,
	@Price float,
	@Explanation nvarchar(50),
	@MonthlyRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@MonthlyRecordID
	
	IF NOT EXISTS(SELECT * FROM TargetImplementationAndCropPrices01 WHERE TargetImplementationAndCropPricesID=@TargetImplementationAndCropPricesID)
	
	BEGIN
	DECLARE @CropID int
	
	BEGIN TRANSACTION
	INSERT INTO CropGroupList
	VALUES(@GroupID,@CropName,@Status)
	
	-- Get back the customer ID
	SELECT @CropID = SCOPE_IDENTITY()
	
	INSERT INTO TargetImplementationAndCropPrices01
	(
	TargetImplementationAndCropPricesID,
	CropID,
	AreaDone,
	ProdDone,
	Price,
	Explanation,
	MonthlyRecordID,
	FormSerialID
	)
	VALUES(@TargetImplementationAndCropPricesID,
	       @CropID,
	       --@ExpectedArea,
	       --@ExpectedProd,
	       @AreaDone,
	       @ProdDone,
	       @Price,
	       @Explanation,
	       @MonthlyRecordID,
	       @FormSerialID
	       )
	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE 
	CropGroupList
	SET 
	CropName=@CropName
	WHERE 
	CropGroupListID=@CropGroupListID and Status=1
	END
	
	BEGIN
	UPDATE TargetImplementationAndCropPrices01
	SET 
	--ExpectedArea=@ExpectedArea,
	--ExpectedProd=@ExpectedProd,
	AreaDone=@AreaDone,
	ProdDone=@ProdDone,
	Price=@Price,
	Explanation=@Explanation,
	FormSerialID=@FormSerialID
	WHERE 
	TargetImplementationAndCropPricesID=@TargetImplementationAndCropPricesID
	END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyUpdateLivestockSlaughtered]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyUpdateLivestockSlaughtered]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@LivestockListID int,
	@LivestockName nvarchar(50),
	@LivestockStatus int,
	@LivestockSlaughteredID uniqueidentifier,
	@TotalNumberSlaughteredThisMonth int,
	@AverageRetailPriceKg float,
	@MonthlyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@MonthlyRecordID
	
   IF NOT EXISTS(SELECT * FROM LivestockSlaughtered01 WHERE LivestockSlaughteredID=@LivestockSlaughteredID)
   BEGIN
   DECLARE @LivestockID int
   
   BEGIN TRANSACTION
   INSERT INTO LivestockSlaughList
   VALUES(@LivestockName,@LivestockStatus)

   -- Get back the customer ID
   SELECT @LivestockID = SCOPE_IDENTITY()
   
   INSERT INTO LivestockSlaughtered01
   VALUES(@LivestockSlaughteredID,@LivestockID,@TotalNumberSlaughteredThisMonth,
   @AverageRetailPriceKg,@MonthlyRecordID,@FormSerialID)
   
   COMMIT
   END
   ELSE
	
    BEGIN
	UPDATE LivestockSlaughList
	SET LivestockName=@LivestockName
	WHERE LivestockListID=@LivestockListID and LivestockStatus=1
	END
	
	BEGIN
	UPDATE LivestockSlaughtered01
	SET TotalNumberSlaughteredThisMonth=@TotalNumberSlaughteredThisMonth,
	AverageRetailPriceKg=@AverageRetailPriceKg
		,FormSerialID=@FormSerialID
	WHERE LivestockSlaughteredID=@LivestockSlaughteredID
	END
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertWeatherCondition]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyInsertWeatherCondition]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@WeatherCondition uniqueidentifier,
@NumberOfDays int,
@AmountOfRain float,
@Explanation nvarchar(200),
@Disaster nvarchar(400),
@Activity nvarchar(400),
@MonthlyRecordID uniqueidentifier

	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@MonthlyRecordID
	
	IF NOT EXISTS(select * from WeatherCondition01 where MonthlyRecordID=@MonthlyRecordID)
BEGIN
	insert into WeatherCondition01
	values(@WeatherCondition,@NumberOfDays,@AmountOfRain,@Explanation,@Disaster,@Activity,@MonthlyRecordID,@FormSerialID)	
END

ELSE

BEGIN
    update WeatherCondition01
    set NumberOfDays=@NumberOfDays,AmountOfRain=@AmountOfRain,Explanation=@Explanation,Disaster=@Disaster,Activity=@Activity
    	,FormSerialID=@FormSerialID
    where MonthlyRecordID=@MonthlyRecordID
END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertVisitors]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyInsertVisitors]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@PeopleWhoVisitTheVillageID uniqueidentifier,
	@VisitingDate datetime,
	@NameOfVisitor nvarchar(50),
	@Address nvarchar(50),
	@MainPurposeOfVisit nvarchar(200),
	@InstructionsAdviceProvided nvarchar(200),
	@MonthlyRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@MonthlyRecordID
	
	IF NOT EXISTS(SELECT * FROM PeopleWhoVisitTheVillage01 WHERE PeopleWhoVisitTheVillageID=@PeopleWhoVisitTheVillageID)
	
BEGIN
	INSERT INTO PeopleWhoVisitTheVillage01
	VALUES(@PeopleWhoVisitTheVillageID,@VisitingDate,@NameOfVisitor,@Address,@MainPurposeOfVisit,@InstructionsAdviceProvided,@MonthlyRecordID,@FormSerialID)
END
	
	ELSE
	
BEGIN
	UPDATE PeopleWhoVisitTheVillage01
	SET VisitingDate=@VisitingDate,NameOfVisitor=@NameOfVisitor,Address=@Address,MainPurposeOfVisit=@MainPurposeOfVisit,InstructionsAdviceProvided=@InstructionsAdviceProvided
		,FormSerialID=@FormSerialID
	WHERE PeopleWhoVisitTheVillageID=@PeopleWhoVisitTheVillageID
END
	
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertMedication]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyInsertMedication]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@MedicationID uniqueidentifier,
	@LivestockListID nvarchar(20),
	@PestDiseaseListID nvarchar(20),
	@NumberAffected int,
	@NumberTreated int,
	@NumberRecovered int,
	@NumberDied int,
	@TreatmentMedicineApplied nvarchar(100),
	@MonthlyRecordID uniqueidentifier
	
	
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@MonthlyRecordID
	
	IF NOT EXISTS(SELECT * FROM Medication01 WHERE MedicationID=@MedicationID)
	
	BEGIN
	INSERT INTO Medication01
	VALUES(@MedicationID,@LivestockListID,@PestDiseaseListID,@NumberAffected,@NumberTreated,
	@NumberRecovered,@NumberDied,@TreatmentMedicineApplied,@MonthlyRecordID,@FormSerialID)
	END
	
	ELSE
	
	BEGIN
	UPDATE Medication01
	SET LivestockListID=@LivestockListID,
	PestDiseaseListID=@PestDiseaseListID,
	NumberAffected=@NumberAffected,
	NumberTreated=@NumberTreated,
	NumberRecovered=@NumberRecovered,
	NumberDied=@NumberDied,
	TreatmentMedicineApplied=@TreatmentMedicineApplied
		,FormSerialID=@FormSerialID
	WHERE MedicationID=@MedicationID
	END
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertMeatInspection]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyInsertMeatInspection] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@MeatInspectionID uniqueidentifier,
	@NameofPlaceForSlaughter nvarchar(100) ,
	@TypeOfAnimal nvarchar(20),
	@NumberOfAnimalsAffected int,
	@ReasonsForCondemnations nvarchar(200),
	@NumberOfCases int,
	@MonthlyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
		
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@MonthlyRecordID
	
	IF NOT EXISTS(SELECT * FROM MeatInspection01 WHERE MeatInspectionID=@MeatInspectionID)
	BEGIN
	INSERT INTO MeatInspection01
	VALUES(@MeatInspectionID,@NameofPlaceForSlaughter,@TypeOfAnimal,@NumberOfAnimalsAffected,
	@ReasonsForCondemnations,@NumberOfCases,@MonthlyRecordID,@FormSerialID)
	END
	
	ELSE
	
	BEGIN
	
	UPDATE MeatInspection01
	SET NameofPlaceForSlaughter=@NameofPlaceForSlaughter,
	TypeOfAnimal=@TypeOfAnimal,
	NumberOfAnimalsAffected=@NumberOfAnimalsAffected,
	ReasonsForCondemnations=@ReasonsForCondemnations,
	NumberOfCases=@NumberOfCases
		,FormSerialID=@FormSerialID
	WHERE MeatInspectionID=@MeatInspectionID
	END
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertDipping]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyInsertDipping]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@DippingSprayingVaccinationID uniqueidentifier,
	@LivestockListID nvarchar(20),
	@NumberDipped int,
	@DippingMedicineApplied nvarchar(100),
	@NumberSprayed int,
	@SprayMedicineApplied nvarchar(100),
	@NumberVaccinated int,
	@VaccineApplied nvarchar(100),
	@MonthlyRecordID uniqueidentifier
		
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@MonthlyRecordID
	
	IF NOT EXISTS(SELECT * FROM DippingSprayingVaccination01 WHERE DippingSprayingVaccinationID=@DippingSprayingVaccinationID)
	
	BEGIN
	INSERT INTO DippingSprayingVaccination01
	VALUES(@DippingSprayingVaccinationID,@LivestockListID,@NumberDipped,@DippingMedicineApplied,
	@NumberSprayed,@SprayMedicineApplied,@NumberVaccinated,@VaccineApplied,@MonthlyRecordID,@FormSerialID)
	END
	
	ELSE
	
	BEGIN
	UPDATE DippingSprayingVaccination01
	SET LivestockListID=@LivestockListID,
	NumberDipped=@NumberDipped,
	DippingMedicineApplied=@DippingMedicineApplied,
	NumberSprayed=@NumberSprayed,
	SprayMedicineApplied=@SprayMedicineApplied,
	NumberVaccinated=@NumberVaccinated,
	VaccineApplied=@VaccineApplied
		,FormSerialID=@FormSerialID
	WHERE DippingSprayingVaccinationID=@DippingSprayingVaccinationID
	END
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertComments]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyInsertComments]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@CommentsOfVillageOfficerID uniqueidentifier,
	@Achievement nvarchar(2000),
	@Challenges nvarchar(2000),
	@MonthlyRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>

	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@MonthlyRecordID
	
	IF NOT EXISTS(SELECT * FROM CommentsOfVillageOfficer01 WHERE MonthlyRecordID=@MonthlyRecordID)
	
BEGIN
	
	INSERT INTO CommentsOfVillageOfficer01
	VALUES(@CommentsOfVillageOfficerID,@Achievement,@Challenges,@MonthlyRecordID,@FormSerialID)
	
END
	
	ELSE
	
BEGIN
	
	UPDATE CommentsOfVillageOfficer01
	SET Achievement=@Achievement,Challenges=@Challenges
		,FormSerialID=@FormSerialID
	WHERE MonthlyRecordID=@MonthlyRecordID
	
END
	
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyInsertChemicalControl]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyInsertChemicalControl] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@ChemicalControlID uniqueidentifier,
	@PestID nvarchar(30),
	@CropID nvarchar(30),
	@Severity nvarchar(10),
	@AffectedArea float,
	@NumberOfVillageAffected int,
	@PestcideApplied nvarchar(100),
	@AmountOfPestcideApplied float,
	@Unit nvarchar(10), 
	@NumberOfVillagesServed int,
	@NumberOfHouseHoldServed int,
	@AreaRescued float,
	@Remarks nvarchar(200),
	@MonthlyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@MonthlyRecordID
	
    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	IF NOT EXISTS(SELECT * FROM ChemicalControl01 WHERE ChemicalControlID=@ChemicalControlID)
	BEGIN
	INSERT INTO ChemicalControl01
	VALUES(
	@ChemicalControlID,
	@PestID,
	@CropID,
	@Severity,
	@AffectedArea,
	@NumberOfVillageAffected,
	@PestcideApplied,
	@AmountOfPestcideApplied,
	@Unit,
	@NumberOfVillagesServed,
	@NumberOfHouseHoldServed,
	@AreaRescued,
	@Remarks,
	@MonthlyRecordID,
	@FormSerialID
	)
	END
	ELSE
	UPDATE ChemicalControl01
	SET 
	PestID=@PestID,
	CropID=@CropID,
	Severity=@Severity,
	AffectedArea=@AffectedArea,
	NumberOfVillageAffected=@NumberOfVillageAffected,
	PestcideApplied=@PestcideApplied,
	AmountOfPestcideApplied=@AmountOfPestcideApplied,
	Unit=@Unit,
	NumberOfVillagesServed=@NumberOfVillagesServed,
	NumberOfHouseHoldServed=@NumberOfHouseHoldServed,
	AreaRescued=@AreaRescued,
	Remarks=@Remarks,
	FormSerialID=@FormSerialID
	WHERE ChemicalControlID=@ChemicalControlID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyFillWeatherCondition]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyFillWeatherCondition] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@MonthlyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT        
WeatherCondition, 
NumberOfDays, 
AmountOfRain, 
Explanation, 
Disaster, 
Activity, 
MonthlyRecordID, 
FormSerialID
FROM            
WeatherCondition01
WHERE        
(MonthlyRecordID = @MonthlyRecordID)
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyFillLivestockServices]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyFillLivestockServices] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@MonthlyRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT        
LivestockList.LivestockListID, 
LivestockList.LivestockName, 
LivestockService01.LivestockServiceID, 
LivestockService01.LivestockID, 
LivestockService01.CuttingHoof, 
LivestockService01.Castration, 
LivestockService01.AI, 
LivestockService01.CuttingHorn, 
LivestockService01.Branding, 
LivestockService01.CuttingTail, 
LivestockService01.CuttingTeeth, LivestockService01.CuttingBillBeak, LivestockService01.MonthlyRecordID
FROM            
LivestockList 
INNER JOIN
LivestockService01 ON LivestockList.LivestockListID = LivestockService01.LivestockID
WHERE        
(LivestockService01.MonthlyRecordID = @MonthlyRecordID)
ORDER BY LivestockList.LivestockListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteVisitors]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyDeleteVisitors]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@PeopleWhoVisitTheVillageID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	DELETE PeopleWhoVisitTheVillage01
	WHERE PeopleWhoVisitTheVillageID=@PeopleWhoVisitTheVillageID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteTargets]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyDeleteTargets]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@CropID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE TargetImplementationAndCropPrices01
	WHERE CropID=@CropID AND @CropID>92
	
	DELETE CropGroupList
	WHERE CropGroupListID=@CropID AND Status=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteMedication]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyDeleteMedication]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@MedicationID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	DELETE Medication01
	WHERE MedicationID=@MedicationID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteMeatInspection]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyDeleteMeatInspection] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@MeatInspectionID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	DELETE MeatInspection01
	WHERE MeatInspectionID=@MeatInspectionID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteLivestockSlaughtered]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyDeleteLivestockSlaughtered]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@LivestockID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE LivestockSlaughtered01
	WHERE LivestockID=@LivestockID AND LivestockID>6
	
	DELETE LivestockSlaughList
	WHERE LivestockListID=@LivestockID AND LivestockStatus=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteForm]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyDeleteForm]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
delete from ChemicalControl01 where MonthlyRecordID=@RecordID
delete from CommentsOfVillageOfficer01 where MonthlyRecordID=@RecordID
delete from DippingSprayingVaccination01 where MonthlyRecordID=@RecordID 
delete from LivestockService01 where MonthlyRecordID=@RecordID 
delete from LivestockSlaughtered01 where MonthlyRecordID=@RecordID 
delete from MeatInspection01 where MonthlyRecordID=@RecordID 
delete from Medication01 where MonthlyRecordID=@RecordID 
delete from PeopleWhoVisitTheVillage01 where MonthlyRecordID=@RecordID 
delete from ProdMilk01 where MonthlyRecordID=@RecordID 
delete from ProdSkin01 where MonthlyRecordID=@RecordID
delete from TargetImplementationAndCropPrices01 where MonthlyRecordID=@RecordID 
delete from WeatherCondition01 where MonthlyRecordID=@RecordID
delete from MonthlyRecord where RecordID=@RecordID
delete from RecordInfo where RecordID=@RecordID 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteDipping]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyDeleteDipping]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@DippingSprayingVaccinationID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	DELETE DippingSprayingVaccination01
	WHERE DippingSprayingVaccinationID=@DippingSprayingVaccinationID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspMonthlyDeleteChemicalControl]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspMonthlyDeleteChemicalControl]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@ChemicalControlID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	DELETE ChemicalControl01
	WHERE ChemicalControlID=@ChemicalControlID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateAnimalDrawn]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualUpdateAnimalDrawn]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@DrawnListID int,
@DrawnName nvarchar(100),
@DrawnType nvarchar(50),
@DrawnStatus int,
@AnimalDrawnID uniqueidentifier,
@WorkingIndividuallyOwned int,
@WorkingGroupOwned int,
@AnnualRecordID uniqueidentifier

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
declare @FormSerialID nvarchar(50)
select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
IF NOT EXISTS(SELECT * FROM AnimalDrawn03 WHERE AnimalDrawnID=@AnimalDrawnID)
BEGIN
	
DECLARE @DrawnID int
	
BEGIN TRANSACTION
INSERT INTO DrawnList
VALUES(@DrawnName,@DrawnType,@DrawnStatus)
	
	-- Get back the customer ID
SET @DrawnID = SCOPE_IDENTITY()
	
INSERT INTO AnimalDrawn03
VALUES(
@AnimalDrawnID,
@DrawnID,
@WorkingIndividuallyOwned,
@WorkingGroupOwned,
@AnnualRecordID,
@FormSerialID)
	
COMMIT
END

ELSE

BEGIN
UPDATE DrawnList
SET 
DrawnName=@DrawnName
WHERE DrawnListID=@DrawnListID and DrawnStatus=1
END
	
BEGIN
UPDATE AnimalDrawn03
SET 
WorkingIndividuallyOwned=@WorkingIndividuallyOwned,
WorkingGroupOwned=@WorkingGroupOwned,
FormSerialID=@FormSerialID
WHERE AnimalDrawnID=@AnimalDrawnID
END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateMachines]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualUpdateMachines]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@MachineryListID int,
@MachineryName nvarchar(100),
@MachineryStatus int,
@MachinesID uniqueidentifier,
@WorkingIndividuallyOwned int,
@WorkingGroupOwned int,
@NotWorkingIndividuallyOwned int,
@NotWorkingGroupowned int,
@ReasonForNotWorking nvarchar(500),
@AnnualRecordID uniqueidentifier

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
declare @FormSerialID nvarchar(50)
select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
IF NOT EXISTS(SELECT * FROM Machines03 WHERE MachinesID=@MachinesID)
BEGIN
	
DECLARE @MachineryID int
	
BEGIN TRANSACTION
INSERT INTO MachineryList
VALUES(@MachineryName,@MachineryStatus)
	
	-- Get back the customer ID
SET @MachineryID = SCOPE_IDENTITY()
	
INSERT INTO Machines03
VALUES(
@MachinesID,
@MachineryID,
@WorkingIndividuallyOwned,
@WorkingGroupOwned,
@NotWorkingIndividuallyOwned,
@NotWorkingGroupowned,
@ReasonForNotWorking,
@AnnualRecordID,
@FormSerialID)
	
COMMIT
END

ELSE

BEGIN
UPDATE MachineryList
SET 
MachineryName=@MachineryName
WHERE MachineryListID=@MachineryListID and MachineryStatus=1
END
	
BEGIN
UPDATE Machines03
SET 
WorkingIndividuallyOwned=@WorkingIndividuallyOwned,
WorkingGroupOwned=@WorkingGroupOwned,
NotWorkingIndividuallyOwned=@NotWorkingIndividuallyOwned,
NotWorkingGroupowned=@NotWorkingGroupowned,
ReasonForNotWorking=@ReasonForNotWorking,
FormSerialID=@FormSerialID
WHERE MachinesID=@MachinesID
END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateMachineryDrawn]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualUpdateMachineryDrawn]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@DrawnListID int,
@DrawnName nvarchar(100),
@DrawnType nvarchar(50),
@DrawnStatus int,
@MachineryDrawnID uniqueidentifier,
@WorkingIndividuallyOwned int,
@WorkingGroupOwned int,
@AnnualRecordID uniqueidentifier

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
declare @FormSerialID nvarchar(50)
select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
IF NOT EXISTS(SELECT * FROM MachineryDrawn03 WHERE MachineryDrawnID=@MachineryDrawnID)
BEGIN
	
DECLARE @DrawnID int
	
BEGIN TRANSACTION
INSERT INTO DrawnList
VALUES(@DrawnName,@DrawnType,@DrawnStatus)
	
	-- Get back the customer ID
SET @DrawnID = SCOPE_IDENTITY()
	
INSERT INTO MachineryDrawn03
VALUES(
@MachineryDrawnID,
@DrawnID,
@WorkingIndividuallyOwned,
@WorkingGroupOwned,
@AnnualRecordID,
@FormSerialID)
	
COMMIT
END

ELSE

BEGIN
UPDATE DrawnList
SET 
DrawnName=@DrawnName
WHERE DrawnListID=@DrawnListID and DrawnStatus=1
END
	
BEGIN
UPDATE MachineryDrawn03
SET 
WorkingIndividuallyOwned=@WorkingIndividuallyOwned,
WorkingGroupOwned=@WorkingGroupOwned,
FormSerialID=@FormSerialID
WHERE MachineryDrawnID=@MachineryDrawnID
END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateLivestockInfrastructure]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualUpdateLivestockInfrastructure]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@InfraListID int,
	@InfraName nvarchar(50),
	@InfraStatus int,
	@LivestockInfrastructureID uniqueidentifier,
	@Working int,
	@NotWorking int,
	@NumberRequired int,
	@NumberOfRegistered int,
	@ReasonsForNotWorking nvarchar(500),
	@AnnualRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
	IF NOT EXISTS(SELECT * FROM LivestockInfrastructure03 WHERE LivestockInfrastructureID=@LivestockInfrastructureID)
	
	BEGIN
	DECLARE @InfraID int
	
	BEGIN TRANSACTION
	INSERT INTO InfraList
	VALUES(@InfraName,@InfraStatus)
	
	-- Get back the customer ID
	SET @InfraID = SCOPE_IDENTITY()
	
	INSERT INTO LivestockInfrastructure03
	VALUES(@LivestockInfrastructureID,@InfraID,@Working,@NotWorking,@NumberRequired,
	@NumberOfRegistered,@ReasonsForNotWorking,@AnnualRecordID,@FormSerialID)
	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE InfraList
	SET InfraName=@InfraName
	WHERE InfraListID=@InfraListID and InfraStatus=1
	END
	
	BEGIN
	UPDATE LivestockInfrastructure03
	SET 
	Working=@Working,
	NotWorking=@NotWorking,
	NumberRequired=@NumberRequired,
	NumberOfRegistered=@NumberOfRegistered,
	ReasonsForNotWorking=@ReasonsForNotWorking,
	FormSerialID=@FormSerialID
	WHERE LivestockInfrastructureID=@LivestockInfrastructureID
	END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateImplements]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualUpdateImplements]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@ImplementsListID int,
	@ImplementNameEn nvarchar(50),
	@ImplementNameSw nvarchar(50),
	@ImplementStatus int,
	@HandOperatedImplementsID uniqueidentifier,
	@NumberOfImplements int,	
	@AnnualRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
	IF NOT EXISTS(SELECT * FROM HandOperatedImplements03 WHERE HandOperatedImplementsID=@HandOperatedImplementsID)
	
	BEGIN
	DECLARE @ImplementsID int
	
	BEGIN TRANSACTION
	INSERT INTO ImplementsList(ImplementNameSw,ImplementStatus)
	VALUES(@ImplementNameSw,@ImplementStatus)
	
	-- Get back the customer ID
	SELECT @ImplementsID = SCOPE_IDENTITY()
	
	INSERT INTO HandOperatedImplements03
	VALUES(@HandOperatedImplementsID,@ImplementsID,@NumberOfImplements,@AnnualRecordID,@FormSerialID)
	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE ImplementsList
	SET ImplementNameSw=@ImplementNameSw
	
	WHERE ImplementsListID=@ImplementsListID and ImplementStatus=1
	END
	
	BEGIN
	UPDATE HandOperatedImplements03
	SET NumberOfImplements=@NumberOfImplements
		,FormSerialID=@FormSerialID
	WHERE HandOperatedImplementsID=@HandOperatedImplementsID
	END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateTVAndRadio]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualUpdateTVAndRadio]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@MediaListID int,
	@MediaID int,
	@MediaName nvarchar(50),
	@MediaStatus int,
	@TVAndRadioStationID uniqueidentifier,
	@NumberOfVillagesCovered int,	
	@AnnualRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
	IF NOT EXISTS(SELECT * FROM TVAndRadioStation03 WHERE TVAndRadioStationID=@TVAndRadioStationID)
	
	BEGIN
	DECLARE @StationID int
	
	BEGIN TRANSACTION
	INSERT INTO MediaList
	VALUES(@MediaID,@MediaName,@MediaStatus)
	
	-- Get back the customer ID
	SET @StationID = SCOPE_IDENTITY()
	
	INSERT INTO TVAndRadioStation03
	VALUES(@TVAndRadioStationID,@StationID,@NumberOfVillagesCovered,@AnnualRecordID,@FormSerialID)
	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE MediaList
	SET MediaName=@MediaName
	WHERE MediaListID=@MediaListID and MediaStatus=1
	END
	
	BEGIN
	UPDATE TVAndRadioStation03
	SET NumberOfVillagesCovered=@NumberOfVillagesCovered,
		FormSerialID=@FormSerialID
	WHERE TVAndRadioStationID=@TVAndRadioStationID
	END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateTelecom]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualUpdateTelecom]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@TelecomCompaListID int,
	@MediaName nvarchar(50),
	@MediaStatus int,
	@TelecommunicationID uniqueidentifier,
	@NumberOfVillagesCovered int,	
	@AnnualRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
	IF NOT EXISTS(SELECT * FROM Telecommunication03 WHERE TelecommunicationID=@TelecommunicationID)
	
	BEGIN
	DECLARE @TelecomCompID int
	
	BEGIN TRANSACTION
	INSERT INTO TelecomCompaList
	VALUES(@MediaName,@MediaStatus)
	
	-- Get back the customer ID
	SET @TelecomCompID = SCOPE_IDENTITY()
	
	INSERT INTO Telecommunication03
	VALUES(@TelecommunicationID,@TelecomCompID,@NumberOfVillagesCovered,@AnnualRecordID,@FormSerialID)
	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE TelecomCompaList
	SET MediaName=@MediaName
	WHERE TelecomCompaListID=@TelecomCompaListID and MediaStatus=1
	END
	
	BEGIN
	UPDATE Telecommunication03
	SET NumberOfVillagesCovered=@NumberOfVillagesCovered,
		FormSerialID=@FormSerialID
	WHERE TelecommunicationID=@TelecommunicationID
	END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualUpdateProcessingMachine]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualUpdateProcessingMachine]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@ProcessingMachineListID int,
	@MachineName nvarchar(30),
	@MachineStatus int,
	@ProcessingMachinesID uniqueidentifier,
	@WorkingIndividuallyOwned int,
	@WorkingGroupowned int,	
	@NotWorkingIndividuallyOwned int,
	@NotWorkingGroupowned int,
	@ReasonForNotWorking nvarchar(500),
	@AnnualRecordID uniqueidentifier
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
	IF NOT EXISTS(SELECT * FROM ProcessingMachines03 WHERE ProcessingMachinesID=@ProcessingMachinesID)
	
	BEGIN
	DECLARE @MachineID int
	
	BEGIN TRANSACTION
	INSERT INTO ProcessingMachinesList
	VALUES(@MachineName,@MachineStatus)
	
	-- Get back the customer ID
	SET @MachineID = SCOPE_IDENTITY()
	
	INSERT INTO ProcessingMachines03
	VALUES(
	@ProcessingMachinesID,
	@MachineID,
	@WorkingIndividuallyOwned,
	@WorkingGroupowned,
	@NotWorkingIndividuallyOwned,
	@NotWorkingGroupowned,
	@ReasonForNotWorking,
	@AnnualRecordID,
	@FormSerialID)
	COMMIT
	
	END
	
	ELSE
	
    BEGIN
	UPDATE ProcessingMachinesList
	SET MachineName=@MachineName
	WHERE ProcessingMachineListID=@ProcessingMachineListID and MachineStatus=1
	END
	
	BEGIN
	UPDATE ProcessingMachines03
	SET 
	WorkingIndividuallyOwned=@WorkingIndividuallyOwned,
	WorkingGroupowned=@WorkingGroupowned,
	NotWorkingIndividuallyOwned=@NotWorkingIndividuallyOwned,
	NotWorkingGroupowned=@NotWorkingGroupowned,
	ReasonForNotWorking=@ReasonForNotWorking,
	FormSerialID=@FormSerialID
	WHERE ProcessingMachinesID=@ProcessingMachinesID
	END

END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnuallyFillImprovedPasture]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnuallyFillImprovedPasture]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT        
ImprovedPastureID, 
NumberOfFarms, 
Area, 
SeedProduction, 
AmountOfHayBales, 
Remarks, 
AnnualRecordID, 
FormSerialID
FROM            
ImprovedPasture03
WHERE        
(AnnualRecordID = @AnnualRecordID)
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnuallyDeleteForm]    Script Date: 05/06/2013 17:35:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnuallyDeleteForm] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@RecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
delete from AiredPrograms03 where AnnualRecordID=@RecordID
delete from AnimalDrawn03 where AnnualRecordID=@RecordID 
delete from BasicInformation03 where AnnualRecordID=@RecordID 
delete from ContractFarming03 where AnnualRecordID=@RecordID 
delete from CropResidue03 where AnnualRecordID=@RecordID 
delete from FarmersFieldSchool03 where AnnualRecordID=@RecordID 
delete from Fertilizer03 where AnnualRecordID=@RecordID 
delete from GrazingLand03 where AnnualRecordID=@RecordID 
delete from HandOperatedImplements03 where AnnualRecordID=@RecordID 
delete from ImprovedPasture03 where AnnualRecordID=@RecordID 
delete from ImprovedSeeds03 where AnnualRecordID=@RecordID 
delete from IrrigationScheme03 where AnnualRecordID=@RecordID 
delete from Livestock03 where AnnualRecordID=@RecordID 
delete from LivestockInfrastructure03 where AnnualRecordID=@RecordID
delete from MachineryDrawn03 where AnnualRecordID=@RecordID 
delete from Machines03 where AnnualRecordID=@RecordID 
delete from Pestcide03 where AnnualRecordID=@RecordID 
delete from ProcessingMachines03 where AnnualRecordID=@RecordID
delete from Telecommunication03 where AnnualRecordID=@RecordID 
delete from TVAndRadioStation03 where AnnualRecordID=@RecordID
delete from AnnualRecord where RecordID=@RecordID
delete from RecordInfo where RecordID=@RecordID 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualInsertImprovedPasture]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualInsertImprovedPasture]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@ImprovedPastureID uniqueidentifier,
	@NumberOfFarms int,
	@Area float,
	@SeedProduction float,
	@AmountOfHayBales float,
	@Remarks nvarchar(400),
	@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
	IF NOT EXISTS(SELECT * FROM ImprovedPasture03 WHERE AnnualRecordID=@AnnualRecordID)
BEGIN
INSERT INTO ImprovedPasture03
VALUES(@ImprovedPastureID,@NumberOfFarms,@Area,@SeedProduction,@AmountOfHayBales,@Remarks,@AnnualRecordID,@FormSerialID)
END

ELSE
BEGIN
UPDATE ImprovedPasture03
SET NumberOfFarms=@NumberOfFarms,Area=@Area,SeedProduction=@SeedProduction,AmountOfHayBales=@AmountOfHayBales,Remarks=@Remarks 
	,FormSerialID=@FormSerialID
WHERE AnnualRecordID=@AnnualRecordID
END
	 
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualInsertCropResidue]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualInsertCropResidue]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@CropResidueID uniqueidentifier,
@TypeOfCrop nvarchar(200),
@AmountOfHayBales float,
@AreaOfFarmsPlotsGazedinSitu float,
@Remarks nvarchar(400),
@AnnualRecordID uniqueidentifier

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
	IF NOT EXISTS(SELECT * FROM CropResidue03 WHERE CropResidueID=@CropResidueID)
	BEGIN
	INSERT INTO CropResidue03
    VALUES(@CropResidueID,@TypeOfCrop,@AmountOfHayBales,@AreaOfFarmsPlotsGazedinSitu,
    @Remarks,@AnnualRecordID,@FormSerialID)
	END
	
	ELSE
	
	BEGIN
	UPDATE CropResidue03
	SET TypeOfCrop=@TypeOfCrop,
	AmountOfHayBales=@AmountOfHayBales,
	AreaOfFarmsPlotsGazedinSitu=@AreaOfFarmsPlotsGazedinSitu,
	Remarks=@Remarks
		,FormSerialID=@FormSerialID
	WHERE CropResidueID=@CropResidueID
	END
	
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualInsertBasicInformation]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualInsertBasicInformation]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	
	@BasicInformationID uniqueidentifier,
	@MaleHeadedHousehold int,
	@FemaleHeadedHousehold int,
	@NumberOfHouseholdEngagingInAgriculture int,
	@PopulationMale int,
	@PopulationFemale int,
	@PopulationEngagingInAgriculture int,
	@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	declare @FormSerialID nvarchar(50)
	select @FormSerialID= FormSerialNumber from RecordInfo  where RecordID=@AnnualRecordID
	
	
	IF NOT EXISTS(SELECT * FROM BasicInformation03 WHERE AnnualRecordID=@AnnualRecordID)
BEGIN
	INSERT INTO BasicInformation03
	VALUES(@BasicInformationID,@MaleHeadedHousehold,@FemaleHeadedHousehold,@NumberOfHouseholdEngagingInAgriculture,@PopulationMale,@PopulationFemale,@PopulationEngagingInAgriculture,@AnnualRecordID,@FormSerialID)
END
	
	ELSE
BEGIN
	UPDATE BasicInformation03
	SET MaleHeadedHousehold=@MaleHeadedHousehold,FemaleHeadedHousehold=@FemaleHeadedHousehold,NumberOfHouseholdEngagingInAgriculture=@NumberOfHouseholdEngagingInAgriculture,PopulationMale=@PopulationMale,PopulationFemale=@PopulationFemale,PopulationEngagingInAgriculture=@PopulationEngagingInAgriculture
	,FormSerialID=@FormSerialID
	WHERE AnnualRecordID=@AnnualRecordID
END
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillTVAndRadio]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillTVAndRadio] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     MediaList.MediaListID, MediaList.MediaID, MediaList.MediaName, TVAndRadioStation03.TVAndRadioStationID, TVAndRadioStation03.StationID, 
                      TVAndRadioStation03.NumberOfVillagesCovered, TVAndRadioStation03.AnnualRecordID
FROM         MediaList INNER JOIN
                      TVAndRadioStation03 ON MediaList.MediaListID = TVAndRadioStation03.StationID
WHERE     (TVAndRadioStation03.AnnualRecordID = @AnnualRecordID)
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillTV]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillTV] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     MediaGroup.MediaGroupID, MediaGroup.MediaDescription, MediaList.MediaListID, MediaList.MediaID, MediaList.MediaName, MediaList.MediaStatus, 
                      TVAndRadioStation03.TVAndRadioStationID, TVAndRadioStation03.StationID, TVAndRadioStation03.NumberOfVillagesCovered, TVAndRadioStation03.AnnualRecordID, 
                      TVAndRadioStation03.FormSerialID
FROM         MediaGroup INNER JOIN
                      MediaList ON MediaGroup.MediaGroupID = MediaList.MediaID INNER JOIN
                      TVAndRadioStation03 ON MediaList.MediaListID = TVAndRadioStation03.StationID
WHERE     (MediaGroup.MediaGroupID = 1) AND (TVAndRadioStation03.AnnualRecordID = @AnnualRecordID)
ORDER BY MediaList.MediaListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillTelecom]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillTelecom] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     TelecomCompaList.TelecomCompaListID, TelecomCompaList.MediaName, TelecomCompaList.MediaStatus, Telecommunication03.TelecommunicationID, 
                      Telecommunication03.TelecomCompID, Telecommunication03.NumberOfVillagesCovered, Telecommunication03.AnnualRecordID, 
                      Telecommunication03.FormSerialID
FROM         TelecomCompaList INNER JOIN
                      Telecommunication03 ON TelecomCompaList.TelecomCompaListID = Telecommunication03.TelecomCompID
WHERE     (Telecommunication03.AnnualRecordID = @AnnualRecordID)
ORDER BY TelecomCompaList.TelecomCompaListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillRadio]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillRadio]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     MediaGroup.MediaGroupID, MediaGroup.MediaDescription, MediaList.MediaListID, MediaList.MediaID, MediaList.MediaName, MediaList.MediaStatus, 
                      TVAndRadioStation03.TVAndRadioStationID, TVAndRadioStation03.StationID, TVAndRadioStation03.NumberOfVillagesCovered, TVAndRadioStation03.AnnualRecordID, 
                      TVAndRadioStation03.FormSerialID
FROM         MediaGroup INNER JOIN
                      MediaList ON MediaGroup.MediaGroupID = MediaList.MediaID INNER JOIN
                      TVAndRadioStation03 ON MediaList.MediaListID = TVAndRadioStation03.StationID
WHERE     (MediaGroup.MediaGroupID = 2) AND (TVAndRadioStation03.AnnualRecordID = @AnnualRecordID)
ORDER BY MediaList.MediaListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillProcessingMachines]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillProcessingMachines] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     ProcessingMachinesList.ProcessingMachineListID, ProcessingMachinesList.MachineName, ProcessingMachinesList.MachineStatus, 
                      ProcessingMachines03.ProcessingMachinesID, ProcessingMachines03.MachineID, ProcessingMachines03.WorkingIndividuallyOwned, 
                      ProcessingMachines03.WorkingGroupowned, ProcessingMachines03.NotWorkingIndividuallyOwned, ProcessingMachines03.NotWorkingGroupowned, 
                      ProcessingMachines03.ReasonForNotWorking, ProcessingMachines03.AnnualRecordID, ProcessingMachines03.FormSerialID
FROM         ProcessingMachinesList INNER JOIN
                      ProcessingMachines03 ON ProcessingMachinesList.ProcessingMachineListID = ProcessingMachines03.MachineID
WHERE     (ProcessingMachines03.AnnualRecordID = @AnnualRecordID)
ORDER BY ProcessingMachinesList.ProcessingMachineListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillAnimalDrawn]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillAnimalDrawn] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
DrawnList.DrawnListID, 
DrawnList.DrawnName, 
DrawnList.DrawnStatus, 
AnimalDrawn03.AnimalDrawnID, 
AnimalDrawn03.DrawnID, 
AnimalDrawn03.WorkingIndividuallyOwned, 
AnimalDrawn03.WorkingGroupowned, 
AnimalDrawn03.AnnualRecordID, 
AnimalDrawn03.FormSerialID, 
DrawnList.DrawnType
FROM         
DrawnList 
INNER JOIN
AnimalDrawn03 ON DrawnList.DrawnListID = AnimalDrawn03.DrawnID
WHERE     
AnimalDrawn03.AnnualRecordID = @AnnualRecordID
ORDER BY 
DrawnList.DrawnListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteTVAndRadio]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualDeleteTVAndRadio]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@StationID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE TVAndRadioStation03
	WHERE StationID=@StationID AND @StationID>6
	
	DELETE MediaList
	WHERE MediaListID=@StationID AND MediaStatus=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteTelecom]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualDeleteTelecom]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@TelecomCompID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE Telecommunication03
	WHERE TelecomCompID=@TelecomCompID AND @TelecomCompID>6
	
	DELETE TelecomCompaList
	WHERE TelecomCompaListID=@TelecomCompID AND MediaStatus=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteProcessingMachine]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualDeleteProcessingMachine]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@MachineID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE ProcessingMachines03
	WHERE MachineID=@MachineID AND @MachineID>16
	
	DELETE ProcessingMachinesList
	WHERE ProcessingMachineListID=@MachineID AND MachineStatus=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteMachineryDrawn]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualDeleteMachineryDrawn]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@DrawnID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE MachineryDrawn03
	WHERE DrawnID=@DrawnID AND @DrawnID>9
	
	DELETE DrawnList
	WHERE DrawnListID=@DrawnID AND DrawnStatus=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteMachine]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualDeleteMachine]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@MachineryID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE Machines03
	WHERE MachineryID=@MachineryID AND @MachineryID>13
	
	DELETE MachineryList
	WHERE MachineryListID=@MachineryID AND MachineryStatus=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteLivestockInfrastructure]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualDeleteLivestockInfrastructure]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@InfraID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE LivestockInfrastructure03
	WHERE InfraID=@InfraID AND @InfraID>14
	
	DELETE InfraList
	WHERE InfraListID=@InfraID AND InfraStatus=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteImplements]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualDeleteImplements]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@ImplementID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE HandOperatedImplements03
	WHERE ImplementID=@ImplementID AND ImplementID>5
	
	DELETE ImplementsList
	WHERE ImplementsListID=@ImplementID AND ImplementStatus=2
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteCropResidue]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualDeleteCropResidue]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@CropResidueID uniqueidentifier

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
	DELETE CropResidue03
	WHERE CropResidueID=@CropResidueID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualDeleteAnimalDrawn]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualDeleteAnimalDrawn]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@DrawnID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	BEGIN TRANSACTION
	DELETE AnimalDrawn03
	WHERE DrawnID=@DrawnID AND @DrawnID>9
	
	DELETE DrawnList
	WHERE DrawnListID=@DrawnID AND DrawnStatus=1
	COMMIT
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillMachines]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillMachines]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnualRecordID uniqueidentifier

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT     MachineryList.MachineryListID, MachineryList.MachineryName, MachineryList.MachineryStatus, Machines03.MachinesID, Machines03.MachineryID, 
                      Machines03.WorkingIndividuallyOwned, Machines03.WorkingGroupOwned, Machines03.NotWorkingIndividuallyOwned, Machines03.NotWorkingGroupowned, 
                      Machines03.ReasonForNotWorking, Machines03.AnnualRecordID, Machines03.FormSerialID
FROM         MachineryList INNER JOIN
                      Machines03 ON MachineryList.MachineryListID = Machines03.MachineryID
WHERE     (Machines03.AnnualRecordID = @AnnualRecordID)
ORDER BY MachineryList.MachineryListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillMachineryDrawn]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillMachineryDrawn] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     
DrawnList.DrawnListID, 
DrawnList.DrawnName, 
DrawnList.DrawnStatus, 
MachineryDrawn03.MachineryDrawnID, 
MachineryDrawn03.DrawnID, 
MachineryDrawn03.WorkingIndividuallyOwned, 
MachineryDrawn03.WorkingGroupowned, 
MachineryDrawn03.AnnualRecordID, 
MachineryDrawn03.FormSerialID, 
DrawnList.DrawnType
FROM         
DrawnList 
INNER JOIN
MachineryDrawn03 ON DrawnList.DrawnListID = MachineryDrawn03.DrawnID
WHERE     
MachineryDrawn03.AnnualRecordID = @AnnualRecordID
ORDER BY DrawnList.DrawnListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillLivestockInfrastructure]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillLivestockInfrastructure]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
	@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     InfraList.InfraListID, InfraList.InfraName, InfraList.InfraStatus, LivestockInfrastructure03.LivestockInfrastructureID, LivestockInfrastructure03.InfraID, 
                      LivestockInfrastructure03.Working, LivestockInfrastructure03.NotWorking, LivestockInfrastructure03.NumberRequired, LivestockInfrastructure03.NumberOfRegistered, 
                      LivestockInfrastructure03.ReasonsForNotWorking, LivestockInfrastructure03.AnnualRecordID, LivestockInfrastructure03.FormSerialID
FROM         InfraList INNER JOIN
                      LivestockInfrastructure03 ON InfraList.InfraListID = LivestockInfrastructure03.InfraID
WHERE     (LivestockInfrastructure03.AnnualRecordID = @AnnualRecordID)
ORDER BY InfraList.InfraListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsOthers]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsOthers] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     SeedGroup.GroupID, SeedGroup.GroupName, ImprovedSeeds03.ImprovedSeedsID, ImprovedSeeds03.CropID, ImprovedSeeds03.CropNameOthers, 
                      ImprovedSeeds03.AnnualRequirementForTheReportingYear, ImprovedSeeds03.NameOfImprovedVariety, 
                      ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed, ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed, 
                      ImprovedSeeds03.Remarks, ImprovedSeeds03.AnnualRecordID
FROM         SeedGroup INNER JOIN
                      ImprovedSeeds03 ON SeedGroup.GroupID = ImprovedSeeds03.CropID
WHERE     (SeedGroup.GroupName = N'Mengineyo') AND (ImprovedSeeds03.AnnualRecordID = @AnnualRecordID)
ORDER BY SeedGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsNgano]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsNgano] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     SeedGroup.GroupID, SeedGroup.GroupName, ImprovedSeeds03.ImprovedSeedsID, ImprovedSeeds03.CropID, 
                      ImprovedSeeds03.AnnualRequirementForTheReportingYear, ImprovedSeeds03.NameOfImprovedVariety, 
                      ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed, ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed, 
                      ImprovedSeeds03.Remarks, ImprovedSeeds03.AnnualRecordID
FROM         SeedGroup INNER JOIN
                      ImprovedSeeds03 ON SeedGroup.GroupID = ImprovedSeeds03.CropID
WHERE     (ImprovedSeeds03.AnnualRecordID = @AnnualRecordID) AND (SeedGroup.GroupName = N'Ngano')
ORDER BY SeedGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsMtama]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsMtama] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     SeedGroup.GroupID, SeedGroup.GroupName, ImprovedSeeds03.ImprovedSeedsID, ImprovedSeeds03.CropID, 
                      ImprovedSeeds03.AnnualRequirementForTheReportingYear, ImprovedSeeds03.NameOfImprovedVariety, 
                      ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed, ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed, 
                      ImprovedSeeds03.Remarks, ImprovedSeeds03.AnnualRecordID
FROM         SeedGroup INNER JOIN
                      ImprovedSeeds03 ON SeedGroup.GroupID = ImprovedSeeds03.CropID
WHERE     (ImprovedSeeds03.AnnualRecordID = @AnnualRecordID) AND (SeedGroup.GroupName = N'Mtama')
ORDER BY SeedGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsMpunga]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsMpunga] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     SeedGroup.GroupID, SeedGroup.GroupName, ImprovedSeeds03.ImprovedSeedsID, ImprovedSeeds03.CropID, 
                      ImprovedSeeds03.AnnualRequirementForTheReportingYear, ImprovedSeeds03.NameOfImprovedVariety, 
                      ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed, ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed, 
                      ImprovedSeeds03.Remarks, ImprovedSeeds03.AnnualRecordID
FROM         SeedGroup INNER JOIN
                      ImprovedSeeds03 ON SeedGroup.GroupID = ImprovedSeeds03.CropID
WHERE     (ImprovedSeeds03.AnnualRecordID = @AnnualRecordID) AND (SeedGroup.GroupName = N'Mpunga')
ORDER BY SeedGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsMahindi]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsMahindi] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     SeedGroup.GroupID, SeedGroup.GroupName, ImprovedSeeds03.ImprovedSeedsID, ImprovedSeeds03.CropID, 
                      ImprovedSeeds03.AnnualRequirementForTheReportingYear, ImprovedSeeds03.NameOfImprovedVariety, 
                      ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed, ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed, 
                      ImprovedSeeds03.Remarks, ImprovedSeeds03.AnnualRecordID
FROM         SeedGroup INNER JOIN
                      ImprovedSeeds03 ON SeedGroup.GroupID = ImprovedSeeds03.CropID
WHERE     (ImprovedSeeds03.AnnualRecordID = @AnnualRecordID) AND (SeedGroup.GroupName = N'Mahindi')
ORDER BY SeedGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsMaharage]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsMaharage] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     SeedGroup.GroupID, SeedGroup.GroupName, ImprovedSeeds03.ImprovedSeedsID, ImprovedSeeds03.CropID, 
                      ImprovedSeeds03.AnnualRequirementForTheReportingYear, ImprovedSeeds03.NameOfImprovedVariety, 
                      ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed, ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed, 
                      ImprovedSeeds03.Remarks, ImprovedSeeds03.AnnualRecordID
FROM         SeedGroup INNER JOIN
                      ImprovedSeeds03 ON SeedGroup.GroupID = ImprovedSeeds03.CropID
WHERE     (ImprovedSeeds03.AnnualRecordID = @AnnualRecordID) AND (SeedGroup.GroupName = N'Maharage')
ORDER BY SeedGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImprovedSeedsAlizeti]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillImprovedSeedsAlizeti] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT     SeedGroup.GroupID, SeedGroup.GroupName, ImprovedSeeds03.ImprovedSeedsID, ImprovedSeeds03.CropID, 
                      ImprovedSeeds03.AnnualRequirementForTheReportingYear, ImprovedSeeds03.NameOfImprovedVariety, 
                      ImprovedSeeds03.AmountUsedInTheReportingYearQualityDeclareSeed, ImprovedSeeds03.AmountUsedInTheReportingYearCertifiedSeed, 
                      ImprovedSeeds03.Remarks, ImprovedSeeds03.AnnualRecordID
FROM         SeedGroup INNER JOIN
                      ImprovedSeeds03 ON SeedGroup.GroupID = ImprovedSeeds03.CropID
WHERE     (ImprovedSeeds03.AnnualRecordID = @AnnualRecordID) AND (SeedGroup.GroupName = N'Alizeti')
ORDER BY SeedGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillImplements]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillImplements]
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>

@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
	
SELECT        
ImplementsList.ImplementsListID, 
ImplementsList.ImplementNameEn, 
ImplementsList.ImplementNameSw,
ImplementsList.ImplementStatus, 
HandOperatedImplements03.HandOperatedImplementsID, 
HandOperatedImplements03.ImplementID, 
HandOperatedImplements03.NumberOfImplements, 
HandOperatedImplements03.AnnualRecordID
FROM            
ImplementsList 
INNER JOIN
HandOperatedImplements03 ON ImplementsList.ImplementsListID = HandOperatedImplements03.ImplementID
WHERE (HandOperatedImplements03.AnnualRecordID = @AnnualRecordID)
ORDER BY ImplementsList.ImplementsListID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillFFSUvuvi]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillFFSUvuvi] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT        
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool03.FarmersFieldSchoolID, 
FarmersFieldSchool03.FieldID, 
FarmersFieldSchool03.FieldActivity, 
FarmersFieldSchool03.NumberOfFieldSchool, 
FarmersFieldSchool03.NumberOfFarmersStartedMale, 
FarmersFieldSchool03.NumberOfFarmersStartedFemale, 
FarmersFieldSchool03.AverageDuration, 
FarmersFieldSchool03.NumberOfFarmersCompletedMale, 
FarmersFieldSchool03.NumberOfFarmersCompletedFemale, 
FarmersFieldSchool03.NumberOfVillagesCovered, 
FarmersFieldSchool03.NumberOfFarmersWhoAppliedTheTechniquesLearned, 
FarmersFieldSchool03.Remarks, 
FarmersFieldSchool03.AnnualRecordID
FROM            
FFSGroup 
INNER JOIN
FarmersFieldSchool03 ON FFSGroup.GroupID = FarmersFieldSchool03.FieldID
WHERE        
(FarmersFieldSchool03.AnnualRecordID = @AnnualRecordID) AND (FFSGroup.GroupID = 3)
ORDER BY FFSGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillFFSUfugaji]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillFFSUfugaji] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT        
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool03.FarmersFieldSchoolID, 
FarmersFieldSchool03.FieldID, 
FarmersFieldSchool03.FieldActivity, 
FarmersFieldSchool03.NumberOfFieldSchool, 
FarmersFieldSchool03.NumberOfFarmersStartedMale, 
FarmersFieldSchool03.NumberOfFarmersStartedFemale, 
FarmersFieldSchool03.AverageDuration, 
FarmersFieldSchool03.NumberOfFarmersCompletedMale, 
FarmersFieldSchool03.NumberOfFarmersCompletedFemale, 
FarmersFieldSchool03.NumberOfVillagesCovered, 
FarmersFieldSchool03.NumberOfFarmersWhoAppliedTheTechniquesLearned, 
FarmersFieldSchool03.Remarks, 
FarmersFieldSchool03.AnnualRecordID
FROM            
FFSGroup 
INNER JOIN
FarmersFieldSchool03 ON FFSGroup.GroupID = FarmersFieldSchool03.FieldID
WHERE        
(FarmersFieldSchool03.AnnualRecordID = @AnnualRecordID) AND (FFSGroup.GroupID = 2)
ORDER BY FFSGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillFFSMengineyo]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillFFSMengineyo] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT        
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool03.FarmersFieldSchoolID, 
FarmersFieldSchool03.FieldID, 
FarmersFieldSchool03.FieldActivity, 
FarmersFieldSchool03.NumberOfFieldSchool, 
FarmersFieldSchool03.NumberOfFarmersStartedMale, 
FarmersFieldSchool03.NumberOfFarmersStartedFemale, 
FarmersFieldSchool03.AverageDuration, 
FarmersFieldSchool03.NumberOfFarmersCompletedMale, 
FarmersFieldSchool03.NumberOfFarmersCompletedFemale, 
FarmersFieldSchool03.NumberOfVillagesCovered, 
FarmersFieldSchool03.NumberOfFarmersWhoAppliedTheTechniquesLearned, 
FarmersFieldSchool03.Remarks, 
FarmersFieldSchool03.AnnualRecordID
FROM            
FFSGroup 
INNER JOIN
FarmersFieldSchool03 ON FFSGroup.GroupID = FarmersFieldSchool03.FieldID
WHERE        
(FarmersFieldSchool03.AnnualRecordID = @AnnualRecordID) AND (FFSGroup.GroupID = 6)
ORDER BY FFSGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillFFSMazao]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillFFSMazao] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT        
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool03.FarmersFieldSchoolID, 
FarmersFieldSchool03.FieldID, 
FarmersFieldSchool03.FieldActivity, 
FarmersFieldSchool03.NumberOfFieldSchool, 
FarmersFieldSchool03.NumberOfFarmersStartedMale, 
FarmersFieldSchool03.NumberOfFarmersStartedFemale, 
FarmersFieldSchool03.AverageDuration, 
FarmersFieldSchool03.NumberOfFarmersCompletedMale, 
FarmersFieldSchool03.NumberOfFarmersCompletedFemale, 
FarmersFieldSchool03.NumberOfVillagesCovered, 
FarmersFieldSchool03.NumberOfFarmersWhoAppliedTheTechniquesLearned, 
FarmersFieldSchool03.Remarks, 
FarmersFieldSchool03.AnnualRecordID
FROM            
FFSGroup 
INNER JOIN
FarmersFieldSchool03 ON FFSGroup.GroupID = FarmersFieldSchool03.FieldID
WHERE        
(FarmersFieldSchool03.AnnualRecordID = @AnnualRecordID) AND (FFSGroup.GroupID = 1)
ORDER BY FFSGroup.GroupID
END
GO
/****** Object:  StoredProcedure [dbo].[appUspAnnualFillFFSMasoko]    Script Date: 05/06/2013 17:35:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[appUspAnnualFillFFSMasoko] 
	-- Add the parameters for the stored procedure here
	--<@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, 
	--<@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>
@AnnualRecordID uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	--SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>
SELECT        
FFSGroup.GroupID, 
FFSGroup.GroupName, 
FarmersFieldSchool03.FarmersFieldSchoolID, 
FarmersFieldSchool03.FieldID, 
FarmersFieldSchool03.FieldActivity, 
FarmersFieldSchool03.NumberOfFieldSchool, 
FarmersFieldSchool03.NumberOfFarmersStartedMale, 
FarmersFieldSchool03.NumberOfFarmersStartedFemale, 
FarmersFieldSchool03.AverageDuration, 
FarmersFieldSchool03.NumberOfFarmersCompletedMale, 
FarmersFieldSchool03.NumberOfFarmersCompletedFemale, 
FarmersFieldSchool03.NumberOfVillagesCovered, 
FarmersFieldSchool03.NumberOfFarmersWhoAppliedTheTechniquesLearned, 
FarmersFieldSchool03.Remarks, 
FarmersFieldSchool03.AnnualRecordID
FROM            
FFSGroup 
INNER JOIN
FarmersFieldSchool03 ON FFSGroup.GroupID = FarmersFieldSchool03.FieldID
WHERE        
(FarmersFieldSchool03.AnnualRecordID = @AnnualRecordID) AND (FFSGroup.GroupID = 4)
ORDER BY FFSGroup.GroupID
END
GO
