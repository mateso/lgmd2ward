'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


'
' This file contains the strongly-typed dataset class.
' The TableAdapters and Dataset Designer (.xsd) file are in the HEMISDAL project. 
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("HEMISDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class HEMISDataSet
    Inherits Global.System.Data.DataSet
    
    Private tabletblAcademicYears As tblAcademicYearsDataTable
    
    Private tabletblAppColumns As tblAppColumnsDataTable
    
    Private tabletblAssetUtilization As tblAssetUtilizationDataTable
    
    Private tabletblBusinessObject As tblBusinessObjectDataTable
    
    Private tabletblFunding As tblFundingDataTable
    
    Private tabletblEnrollment As tblEnrollmentDataTable
    
    Private tabletblGradData As tblGradDataDataTable
    
    Private tabletblGroupRights As tblGroupRightsDataTable
    
    Private tabletblGradDataDetailed As tblGradDataDetailedDataTable
    
    Private tabletblGroups As tblGroupsDataTable
    
    Private tabletblInstitutions As tblInstitutionsDataTable
    
    Private tabletblList As tblListDataTable
    
    Private tabletblEnrollmentDetailed As tblEnrollmentDetailedDataTable
    
    Private tabletblRights As tblRightsDataTable
    
    Private tabletblStaffs As tblStaffsDataTable
    
    Private tabletblStaffsDetailed As tblStaffsDetailedDataTable
    
    Private tabletblStudents As tblStudentsDataTable
    
    Private tabletblUserGroup As tblUserGroupDataTable
    
    Private tabletblUsers As tblUsersDataTable
    
    Private tabletblAppVersionControl As tblAppVersionControlDataTable
    
    Private tabletblSponsorShip As tblSponsorShipDataTable
    
    Private tabletblForm As tblFormDataTable
    
    Private tabletblFormDetails As tblFormDetailsDataTable
    
    Private relationFK_GroupRight_Groups As Global.System.Data.DataRelation
    
    Private relationFK_tblGroupRights_tblRights As Global.System.Data.DataRelation
    
    Private relationFK_Rights_BusinessObject1 As Global.System.Data.DataRelation
    
    Private relationFK_UserGroup_Groups As Global.System.Data.DataRelation
    
    Private relationFK_UserGroup_Users As Global.System.Data.DataRelation
    
    Private relationFK_tblFormDetails_tblForm As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tblAcademicYears")) Is Nothing) Then
                MyBase.Tables.Add(New tblAcademicYearsDataTable(ds.Tables("tblAcademicYears")))
            End If
            If (Not (ds.Tables("tblAppColumns")) Is Nothing) Then
                MyBase.Tables.Add(New tblAppColumnsDataTable(ds.Tables("tblAppColumns")))
            End If
            If (Not (ds.Tables("tblAssetUtilization")) Is Nothing) Then
                MyBase.Tables.Add(New tblAssetUtilizationDataTable(ds.Tables("tblAssetUtilization")))
            End If
            If (Not (ds.Tables("tblBusinessObject")) Is Nothing) Then
                MyBase.Tables.Add(New tblBusinessObjectDataTable(ds.Tables("tblBusinessObject")))
            End If
            If (Not (ds.Tables("tblFunding")) Is Nothing) Then
                MyBase.Tables.Add(New tblFundingDataTable(ds.Tables("tblFunding")))
            End If
            If (Not (ds.Tables("tblEnrollment")) Is Nothing) Then
                MyBase.Tables.Add(New tblEnrollmentDataTable(ds.Tables("tblEnrollment")))
            End If
            If (Not (ds.Tables("tblGradData")) Is Nothing) Then
                MyBase.Tables.Add(New tblGradDataDataTable(ds.Tables("tblGradData")))
            End If
            If (Not (ds.Tables("tblGroupRights")) Is Nothing) Then
                MyBase.Tables.Add(New tblGroupRightsDataTable(ds.Tables("tblGroupRights")))
            End If
            If (Not (ds.Tables("tblGradDataDetailed")) Is Nothing) Then
                MyBase.Tables.Add(New tblGradDataDetailedDataTable(ds.Tables("tblGradDataDetailed")))
            End If
            If (Not (ds.Tables("tblGroups")) Is Nothing) Then
                MyBase.Tables.Add(New tblGroupsDataTable(ds.Tables("tblGroups")))
            End If
            If (Not (ds.Tables("tblInstitutions")) Is Nothing) Then
                MyBase.Tables.Add(New tblInstitutionsDataTable(ds.Tables("tblInstitutions")))
            End If
            If (Not (ds.Tables("tblList")) Is Nothing) Then
                MyBase.Tables.Add(New tblListDataTable(ds.Tables("tblList")))
            End If
            If (Not (ds.Tables("tblEnrollmentDetailed")) Is Nothing) Then
                MyBase.Tables.Add(New tblEnrollmentDetailedDataTable(ds.Tables("tblEnrollmentDetailed")))
            End If
            If (Not (ds.Tables("tblRights")) Is Nothing) Then
                MyBase.Tables.Add(New tblRightsDataTable(ds.Tables("tblRights")))
            End If
            If (Not (ds.Tables("tblStaffs")) Is Nothing) Then
                MyBase.Tables.Add(New tblStaffsDataTable(ds.Tables("tblStaffs")))
            End If
            If (Not (ds.Tables("tblStaffsDetailed")) Is Nothing) Then
                MyBase.Tables.Add(New tblStaffsDetailedDataTable(ds.Tables("tblStaffsDetailed")))
            End If
            If (Not (ds.Tables("tblStudents")) Is Nothing) Then
                MyBase.Tables.Add(New tblStudentsDataTable(ds.Tables("tblStudents")))
            End If
            If (Not (ds.Tables("tblUserGroup")) Is Nothing) Then
                MyBase.Tables.Add(New tblUserGroupDataTable(ds.Tables("tblUserGroup")))
            End If
            If (Not (ds.Tables("tblUsers")) Is Nothing) Then
                MyBase.Tables.Add(New tblUsersDataTable(ds.Tables("tblUsers")))
            End If
            If (Not (ds.Tables("tblAppVersionControl")) Is Nothing) Then
                MyBase.Tables.Add(New tblAppVersionControlDataTable(ds.Tables("tblAppVersionControl")))
            End If
            If (Not (ds.Tables("tblSponsorShip")) Is Nothing) Then
                MyBase.Tables.Add(New tblSponsorShipDataTable(ds.Tables("tblSponsorShip")))
            End If
            If (Not (ds.Tables("tblForm")) Is Nothing) Then
                MyBase.Tables.Add(New tblFormDataTable(ds.Tables("tblForm")))
            End If
            If (Not (ds.Tables("tblFormDetails")) Is Nothing) Then
                MyBase.Tables.Add(New tblFormDetailsDataTable(ds.Tables("tblFormDetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblAcademicYears() As tblAcademicYearsDataTable
        Get
            Return Me.tabletblAcademicYears
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblAppColumns() As tblAppColumnsDataTable
        Get
            Return Me.tabletblAppColumns
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblAssetUtilization() As tblAssetUtilizationDataTable
        Get
            Return Me.tabletblAssetUtilization
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblBusinessObject() As tblBusinessObjectDataTable
        Get
            Return Me.tabletblBusinessObject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblFunding() As tblFundingDataTable
        Get
            Return Me.tabletblFunding
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblEnrollment() As tblEnrollmentDataTable
        Get
            Return Me.tabletblEnrollment
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblGradData() As tblGradDataDataTable
        Get
            Return Me.tabletblGradData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblGroupRights() As tblGroupRightsDataTable
        Get
            Return Me.tabletblGroupRights
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblGradDataDetailed() As tblGradDataDetailedDataTable
        Get
            Return Me.tabletblGradDataDetailed
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblGroups() As tblGroupsDataTable
        Get
            Return Me.tabletblGroups
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblInstitutions() As tblInstitutionsDataTable
        Get
            Return Me.tabletblInstitutions
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblList() As tblListDataTable
        Get
            Return Me.tabletblList
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblEnrollmentDetailed() As tblEnrollmentDetailedDataTable
        Get
            Return Me.tabletblEnrollmentDetailed
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblRights() As tblRightsDataTable
        Get
            Return Me.tabletblRights
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblStaffs() As tblStaffsDataTable
        Get
            Return Me.tabletblStaffs
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblStaffsDetailed() As tblStaffsDetailedDataTable
        Get
            Return Me.tabletblStaffsDetailed
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblStudents() As tblStudentsDataTable
        Get
            Return Me.tabletblStudents
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblUserGroup() As tblUserGroupDataTable
        Get
            Return Me.tabletblUserGroup
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblUsers() As tblUsersDataTable
        Get
            Return Me.tabletblUsers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblAppVersionControl() As tblAppVersionControlDataTable
        Get
            Return Me.tabletblAppVersionControl
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblSponsorShip() As tblSponsorShipDataTable
        Get
            Return Me.tabletblSponsorShip
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblForm() As tblFormDataTable
        Get
            Return Me.tabletblForm
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblFormDetails() As tblFormDetailsDataTable
        Get
            Return Me.tabletblFormDetails
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As HEMISDataSet = CType(MyBase.Clone,HEMISDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tblAcademicYears")) Is Nothing) Then
                MyBase.Tables.Add(New tblAcademicYearsDataTable(ds.Tables("tblAcademicYears")))
            End If
            If (Not (ds.Tables("tblAppColumns")) Is Nothing) Then
                MyBase.Tables.Add(New tblAppColumnsDataTable(ds.Tables("tblAppColumns")))
            End If
            If (Not (ds.Tables("tblAssetUtilization")) Is Nothing) Then
                MyBase.Tables.Add(New tblAssetUtilizationDataTable(ds.Tables("tblAssetUtilization")))
            End If
            If (Not (ds.Tables("tblBusinessObject")) Is Nothing) Then
                MyBase.Tables.Add(New tblBusinessObjectDataTable(ds.Tables("tblBusinessObject")))
            End If
            If (Not (ds.Tables("tblFunding")) Is Nothing) Then
                MyBase.Tables.Add(New tblFundingDataTable(ds.Tables("tblFunding")))
            End If
            If (Not (ds.Tables("tblEnrollment")) Is Nothing) Then
                MyBase.Tables.Add(New tblEnrollmentDataTable(ds.Tables("tblEnrollment")))
            End If
            If (Not (ds.Tables("tblGradData")) Is Nothing) Then
                MyBase.Tables.Add(New tblGradDataDataTable(ds.Tables("tblGradData")))
            End If
            If (Not (ds.Tables("tblGroupRights")) Is Nothing) Then
                MyBase.Tables.Add(New tblGroupRightsDataTable(ds.Tables("tblGroupRights")))
            End If
            If (Not (ds.Tables("tblGradDataDetailed")) Is Nothing) Then
                MyBase.Tables.Add(New tblGradDataDetailedDataTable(ds.Tables("tblGradDataDetailed")))
            End If
            If (Not (ds.Tables("tblGroups")) Is Nothing) Then
                MyBase.Tables.Add(New tblGroupsDataTable(ds.Tables("tblGroups")))
            End If
            If (Not (ds.Tables("tblInstitutions")) Is Nothing) Then
                MyBase.Tables.Add(New tblInstitutionsDataTable(ds.Tables("tblInstitutions")))
            End If
            If (Not (ds.Tables("tblList")) Is Nothing) Then
                MyBase.Tables.Add(New tblListDataTable(ds.Tables("tblList")))
            End If
            If (Not (ds.Tables("tblEnrollmentDetailed")) Is Nothing) Then
                MyBase.Tables.Add(New tblEnrollmentDetailedDataTable(ds.Tables("tblEnrollmentDetailed")))
            End If
            If (Not (ds.Tables("tblRights")) Is Nothing) Then
                MyBase.Tables.Add(New tblRightsDataTable(ds.Tables("tblRights")))
            End If
            If (Not (ds.Tables("tblStaffs")) Is Nothing) Then
                MyBase.Tables.Add(New tblStaffsDataTable(ds.Tables("tblStaffs")))
            End If
            If (Not (ds.Tables("tblStaffsDetailed")) Is Nothing) Then
                MyBase.Tables.Add(New tblStaffsDetailedDataTable(ds.Tables("tblStaffsDetailed")))
            End If
            If (Not (ds.Tables("tblStudents")) Is Nothing) Then
                MyBase.Tables.Add(New tblStudentsDataTable(ds.Tables("tblStudents")))
            End If
            If (Not (ds.Tables("tblUserGroup")) Is Nothing) Then
                MyBase.Tables.Add(New tblUserGroupDataTable(ds.Tables("tblUserGroup")))
            End If
            If (Not (ds.Tables("tblUsers")) Is Nothing) Then
                MyBase.Tables.Add(New tblUsersDataTable(ds.Tables("tblUsers")))
            End If
            If (Not (ds.Tables("tblAppVersionControl")) Is Nothing) Then
                MyBase.Tables.Add(New tblAppVersionControlDataTable(ds.Tables("tblAppVersionControl")))
            End If
            If (Not (ds.Tables("tblSponsorShip")) Is Nothing) Then
                MyBase.Tables.Add(New tblSponsorShipDataTable(ds.Tables("tblSponsorShip")))
            End If
            If (Not (ds.Tables("tblForm")) Is Nothing) Then
                MyBase.Tables.Add(New tblFormDataTable(ds.Tables("tblForm")))
            End If
            If (Not (ds.Tables("tblFormDetails")) Is Nothing) Then
                MyBase.Tables.Add(New tblFormDetailsDataTable(ds.Tables("tblFormDetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletblAcademicYears = CType(MyBase.Tables("tblAcademicYears"),tblAcademicYearsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblAcademicYears) Is Nothing) Then
                Me.tabletblAcademicYears.InitVars
            End If
        End If
        Me.tabletblAppColumns = CType(MyBase.Tables("tblAppColumns"),tblAppColumnsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblAppColumns) Is Nothing) Then
                Me.tabletblAppColumns.InitVars
            End If
        End If
        Me.tabletblAssetUtilization = CType(MyBase.Tables("tblAssetUtilization"),tblAssetUtilizationDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblAssetUtilization) Is Nothing) Then
                Me.tabletblAssetUtilization.InitVars
            End If
        End If
        Me.tabletblBusinessObject = CType(MyBase.Tables("tblBusinessObject"),tblBusinessObjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblBusinessObject) Is Nothing) Then
                Me.tabletblBusinessObject.InitVars
            End If
        End If
        Me.tabletblFunding = CType(MyBase.Tables("tblFunding"),tblFundingDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblFunding) Is Nothing) Then
                Me.tabletblFunding.InitVars
            End If
        End If
        Me.tabletblEnrollment = CType(MyBase.Tables("tblEnrollment"),tblEnrollmentDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblEnrollment) Is Nothing) Then
                Me.tabletblEnrollment.InitVars
            End If
        End If
        Me.tabletblGradData = CType(MyBase.Tables("tblGradData"),tblGradDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblGradData) Is Nothing) Then
                Me.tabletblGradData.InitVars
            End If
        End If
        Me.tabletblGroupRights = CType(MyBase.Tables("tblGroupRights"),tblGroupRightsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblGroupRights) Is Nothing) Then
                Me.tabletblGroupRights.InitVars
            End If
        End If
        Me.tabletblGradDataDetailed = CType(MyBase.Tables("tblGradDataDetailed"),tblGradDataDetailedDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblGradDataDetailed) Is Nothing) Then
                Me.tabletblGradDataDetailed.InitVars
            End If
        End If
        Me.tabletblGroups = CType(MyBase.Tables("tblGroups"),tblGroupsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblGroups) Is Nothing) Then
                Me.tabletblGroups.InitVars
            End If
        End If
        Me.tabletblInstitutions = CType(MyBase.Tables("tblInstitutions"),tblInstitutionsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblInstitutions) Is Nothing) Then
                Me.tabletblInstitutions.InitVars
            End If
        End If
        Me.tabletblList = CType(MyBase.Tables("tblList"),tblListDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblList) Is Nothing) Then
                Me.tabletblList.InitVars
            End If
        End If
        Me.tabletblEnrollmentDetailed = CType(MyBase.Tables("tblEnrollmentDetailed"),tblEnrollmentDetailedDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblEnrollmentDetailed) Is Nothing) Then
                Me.tabletblEnrollmentDetailed.InitVars
            End If
        End If
        Me.tabletblRights = CType(MyBase.Tables("tblRights"),tblRightsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblRights) Is Nothing) Then
                Me.tabletblRights.InitVars
            End If
        End If
        Me.tabletblStaffs = CType(MyBase.Tables("tblStaffs"),tblStaffsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblStaffs) Is Nothing) Then
                Me.tabletblStaffs.InitVars
            End If
        End If
        Me.tabletblStaffsDetailed = CType(MyBase.Tables("tblStaffsDetailed"),tblStaffsDetailedDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblStaffsDetailed) Is Nothing) Then
                Me.tabletblStaffsDetailed.InitVars
            End If
        End If
        Me.tabletblStudents = CType(MyBase.Tables("tblStudents"),tblStudentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblStudents) Is Nothing) Then
                Me.tabletblStudents.InitVars
            End If
        End If
        Me.tabletblUserGroup = CType(MyBase.Tables("tblUserGroup"),tblUserGroupDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblUserGroup) Is Nothing) Then
                Me.tabletblUserGroup.InitVars
            End If
        End If
        Me.tabletblUsers = CType(MyBase.Tables("tblUsers"),tblUsersDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblUsers) Is Nothing) Then
                Me.tabletblUsers.InitVars
            End If
        End If
        Me.tabletblAppVersionControl = CType(MyBase.Tables("tblAppVersionControl"),tblAppVersionControlDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblAppVersionControl) Is Nothing) Then
                Me.tabletblAppVersionControl.InitVars
            End If
        End If
        Me.tabletblSponsorShip = CType(MyBase.Tables("tblSponsorShip"),tblSponsorShipDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblSponsorShip) Is Nothing) Then
                Me.tabletblSponsorShip.InitVars
            End If
        End If
        Me.tabletblForm = CType(MyBase.Tables("tblForm"),tblFormDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblForm) Is Nothing) Then
                Me.tabletblForm.InitVars
            End If
        End If
        Me.tabletblFormDetails = CType(MyBase.Tables("tblFormDetails"),tblFormDetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblFormDetails) Is Nothing) Then
                Me.tabletblFormDetails.InitVars
            End If
        End If
        Me.relationFK_GroupRight_Groups = Me.Relations("FK_GroupRight_Groups")
        Me.relationFK_tblGroupRights_tblRights = Me.Relations("FK_tblGroupRights_tblRights")
        Me.relationFK_Rights_BusinessObject1 = Me.Relations("FK_Rights_BusinessObject1")
        Me.relationFK_UserGroup_Groups = Me.Relations("FK_UserGroup_Groups")
        Me.relationFK_UserGroup_Users = Me.Relations("FK_UserGroup_Users")
        Me.relationFK_tblFormDetails_tblForm = Me.Relations("FK_tblFormDetails_tblForm")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "HEMISDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/HEMISDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletblAcademicYears = New tblAcademicYearsDataTable
        MyBase.Tables.Add(Me.tabletblAcademicYears)
        Me.tabletblAppColumns = New tblAppColumnsDataTable
        MyBase.Tables.Add(Me.tabletblAppColumns)
        Me.tabletblAssetUtilization = New tblAssetUtilizationDataTable
        MyBase.Tables.Add(Me.tabletblAssetUtilization)
        Me.tabletblBusinessObject = New tblBusinessObjectDataTable
        MyBase.Tables.Add(Me.tabletblBusinessObject)
        Me.tabletblFunding = New tblFundingDataTable
        MyBase.Tables.Add(Me.tabletblFunding)
        Me.tabletblEnrollment = New tblEnrollmentDataTable
        MyBase.Tables.Add(Me.tabletblEnrollment)
        Me.tabletblGradData = New tblGradDataDataTable
        MyBase.Tables.Add(Me.tabletblGradData)
        Me.tabletblGroupRights = New tblGroupRightsDataTable
        MyBase.Tables.Add(Me.tabletblGroupRights)
        Me.tabletblGradDataDetailed = New tblGradDataDetailedDataTable
        MyBase.Tables.Add(Me.tabletblGradDataDetailed)
        Me.tabletblGroups = New tblGroupsDataTable
        MyBase.Tables.Add(Me.tabletblGroups)
        Me.tabletblInstitutions = New tblInstitutionsDataTable
        MyBase.Tables.Add(Me.tabletblInstitutions)
        Me.tabletblList = New tblListDataTable
        MyBase.Tables.Add(Me.tabletblList)
        Me.tabletblEnrollmentDetailed = New tblEnrollmentDetailedDataTable
        MyBase.Tables.Add(Me.tabletblEnrollmentDetailed)
        Me.tabletblRights = New tblRightsDataTable
        MyBase.Tables.Add(Me.tabletblRights)
        Me.tabletblStaffs = New tblStaffsDataTable
        MyBase.Tables.Add(Me.tabletblStaffs)
        Me.tabletblStaffsDetailed = New tblStaffsDetailedDataTable
        MyBase.Tables.Add(Me.tabletblStaffsDetailed)
        Me.tabletblStudents = New tblStudentsDataTable
        MyBase.Tables.Add(Me.tabletblStudents)
        Me.tabletblUserGroup = New tblUserGroupDataTable
        MyBase.Tables.Add(Me.tabletblUserGroup)
        Me.tabletblUsers = New tblUsersDataTable
        MyBase.Tables.Add(Me.tabletblUsers)
        Me.tabletblAppVersionControl = New tblAppVersionControlDataTable
        MyBase.Tables.Add(Me.tabletblAppVersionControl)
        Me.tabletblSponsorShip = New tblSponsorShipDataTable
        MyBase.Tables.Add(Me.tabletblSponsorShip)
        Me.tabletblForm = New tblFormDataTable
        MyBase.Tables.Add(Me.tabletblForm)
        Me.tabletblFormDetails = New tblFormDetailsDataTable
        MyBase.Tables.Add(Me.tabletblFormDetails)
        Me.relationFK_GroupRight_Groups = New Global.System.Data.DataRelation("FK_GroupRight_Groups", New Global.System.Data.DataColumn() {Me.tabletblGroups.GroupIDColumn}, New Global.System.Data.DataColumn() {Me.tabletblGroupRights.GroupIDColumn}, false)
        Me.Relations.Add(Me.relationFK_GroupRight_Groups)
        Me.relationFK_tblGroupRights_tblRights = New Global.System.Data.DataRelation("FK_tblGroupRights_tblRights", New Global.System.Data.DataColumn() {Me.tabletblRights.RightIDColumn}, New Global.System.Data.DataColumn() {Me.tabletblGroupRights.RightIDColumn}, false)
        Me.Relations.Add(Me.relationFK_tblGroupRights_tblRights)
        Me.relationFK_Rights_BusinessObject1 = New Global.System.Data.DataRelation("FK_Rights_BusinessObject1", New Global.System.Data.DataColumn() {Me.tabletblBusinessObject.ObjectNameColumn}, New Global.System.Data.DataColumn() {Me.tabletblRights.BusinessObjectColumn}, false)
        Me.Relations.Add(Me.relationFK_Rights_BusinessObject1)
        Me.relationFK_UserGroup_Groups = New Global.System.Data.DataRelation("FK_UserGroup_Groups", New Global.System.Data.DataColumn() {Me.tabletblGroups.GroupIDColumn}, New Global.System.Data.DataColumn() {Me.tabletblUserGroup.GroupIDColumn}, false)
        Me.Relations.Add(Me.relationFK_UserGroup_Groups)
        Me.relationFK_UserGroup_Users = New Global.System.Data.DataRelation("FK_UserGroup_Users", New Global.System.Data.DataColumn() {Me.tabletblUsers.UserNameColumn}, New Global.System.Data.DataColumn() {Me.tabletblUserGroup.UserNameColumn}, false)
        Me.Relations.Add(Me.relationFK_UserGroup_Users)
        Me.relationFK_tblFormDetails_tblForm = New Global.System.Data.DataRelation("FK_tblFormDetails_tblForm", New Global.System.Data.DataColumn() {Me.tabletblForm.FormIDColumn}, New Global.System.Data.DataColumn() {Me.tabletblFormDetails.FormIDColumn}, false)
        Me.Relations.Add(Me.relationFK_tblFormDetails_tblForm)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblAcademicYears() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblAppColumns() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblAssetUtilization() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblBusinessObject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblFunding() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblEnrollment() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblGradData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblGroupRights() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblGradDataDetailed() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblGroups() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblInstitutions() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblList() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblEnrollmentDetailed() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblRights() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblStaffs() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblStaffsDetailed() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblStudents() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblUserGroup() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblUsers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblAppVersionControl() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblSponsorShip() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblForm() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblFormDetails() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As HEMISDataSet = New HEMISDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub tblAcademicYearsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblAcademicYearsRowChangeEvent)
    
    Public Delegate Sub tblAppColumnsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblAppColumnsRowChangeEvent)
    
    Public Delegate Sub tblAssetUtilizationRowChangeEventHandler(ByVal sender As Object, ByVal e As tblAssetUtilizationRowChangeEvent)
    
    Public Delegate Sub tblBusinessObjectRowChangeEventHandler(ByVal sender As Object, ByVal e As tblBusinessObjectRowChangeEvent)
    
    Public Delegate Sub tblFundingRowChangeEventHandler(ByVal sender As Object, ByVal e As tblFundingRowChangeEvent)
    
    Public Delegate Sub tblEnrollmentRowChangeEventHandler(ByVal sender As Object, ByVal e As tblEnrollmentRowChangeEvent)
    
    Public Delegate Sub tblGradDataRowChangeEventHandler(ByVal sender As Object, ByVal e As tblGradDataRowChangeEvent)
    
    Public Delegate Sub tblGroupRightsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblGroupRightsRowChangeEvent)
    
    Public Delegate Sub tblGradDataDetailedRowChangeEventHandler(ByVal sender As Object, ByVal e As tblGradDataDetailedRowChangeEvent)
    
    Public Delegate Sub tblGroupsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblGroupsRowChangeEvent)
    
    Public Delegate Sub tblInstitutionsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblInstitutionsRowChangeEvent)
    
    Public Delegate Sub tblListRowChangeEventHandler(ByVal sender As Object, ByVal e As tblListRowChangeEvent)
    
    Public Delegate Sub tblEnrollmentDetailedRowChangeEventHandler(ByVal sender As Object, ByVal e As tblEnrollmentDetailedRowChangeEvent)
    
    Public Delegate Sub tblRightsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblRightsRowChangeEvent)
    
    Public Delegate Sub tblStaffsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblStaffsRowChangeEvent)
    
    Public Delegate Sub tblStaffsDetailedRowChangeEventHandler(ByVal sender As Object, ByVal e As tblStaffsDetailedRowChangeEvent)
    
    Public Delegate Sub tblStudentsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblStudentsRowChangeEvent)
    
    Public Delegate Sub tblUserGroupRowChangeEventHandler(ByVal sender As Object, ByVal e As tblUserGroupRowChangeEvent)
    
    Public Delegate Sub tblUsersRowChangeEventHandler(ByVal sender As Object, ByVal e As tblUsersRowChangeEvent)
    
    Public Delegate Sub tblAppVersionControlRowChangeEventHandler(ByVal sender As Object, ByVal e As tblAppVersionControlRowChangeEvent)
    
    Public Delegate Sub tblSponsorShipRowChangeEventHandler(ByVal sender As Object, ByVal e As tblSponsorShipRowChangeEvent)
    
    Public Delegate Sub tblFormRowChangeEventHandler(ByVal sender As Object, ByVal e As tblFormRowChangeEvent)
    
    Public Delegate Sub tblFormDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblFormDetailsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblAcademicYearsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblAcademicYearsRow)
        
        Private columnAcademicYear As Global.System.Data.DataColumn
        
        Private columnStartDate As Global.System.Data.DataColumn
        
        Private columnEndDate As Global.System.Data.DataColumn
        
        Private columnOpenYear As Global.System.Data.DataColumn
        
        Private columnCurrentYear As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblAcademicYears"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcademicYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcademicYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OpenYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOpenYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrentYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrentYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblAcademicYearsRow
            Get
                Return CType(Me.Rows(index),tblAcademicYearsRow)
            End Get
        End Property
        
        Public Event tblAcademicYearsRowChanging As tblAcademicYearsRowChangeEventHandler
        
        Public Event tblAcademicYearsRowChanged As tblAcademicYearsRowChangeEventHandler
        
        Public Event tblAcademicYearsRowDeleting As tblAcademicYearsRowChangeEventHandler
        
        Public Event tblAcademicYearsRowDeleted As tblAcademicYearsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblAcademicYearsRow(ByVal row As tblAcademicYearsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblAcademicYearsRow(ByVal AcademicYear As String, ByVal StartDate As String, ByVal EndDate As String, ByVal OpenYear As Boolean, ByVal CurrentYear As Boolean, ByVal Year As String, ByVal SourceID As String, ByVal bDeleted As Boolean, ByVal RowVersionID() As Byte) As tblAcademicYearsRow
            Dim rowtblAcademicYearsRow As tblAcademicYearsRow = CType(Me.NewRow,tblAcademicYearsRow)
            Dim columnValuesArray() As Object = New Object() {AcademicYear, StartDate, EndDate, OpenYear, CurrentYear, Year, SourceID, bDeleted, RowVersionID}
            rowtblAcademicYearsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblAcademicYearsRow)
            Return rowtblAcademicYearsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAcademicYear(ByVal AcademicYear As String) As tblAcademicYearsRow
            Return CType(Me.Rows.Find(New Object() {AcademicYear}),tblAcademicYearsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblAcademicYearsDataTable = CType(MyBase.Clone,tblAcademicYearsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblAcademicYearsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAcademicYear = MyBase.Columns("AcademicYear")
            Me.columnStartDate = MyBase.Columns("StartDate")
            Me.columnEndDate = MyBase.Columns("EndDate")
            Me.columnOpenYear = MyBase.Columns("OpenYear")
            Me.columnCurrentYear = MyBase.Columns("CurrentYear")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAcademicYear = New Global.System.Data.DataColumn("AcademicYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcademicYear)
            Me.columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New Global.System.Data.DataColumn("EndDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndDate)
            Me.columnOpenYear = New Global.System.Data.DataColumn("OpenYear", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOpenYear)
            Me.columnCurrentYear = New Global.System.Data.DataColumn("CurrentYear", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrentYear)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnAcademicYear}, true))
            Me.columnAcademicYear.AllowDBNull = false
            Me.columnAcademicYear.Unique = true
            Me.columnAcademicYear.MaxLength = 10
            Me.columnStartDate.MaxLength = 10
            Me.columnEndDate.MaxLength = 10
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 10
            Me.columnRowVersionID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblAcademicYearsRow() As tblAcademicYearsRow
            Return CType(Me.NewRow,tblAcademicYearsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblAcademicYearsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblAcademicYearsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblAcademicYearsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblAcademicYearsRowChanged(Me, New tblAcademicYearsRowChangeEvent(CType(e.Row,tblAcademicYearsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblAcademicYearsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblAcademicYearsRowChanging(Me, New tblAcademicYearsRowChangeEvent(CType(e.Row,tblAcademicYearsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblAcademicYearsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblAcademicYearsRowDeleted(Me, New tblAcademicYearsRowChangeEvent(CType(e.Row,tblAcademicYearsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblAcademicYearsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblAcademicYearsRowDeleting(Me, New tblAcademicYearsRowChangeEvent(CType(e.Row,tblAcademicYearsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblAcademicYearsRow(ByVal row As tblAcademicYearsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblAcademicYearsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblAppColumnsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblAppColumnsRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnColumnName As Global.System.Data.DataColumn
        
        Private columnColumnSize As Global.System.Data.DataColumn
        
        Private columnDisplayIndex As Global.System.Data.DataColumn
        
        Private columnCaption As Global.System.Data.DataColumn
        
        Private columnColumnType As Global.System.Data.DataColumn
        
        Private columnDisplay As Global.System.Data.DataColumn
        
        Private columnObjectName As Global.System.Data.DataColumn
        
        Private columnControlType As Global.System.Data.DataColumn
        
        Private columnTag As Global.System.Data.DataColumn
        
        Private columnExcelColumnName As Global.System.Data.DataColumn
        
        Private columnUniqueColumn As Global.System.Data.DataColumn
        
        Private columnIsRequired As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblAppColumns"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnSizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnSize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisplayIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisplayIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CaptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaption
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisplayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisplay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExcelColumnNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExcelColumnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UniqueColumnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueColumn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsRequiredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsRequired
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblAppColumnsRow
            Get
                Return CType(Me.Rows(index),tblAppColumnsRow)
            End Get
        End Property
        
        Public Event tblAppColumnsRowChanging As tblAppColumnsRowChangeEventHandler
        
        Public Event tblAppColumnsRowChanged As tblAppColumnsRowChangeEventHandler
        
        Public Event tblAppColumnsRowDeleting As tblAppColumnsRowChangeEventHandler
        
        Public Event tblAppColumnsRowDeleted As tblAppColumnsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblAppColumnsRow(ByVal row As tblAppColumnsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblAppColumnsRow( _
                    ByVal ID As System.Guid,  _
                    ByVal ColumnName As String,  _
                    ByVal ColumnSize As Integer,  _
                    ByVal DisplayIndex As Integer,  _
                    ByVal Caption As String,  _
                    ByVal ColumnType As String,  _
                    ByVal Display As Boolean,  _
                    ByVal ObjectName As String,  _
                    ByVal ControlType As String,  _
                    ByVal Tag As String,  _
                    ByVal ExcelColumnName As String,  _
                    ByVal UniqueColumn As Boolean,  _
                    ByVal IsRequired As Boolean,  _
                    ByVal RowVersionID() As Byte,  _
                    ByVal CreationDate As Long,  _
                    ByVal Year As String,  _
                    ByVal SourceID As String) As tblAppColumnsRow
            Dim rowtblAppColumnsRow As tblAppColumnsRow = CType(Me.NewRow,tblAppColumnsRow)
            Dim columnValuesArray() As Object = New Object() {ID, ColumnName, ColumnSize, DisplayIndex, Caption, ColumnType, Display, ObjectName, ControlType, Tag, ExcelColumnName, UniqueColumn, IsRequired, RowVersionID, CreationDate, Year, SourceID}
            rowtblAppColumnsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblAppColumnsRow)
            Return rowtblAppColumnsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As System.Guid) As tblAppColumnsRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblAppColumnsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblAppColumnsDataTable = CType(MyBase.Clone,tblAppColumnsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblAppColumnsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnColumnName = MyBase.Columns("ColumnName")
            Me.columnColumnSize = MyBase.Columns("ColumnSize")
            Me.columnDisplayIndex = MyBase.Columns("DisplayIndex")
            Me.columnCaption = MyBase.Columns("Caption")
            Me.columnColumnType = MyBase.Columns("ColumnType")
            Me.columnDisplay = MyBase.Columns("Display")
            Me.columnObjectName = MyBase.Columns("ObjectName")
            Me.columnControlType = MyBase.Columns("ControlType")
            Me.columnTag = MyBase.Columns("Tag")
            Me.columnExcelColumnName = MyBase.Columns("ExcelColumnName")
            Me.columnUniqueColumn = MyBase.Columns("UniqueColumn")
            Me.columnIsRequired = MyBase.Columns("IsRequired")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnColumnName = New Global.System.Data.DataColumn("ColumnName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnName)
            Me.columnColumnSize = New Global.System.Data.DataColumn("ColumnSize", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnSize)
            Me.columnDisplayIndex = New Global.System.Data.DataColumn("DisplayIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisplayIndex)
            Me.columnCaption = New Global.System.Data.DataColumn("Caption", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaption)
            Me.columnColumnType = New Global.System.Data.DataColumn("ColumnType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnType)
            Me.columnDisplay = New Global.System.Data.DataColumn("Display", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisplay)
            Me.columnObjectName = New Global.System.Data.DataColumn("ObjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjectName)
            Me.columnControlType = New Global.System.Data.DataColumn("ControlType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlType)
            Me.columnTag = New Global.System.Data.DataColumn("Tag", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTag)
            Me.columnExcelColumnName = New Global.System.Data.DataColumn("ExcelColumnName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExcelColumnName)
            Me.columnUniqueColumn = New Global.System.Data.DataColumn("UniqueColumn", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueColumn)
            Me.columnIsRequired = New Global.System.Data.DataColumn("IsRequired", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsRequired)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnColumnName.MaxLength = 50
            Me.columnCaption.MaxLength = 50
            Me.columnColumnType.MaxLength = 50
            Me.columnObjectName.MaxLength = 50
            Me.columnControlType.MaxLength = 50
            Me.columnTag.MaxLength = 50
            Me.columnExcelColumnName.MaxLength = 500
            Me.columnRowVersionID.ReadOnly = true
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblAppColumnsRow() As tblAppColumnsRow
            Return CType(Me.NewRow,tblAppColumnsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblAppColumnsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblAppColumnsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblAppColumnsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblAppColumnsRowChanged(Me, New tblAppColumnsRowChangeEvent(CType(e.Row,tblAppColumnsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblAppColumnsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblAppColumnsRowChanging(Me, New tblAppColumnsRowChangeEvent(CType(e.Row,tblAppColumnsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblAppColumnsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblAppColumnsRowDeleted(Me, New tblAppColumnsRowChangeEvent(CType(e.Row,tblAppColumnsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblAppColumnsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblAppColumnsRowDeleting(Me, New tblAppColumnsRowChangeEvent(CType(e.Row,tblAppColumnsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblAppColumnsRow(ByVal row As tblAppColumnsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblAppColumnsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblAssetUtilizationDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblAssetUtilizationRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnFaculty As Global.System.Data.DataColumn
        
        Private columnNoOfRooms As Global.System.Data.DataColumn
        
        Private columnRoomName As Global.System.Data.DataColumn
        
        Private columnNoOfSeats As Global.System.Data.DataColumn
        
        Private columnNoOfSessionsPerDay As Global.System.Data.DataColumn
        
        Private columnNoOfSessionsPerWeek As Global.System.Data.DataColumn
        
        Private columnFieldOfStufy As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        Private columnAssetType As Global.System.Data.DataColumn
        
        Private columnAssetGroup As Global.System.Data.DataColumn
        
        Private columnAreaCoverage As Global.System.Data.DataColumn
        
        Private columnCapacity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblAssetUtilization"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacultyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaculty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoOfRoomsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoOfRooms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RoomNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRoomName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoOfSeatsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoOfSeats
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoOfSessionsPerDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoOfSessionsPerDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoOfSessionsPerWeekColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoOfSessionsPerWeek
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FieldOfStufyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldOfStufy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssetTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssetGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssetGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AreaCoverageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAreaCoverage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCapacity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblAssetUtilizationRow
            Get
                Return CType(Me.Rows(index),tblAssetUtilizationRow)
            End Get
        End Property
        
        Public Event tblAssetUtilizationRowChanging As tblAssetUtilizationRowChangeEventHandler
        
        Public Event tblAssetUtilizationRowChanged As tblAssetUtilizationRowChangeEventHandler
        
        Public Event tblAssetUtilizationRowDeleting As tblAssetUtilizationRowChangeEventHandler
        
        Public Event tblAssetUtilizationRowDeleted As tblAssetUtilizationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblAssetUtilizationRow(ByVal row As tblAssetUtilizationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblAssetUtilizationRow( _
                    ByVal ID As System.Guid,  _
                    ByVal Faculty As String,  _
                    ByVal NoOfRooms As String,  _
                    ByVal RoomName As String,  _
                    ByVal NoOfSeats As String,  _
                    ByVal NoOfSessionsPerDay As String,  _
                    ByVal NoOfSessionsPerWeek As String,  _
                    ByVal FieldOfStufy As String,  _
                    ByVal Year As String,  _
                    ByVal SourceID As String,  _
                    ByVal bDeleted As Boolean,  _
                    ByVal RowVersionID() As Byte,  _
                    ByVal CreationDate As Long,  _
                    ByVal AssetType As String,  _
                    ByVal AssetGroup As String,  _
                    ByVal AreaCoverage As String,  _
                    ByVal Capacity As String) As tblAssetUtilizationRow
            Dim rowtblAssetUtilizationRow As tblAssetUtilizationRow = CType(Me.NewRow,tblAssetUtilizationRow)
            Dim columnValuesArray() As Object = New Object() {ID, Faculty, NoOfRooms, RoomName, NoOfSeats, NoOfSessionsPerDay, NoOfSessionsPerWeek, FieldOfStufy, Year, SourceID, bDeleted, RowVersionID, CreationDate, AssetType, AssetGroup, AreaCoverage, Capacity}
            rowtblAssetUtilizationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblAssetUtilizationRow)
            Return rowtblAssetUtilizationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As System.Guid) As tblAssetUtilizationRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblAssetUtilizationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblAssetUtilizationDataTable = CType(MyBase.Clone,tblAssetUtilizationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblAssetUtilizationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnFaculty = MyBase.Columns("Faculty")
            Me.columnNoOfRooms = MyBase.Columns("NoOfRooms")
            Me.columnRoomName = MyBase.Columns("RoomName")
            Me.columnNoOfSeats = MyBase.Columns("NoOfSeats")
            Me.columnNoOfSessionsPerDay = MyBase.Columns("NoOfSessionsPerDay")
            Me.columnNoOfSessionsPerWeek = MyBase.Columns("NoOfSessionsPerWeek")
            Me.columnFieldOfStufy = MyBase.Columns("FieldOfStufy")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
            Me.columnAssetType = MyBase.Columns("AssetType")
            Me.columnAssetGroup = MyBase.Columns("AssetGroup")
            Me.columnAreaCoverage = MyBase.Columns("AreaCoverage")
            Me.columnCapacity = MyBase.Columns("Capacity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnFaculty = New Global.System.Data.DataColumn("Faculty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaculty)
            Me.columnNoOfRooms = New Global.System.Data.DataColumn("NoOfRooms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoOfRooms)
            Me.columnRoomName = New Global.System.Data.DataColumn("RoomName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRoomName)
            Me.columnNoOfSeats = New Global.System.Data.DataColumn("NoOfSeats", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoOfSeats)
            Me.columnNoOfSessionsPerDay = New Global.System.Data.DataColumn("NoOfSessionsPerDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoOfSessionsPerDay)
            Me.columnNoOfSessionsPerWeek = New Global.System.Data.DataColumn("NoOfSessionsPerWeek", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoOfSessionsPerWeek)
            Me.columnFieldOfStufy = New Global.System.Data.DataColumn("FieldOfStufy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldOfStufy)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.columnAssetType = New Global.System.Data.DataColumn("AssetType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetType)
            Me.columnAssetGroup = New Global.System.Data.DataColumn("AssetGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssetGroup)
            Me.columnAreaCoverage = New Global.System.Data.DataColumn("AreaCoverage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAreaCoverage)
            Me.columnCapacity = New Global.System.Data.DataColumn("Capacity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnFaculty.MaxLength = 255
            Me.columnNoOfRooms.MaxLength = 255
            Me.columnRoomName.MaxLength = 255
            Me.columnNoOfSeats.MaxLength = 255
            Me.columnNoOfSessionsPerDay.MaxLength = 255
            Me.columnNoOfSessionsPerWeek.MaxLength = 255
            Me.columnFieldOfStufy.MaxLength = 200
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 50
            Me.columnRowVersionID.ReadOnly = true
            Me.columnAssetType.MaxLength = 20
            Me.columnAssetGroup.MaxLength = 20
            Me.columnAreaCoverage.MaxLength = 20
            Me.columnCapacity.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblAssetUtilizationRow() As tblAssetUtilizationRow
            Return CType(Me.NewRow,tblAssetUtilizationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblAssetUtilizationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblAssetUtilizationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblAssetUtilizationRowChangedEvent) Is Nothing) Then
                RaiseEvent tblAssetUtilizationRowChanged(Me, New tblAssetUtilizationRowChangeEvent(CType(e.Row,tblAssetUtilizationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblAssetUtilizationRowChangingEvent) Is Nothing) Then
                RaiseEvent tblAssetUtilizationRowChanging(Me, New tblAssetUtilizationRowChangeEvent(CType(e.Row,tblAssetUtilizationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblAssetUtilizationRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblAssetUtilizationRowDeleted(Me, New tblAssetUtilizationRowChangeEvent(CType(e.Row,tblAssetUtilizationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblAssetUtilizationRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblAssetUtilizationRowDeleting(Me, New tblAssetUtilizationRowChangeEvent(CType(e.Row,tblAssetUtilizationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblAssetUtilizationRow(ByVal row As tblAssetUtilizationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblAssetUtilizationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblBusinessObjectDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblBusinessObjectRow)
        
        Private columnObjectName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblBusinessObject"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblBusinessObjectRow
            Get
                Return CType(Me.Rows(index),tblBusinessObjectRow)
            End Get
        End Property
        
        Public Event tblBusinessObjectRowChanging As tblBusinessObjectRowChangeEventHandler
        
        Public Event tblBusinessObjectRowChanged As tblBusinessObjectRowChangeEventHandler
        
        Public Event tblBusinessObjectRowDeleting As tblBusinessObjectRowChangeEventHandler
        
        Public Event tblBusinessObjectRowDeleted As tblBusinessObjectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblBusinessObjectRow(ByVal row As tblBusinessObjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblBusinessObjectRow(ByVal ObjectName As String, ByVal Description As String, ByVal Year As String, ByVal SourceID As String, ByVal bDeleted As Boolean, ByVal RowVersionID() As Byte, ByVal CreationDate As Long) As tblBusinessObjectRow
            Dim rowtblBusinessObjectRow As tblBusinessObjectRow = CType(Me.NewRow,tblBusinessObjectRow)
            Dim columnValuesArray() As Object = New Object() {ObjectName, Description, Year, SourceID, bDeleted, RowVersionID, CreationDate}
            rowtblBusinessObjectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblBusinessObjectRow)
            Return rowtblBusinessObjectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByObjectName(ByVal ObjectName As String) As tblBusinessObjectRow
            Return CType(Me.Rows.Find(New Object() {ObjectName}),tblBusinessObjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblBusinessObjectDataTable = CType(MyBase.Clone,tblBusinessObjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblBusinessObjectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnObjectName = MyBase.Columns("ObjectName")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnObjectName = New Global.System.Data.DataColumn("ObjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjectName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnObjectName}, true))
            Me.columnObjectName.AllowDBNull = false
            Me.columnObjectName.Unique = true
            Me.columnObjectName.MaxLength = 50
            Me.columnDescription.MaxLength = 100
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 10
            Me.columnRowVersionID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblBusinessObjectRow() As tblBusinessObjectRow
            Return CType(Me.NewRow,tblBusinessObjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblBusinessObjectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblBusinessObjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblBusinessObjectRowChangedEvent) Is Nothing) Then
                RaiseEvent tblBusinessObjectRowChanged(Me, New tblBusinessObjectRowChangeEvent(CType(e.Row,tblBusinessObjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblBusinessObjectRowChangingEvent) Is Nothing) Then
                RaiseEvent tblBusinessObjectRowChanging(Me, New tblBusinessObjectRowChangeEvent(CType(e.Row,tblBusinessObjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblBusinessObjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblBusinessObjectRowDeleted(Me, New tblBusinessObjectRowChangeEvent(CType(e.Row,tblBusinessObjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblBusinessObjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblBusinessObjectRowDeleting(Me, New tblBusinessObjectRowChangeEvent(CType(e.Row,tblBusinessObjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblBusinessObjectRow(ByVal row As tblBusinessObjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblBusinessObjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblFundingDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblFundingRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnGovernment As Global.System.Data.DataColumn
        
        Private columnExternals As Global.System.Data.DataColumn
        
        Private columnInstitution As Global.System.Data.DataColumn
        
        Private columnLocalGovernment As Global.System.Data.DataColumn
        
        Private columnSchoolFees As Global.System.Data.DataColumn
        
        Private columnOwnGenRevenue As Global.System.Data.DataColumn
        
        Private columnOther As Global.System.Data.DataColumn
        
        Private columnSalaries As Global.System.Data.DataColumn
        
        Private columnOtherExpenditure As Global.System.Data.DataColumn
        
        Private columnInvestments As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblFunding"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GovernmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGovernment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExternalsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExternals
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstitutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstitution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocalGovernmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocalGovernment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchoolFeesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchoolFees
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OwnGenRevenueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOwnGenRevenue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalariesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalaries
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherExpenditureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtherExpenditure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvestmentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvestments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblFundingRow
            Get
                Return CType(Me.Rows(index),tblFundingRow)
            End Get
        End Property
        
        Public Event tblFundingRowChanging As tblFundingRowChangeEventHandler
        
        Public Event tblFundingRowChanged As tblFundingRowChangeEventHandler
        
        Public Event tblFundingRowDeleting As tblFundingRowChangeEventHandler
        
        Public Event tblFundingRowDeleted As tblFundingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblFundingRow(ByVal row As tblFundingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblFundingRow( _
                    ByVal ID As System.Guid,  _
                    ByVal Government As Double,  _
                    ByVal Externals As Double,  _
                    ByVal Institution As Double,  _
                    ByVal LocalGovernment As Double,  _
                    ByVal SchoolFees As Double,  _
                    ByVal OwnGenRevenue As Double,  _
                    ByVal Other As Double,  _
                    ByVal Salaries As Double,  _
                    ByVal OtherExpenditure As Double,  _
                    ByVal Investments As Double,  _
                    ByVal Year As String,  _
                    ByVal SourceID As String,  _
                    ByVal bDeleted As Boolean,  _
                    ByVal RowVersionID() As Byte,  _
                    ByVal CreationDate As Long) As tblFundingRow
            Dim rowtblFundingRow As tblFundingRow = CType(Me.NewRow,tblFundingRow)
            Dim columnValuesArray() As Object = New Object() {ID, Government, Externals, Institution, LocalGovernment, SchoolFees, OwnGenRevenue, Other, Salaries, OtherExpenditure, Investments, Year, SourceID, bDeleted, RowVersionID, CreationDate}
            rowtblFundingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblFundingRow)
            Return rowtblFundingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As System.Guid) As tblFundingRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblFundingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblFundingDataTable = CType(MyBase.Clone,tblFundingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblFundingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnGovernment = MyBase.Columns("Government")
            Me.columnExternals = MyBase.Columns("Externals")
            Me.columnInstitution = MyBase.Columns("Institution")
            Me.columnLocalGovernment = MyBase.Columns("LocalGovernment")
            Me.columnSchoolFees = MyBase.Columns("SchoolFees")
            Me.columnOwnGenRevenue = MyBase.Columns("OwnGenRevenue")
            Me.columnOther = MyBase.Columns("Other")
            Me.columnSalaries = MyBase.Columns("Salaries")
            Me.columnOtherExpenditure = MyBase.Columns("OtherExpenditure")
            Me.columnInvestments = MyBase.Columns("Investments")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnGovernment = New Global.System.Data.DataColumn("Government", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGovernment)
            Me.columnExternals = New Global.System.Data.DataColumn("Externals", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExternals)
            Me.columnInstitution = New Global.System.Data.DataColumn("Institution", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstitution)
            Me.columnLocalGovernment = New Global.System.Data.DataColumn("LocalGovernment", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocalGovernment)
            Me.columnSchoolFees = New Global.System.Data.DataColumn("SchoolFees", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchoolFees)
            Me.columnOwnGenRevenue = New Global.System.Data.DataColumn("OwnGenRevenue", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOwnGenRevenue)
            Me.columnOther = New Global.System.Data.DataColumn("Other", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOther)
            Me.columnSalaries = New Global.System.Data.DataColumn("Salaries", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalaries)
            Me.columnOtherExpenditure = New Global.System.Data.DataColumn("OtherExpenditure", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtherExpenditure)
            Me.columnInvestments = New Global.System.Data.DataColumn("Investments", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvestments)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 10
            Me.columnRowVersionID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblFundingRow() As tblFundingRow
            Return CType(Me.NewRow,tblFundingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblFundingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblFundingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblFundingRowChangedEvent) Is Nothing) Then
                RaiseEvent tblFundingRowChanged(Me, New tblFundingRowChangeEvent(CType(e.Row,tblFundingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblFundingRowChangingEvent) Is Nothing) Then
                RaiseEvent tblFundingRowChanging(Me, New tblFundingRowChangeEvent(CType(e.Row,tblFundingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblFundingRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblFundingRowDeleted(Me, New tblFundingRowChangeEvent(CType(e.Row,tblFundingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblFundingRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblFundingRowDeleting(Me, New tblFundingRowChangeEvent(CType(e.Row,tblFundingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblFundingRow(ByVal row As tblFundingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblFundingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblEnrollmentDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblEnrollmentRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnMale As Global.System.Data.DataColumn
        
        Private columnFemale As Global.System.Data.DataColumn
        
        Private columnSponsorship As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnNationality As Global.System.Data.DataColumn
        
        Private columnDisabled As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnFieldOfStudy As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblEnrollment"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FemaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SponsorshipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSponsorship
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NationalityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNationality
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisabledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisabled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FieldOfStudyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldOfStudy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblEnrollmentRow
            Get
                Return CType(Me.Rows(index),tblEnrollmentRow)
            End Get
        End Property
        
        Public Event tblEnrollmentRowChanging As tblEnrollmentRowChangeEventHandler
        
        Public Event tblEnrollmentRowChanged As tblEnrollmentRowChangeEventHandler
        
        Public Event tblEnrollmentRowDeleting As tblEnrollmentRowChangeEventHandler
        
        Public Event tblEnrollmentRowDeleted As tblEnrollmentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblEnrollmentRow(ByVal row As tblEnrollmentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblEnrollmentRow(ByVal ID As System.Guid, ByVal Male As Integer, ByVal Female As Integer, ByVal Sponsorship As String, ByVal Amount As Double, ByVal Status As String, ByVal Nationality As String, ByVal Disabled As Integer, ByVal Year As String, ByVal SourceID As String, ByVal FieldOfStudy As String, ByVal bDeleted As Boolean, ByVal RowVersionID() As Byte, ByVal CreationDate As Long) As tblEnrollmentRow
            Dim rowtblEnrollmentRow As tblEnrollmentRow = CType(Me.NewRow,tblEnrollmentRow)
            Dim columnValuesArray() As Object = New Object() {ID, Male, Female, Sponsorship, Amount, Status, Nationality, Disabled, Year, SourceID, FieldOfStudy, bDeleted, RowVersionID, CreationDate}
            rowtblEnrollmentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblEnrollmentRow)
            Return rowtblEnrollmentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As System.Guid) As tblEnrollmentRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblEnrollmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblEnrollmentDataTable = CType(MyBase.Clone,tblEnrollmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblEnrollmentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnMale = MyBase.Columns("Male")
            Me.columnFemale = MyBase.Columns("Female")
            Me.columnSponsorship = MyBase.Columns("Sponsorship")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnNationality = MyBase.Columns("Nationality")
            Me.columnDisabled = MyBase.Columns("Disabled")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnFieldOfStudy = MyBase.Columns("FieldOfStudy")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnMale = New Global.System.Data.DataColumn("Male", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMale)
            Me.columnFemale = New Global.System.Data.DataColumn("Female", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemale)
            Me.columnSponsorship = New Global.System.Data.DataColumn("Sponsorship", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSponsorship)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnNationality = New Global.System.Data.DataColumn("Nationality", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNationality)
            Me.columnDisabled = New Global.System.Data.DataColumn("Disabled", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisabled)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnFieldOfStudy = New Global.System.Data.DataColumn("FieldOfStudy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldOfStudy)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnSponsorship.MaxLength = 255
            Me.columnStatus.MaxLength = 255
            Me.columnNationality.MaxLength = 255
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 50
            Me.columnFieldOfStudy.MaxLength = 255
            Me.columnRowVersionID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblEnrollmentRow() As tblEnrollmentRow
            Return CType(Me.NewRow,tblEnrollmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblEnrollmentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblEnrollmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblEnrollmentRowChangedEvent) Is Nothing) Then
                RaiseEvent tblEnrollmentRowChanged(Me, New tblEnrollmentRowChangeEvent(CType(e.Row,tblEnrollmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblEnrollmentRowChangingEvent) Is Nothing) Then
                RaiseEvent tblEnrollmentRowChanging(Me, New tblEnrollmentRowChangeEvent(CType(e.Row,tblEnrollmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblEnrollmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblEnrollmentRowDeleted(Me, New tblEnrollmentRowChangeEvent(CType(e.Row,tblEnrollmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblEnrollmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblEnrollmentRowDeleting(Me, New tblEnrollmentRowChangeEvent(CType(e.Row,tblEnrollmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblEnrollmentRow(ByVal row As tblEnrollmentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblEnrollmentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblGradDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblGradDataRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnAwardPreparedCode As Global.System.Data.DataColumn
        
        Private columnFieldOfSpecialization As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        Private columnGradGroup As Global.System.Data.DataColumn
        
        Private columnMale As Global.System.Data.DataColumn
        
        Private columnFemale As Global.System.Data.DataColumn
        
        Private columnAwardGroup As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblGradData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AwardPreparedCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAwardPreparedCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FieldOfSpecializationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldOfSpecialization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GradGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGradGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FemaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AwardGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAwardGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblGradDataRow
            Get
                Return CType(Me.Rows(index),tblGradDataRow)
            End Get
        End Property
        
        Public Event tblGradDataRowChanging As tblGradDataRowChangeEventHandler
        
        Public Event tblGradDataRowChanged As tblGradDataRowChangeEventHandler
        
        Public Event tblGradDataRowDeleting As tblGradDataRowChangeEventHandler
        
        Public Event tblGradDataRowDeleted As tblGradDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblGradDataRow(ByVal row As tblGradDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblGradDataRow(ByVal ID As System.Guid, ByVal AwardPreparedCode As String, ByVal FieldOfSpecialization As String, ByVal SourceID As String, ByVal Year As String, ByVal bDeleted As Boolean, ByVal RowVersionID() As Byte, ByVal CreationDate As Long, ByVal GradGroup As String, ByVal Male As Integer, ByVal Female As Integer, ByVal AwardGroup As String) As tblGradDataRow
            Dim rowtblGradDataRow As tblGradDataRow = CType(Me.NewRow,tblGradDataRow)
            Dim columnValuesArray() As Object = New Object() {ID, AwardPreparedCode, FieldOfSpecialization, SourceID, Year, bDeleted, RowVersionID, CreationDate, GradGroup, Male, Female, AwardGroup}
            rowtblGradDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblGradDataRow)
            Return rowtblGradDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As System.Guid) As tblGradDataRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblGradDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblGradDataDataTable = CType(MyBase.Clone,tblGradDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblGradDataDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnAwardPreparedCode = MyBase.Columns("AwardPreparedCode")
            Me.columnFieldOfSpecialization = MyBase.Columns("FieldOfSpecialization")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
            Me.columnGradGroup = MyBase.Columns("GradGroup")
            Me.columnMale = MyBase.Columns("Male")
            Me.columnFemale = MyBase.Columns("Female")
            Me.columnAwardGroup = MyBase.Columns("AwardGroup")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnAwardPreparedCode = New Global.System.Data.DataColumn("AwardPreparedCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAwardPreparedCode)
            Me.columnFieldOfSpecialization = New Global.System.Data.DataColumn("FieldOfSpecialization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldOfSpecialization)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.columnGradGroup = New Global.System.Data.DataColumn("GradGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGradGroup)
            Me.columnMale = New Global.System.Data.DataColumn("Male", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMale)
            Me.columnFemale = New Global.System.Data.DataColumn("Female", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemale)
            Me.columnAwardGroup = New Global.System.Data.DataColumn("AwardGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAwardGroup)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnAwardPreparedCode.MaxLength = 10
            Me.columnFieldOfSpecialization.MaxLength = 10
            Me.columnSourceID.MaxLength = 10
            Me.columnYear.MaxLength = 9
            Me.columnRowVersionID.ReadOnly = true
            Me.columnGradGroup.MaxLength = 50
            Me.columnAwardGroup.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblGradDataRow() As tblGradDataRow
            Return CType(Me.NewRow,tblGradDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblGradDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblGradDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblGradDataRowChangedEvent) Is Nothing) Then
                RaiseEvent tblGradDataRowChanged(Me, New tblGradDataRowChangeEvent(CType(e.Row,tblGradDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblGradDataRowChangingEvent) Is Nothing) Then
                RaiseEvent tblGradDataRowChanging(Me, New tblGradDataRowChangeEvent(CType(e.Row,tblGradDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblGradDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblGradDataRowDeleted(Me, New tblGradDataRowChangeEvent(CType(e.Row,tblGradDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblGradDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblGradDataRowDeleting(Me, New tblGradDataRowChangeEvent(CType(e.Row,tblGradDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblGradDataRow(ByVal row As tblGradDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblGradDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblGroupRightsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblGroupRightsRow)
        
        Private columnRightID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnGroupID As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnAllow As Global.System.Data.DataColumn
        
        Private columnAdd As Global.System.Data.DataColumn
        
        Private columnEdit As Global.System.Data.DataColumn
        
        Private columnDelete As Global.System.Data.DataColumn
        
        Private columnRightGroup As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblGroupRights"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RightIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRightID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AllowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAllow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EditColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEdit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RightGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRightGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblGroupRightsRow
            Get
                Return CType(Me.Rows(index),tblGroupRightsRow)
            End Get
        End Property
        
        Public Event tblGroupRightsRowChanging As tblGroupRightsRowChangeEventHandler
        
        Public Event tblGroupRightsRowChanged As tblGroupRightsRowChangeEventHandler
        
        Public Event tblGroupRightsRowDeleting As tblGroupRightsRowChangeEventHandler
        
        Public Event tblGroupRightsRowDeleted As tblGroupRightsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblGroupRightsRow(ByVal row As tblGroupRightsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblGroupRightsRow(ByVal parenttblRightsRowByFK_tblGroupRights_tblRights As tblRightsRow, ByVal Description As String, ByVal parenttblGroupsRowByFK_GroupRight_Groups As tblGroupsRow, ByVal Year As String, ByVal SourceID As String, ByVal bDeleted As Boolean, ByVal RowVersionID() As Byte, ByVal Allow As Boolean, ByVal Add As Boolean, ByVal Edit As Boolean, ByVal Delete As Boolean, ByVal RightGroup As String) As tblGroupRightsRow
            Dim rowtblGroupRightsRow As tblGroupRightsRow = CType(Me.NewRow,tblGroupRightsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Description, Nothing, Year, SourceID, bDeleted, RowVersionID, Allow, Add, Edit, Delete, RightGroup}
            If (Not (parenttblRightsRowByFK_tblGroupRights_tblRights) Is Nothing) Then
                columnValuesArray(0) = parenttblRightsRowByFK_tblGroupRights_tblRights(0)
            End If
            If (Not (parenttblGroupsRowByFK_GroupRight_Groups) Is Nothing) Then
                columnValuesArray(2) = parenttblGroupsRowByFK_GroupRight_Groups(0)
            End If
            rowtblGroupRightsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblGroupRightsRow)
            Return rowtblGroupRightsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRightIDGroupID(ByVal RightID As String, ByVal GroupID As String) As tblGroupRightsRow
            Return CType(Me.Rows.Find(New Object() {RightID, GroupID}),tblGroupRightsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblGroupRightsDataTable = CType(MyBase.Clone,tblGroupRightsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblGroupRightsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRightID = MyBase.Columns("RightID")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnGroupID = MyBase.Columns("GroupID")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnAllow = MyBase.Columns("Allow")
            Me.columnAdd = MyBase.Columns("Add")
            Me.columnEdit = MyBase.Columns("Edit")
            Me.columnDelete = MyBase.Columns("Delete")
            Me.columnRightGroup = MyBase.Columns("RightGroup")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRightID = New Global.System.Data.DataColumn("RightID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRightID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnGroupID = New Global.System.Data.DataColumn("GroupID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupID)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnAllow = New Global.System.Data.DataColumn("Allow", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAllow)
            Me.columnAdd = New Global.System.Data.DataColumn("Add", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdd)
            Me.columnEdit = New Global.System.Data.DataColumn("Edit", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEdit)
            Me.columnDelete = New Global.System.Data.DataColumn("Delete", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelete)
            Me.columnRightGroup = New Global.System.Data.DataColumn("RightGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRightGroup)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRightID, Me.columnGroupID}, true))
            Me.columnRightID.AllowDBNull = false
            Me.columnRightID.MaxLength = 50
            Me.columnDescription.MaxLength = 50
            Me.columnGroupID.AllowDBNull = false
            Me.columnGroupID.MaxLength = 50
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 10
            Me.columnRowVersionID.ReadOnly = true
            Me.columnRightGroup.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblGroupRightsRow() As tblGroupRightsRow
            Return CType(Me.NewRow,tblGroupRightsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblGroupRightsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblGroupRightsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblGroupRightsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblGroupRightsRowChanged(Me, New tblGroupRightsRowChangeEvent(CType(e.Row,tblGroupRightsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblGroupRightsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblGroupRightsRowChanging(Me, New tblGroupRightsRowChangeEvent(CType(e.Row,tblGroupRightsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblGroupRightsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblGroupRightsRowDeleted(Me, New tblGroupRightsRowChangeEvent(CType(e.Row,tblGroupRightsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblGroupRightsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblGroupRightsRowDeleting(Me, New tblGroupRightsRowChangeEvent(CType(e.Row,tblGroupRightsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblGroupRightsRow(ByVal row As tblGroupRightsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblGroupRightsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblGradDataDetailedDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblGradDataDetailedRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnFKID As Global.System.Data.DataColumn
        
        Private columnGradGroup As Global.System.Data.DataColumn
        
        Private columnMale As Global.System.Data.DataColumn
        
        Private columnFemale As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblGradDataDetailed"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FKIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFKID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GradGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGradGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FemaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblGradDataDetailedRow
            Get
                Return CType(Me.Rows(index),tblGradDataDetailedRow)
            End Get
        End Property
        
        Public Event tblGradDataDetailedRowChanging As tblGradDataDetailedRowChangeEventHandler
        
        Public Event tblGradDataDetailedRowChanged As tblGradDataDetailedRowChangeEventHandler
        
        Public Event tblGradDataDetailedRowDeleting As tblGradDataDetailedRowChangeEventHandler
        
        Public Event tblGradDataDetailedRowDeleted As tblGradDataDetailedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblGradDataDetailedRow(ByVal row As tblGradDataDetailedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblGradDataDetailedRow(ByVal ID As System.Guid, ByVal FKID As System.Guid, ByVal GradGroup As String, ByVal Male As Integer, ByVal Female As Integer, ByVal bDeleted As Boolean, ByVal RowVersionID() As Byte, ByVal CreationDate As Long) As tblGradDataDetailedRow
            Dim rowtblGradDataDetailedRow As tblGradDataDetailedRow = CType(Me.NewRow,tblGradDataDetailedRow)
            Dim columnValuesArray() As Object = New Object() {ID, FKID, GradGroup, Male, Female, bDeleted, RowVersionID, CreationDate}
            rowtblGradDataDetailedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblGradDataDetailedRow)
            Return rowtblGradDataDetailedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As System.Guid) As tblGradDataDetailedRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblGradDataDetailedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblGradDataDetailedDataTable = CType(MyBase.Clone,tblGradDataDetailedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblGradDataDetailedDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnFKID = MyBase.Columns("FKID")
            Me.columnGradGroup = MyBase.Columns("GradGroup")
            Me.columnMale = MyBase.Columns("Male")
            Me.columnFemale = MyBase.Columns("Female")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnFKID = New Global.System.Data.DataColumn("FKID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFKID)
            Me.columnGradGroup = New Global.System.Data.DataColumn("GradGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGradGroup)
            Me.columnMale = New Global.System.Data.DataColumn("Male", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMale)
            Me.columnFemale = New Global.System.Data.DataColumn("Female", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemale)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnFKID.AllowDBNull = false
            Me.columnGradGroup.MaxLength = 50
            Me.columnRowVersionID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblGradDataDetailedRow() As tblGradDataDetailedRow
            Return CType(Me.NewRow,tblGradDataDetailedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblGradDataDetailedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblGradDataDetailedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblGradDataDetailedRowChangedEvent) Is Nothing) Then
                RaiseEvent tblGradDataDetailedRowChanged(Me, New tblGradDataDetailedRowChangeEvent(CType(e.Row,tblGradDataDetailedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblGradDataDetailedRowChangingEvent) Is Nothing) Then
                RaiseEvent tblGradDataDetailedRowChanging(Me, New tblGradDataDetailedRowChangeEvent(CType(e.Row,tblGradDataDetailedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblGradDataDetailedRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblGradDataDetailedRowDeleted(Me, New tblGradDataDetailedRowChangeEvent(CType(e.Row,tblGradDataDetailedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblGradDataDetailedRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblGradDataDetailedRowDeleting(Me, New tblGradDataDetailedRowChangeEvent(CType(e.Row,tblGradDataDetailedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblGradDataDetailedRow(ByVal row As tblGradDataDetailedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblGradDataDetailedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblGroupsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblGroupsRow)
        
        Private columnGroupID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblGroups"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblGroupsRow
            Get
                Return CType(Me.Rows(index),tblGroupsRow)
            End Get
        End Property
        
        Public Event tblGroupsRowChanging As tblGroupsRowChangeEventHandler
        
        Public Event tblGroupsRowChanged As tblGroupsRowChangeEventHandler
        
        Public Event tblGroupsRowDeleting As tblGroupsRowChangeEventHandler
        
        Public Event tblGroupsRowDeleted As tblGroupsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblGroupsRow(ByVal row As tblGroupsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblGroupsRow(ByVal GroupID As String, ByVal Description As String, ByVal Year As String, ByVal SourceID As String, ByVal bDeleted As Boolean, ByVal RowVersionID() As Byte) As tblGroupsRow
            Dim rowtblGroupsRow As tblGroupsRow = CType(Me.NewRow,tblGroupsRow)
            Dim columnValuesArray() As Object = New Object() {GroupID, Description, Year, SourceID, bDeleted, RowVersionID}
            rowtblGroupsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblGroupsRow)
            Return rowtblGroupsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByGroupID(ByVal GroupID As String) As tblGroupsRow
            Return CType(Me.Rows.Find(New Object() {GroupID}),tblGroupsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblGroupsDataTable = CType(MyBase.Clone,tblGroupsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblGroupsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGroupID = MyBase.Columns("GroupID")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGroupID = New Global.System.Data.DataColumn("GroupID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnGroupID}, true))
            Me.columnGroupID.AllowDBNull = false
            Me.columnGroupID.Unique = true
            Me.columnGroupID.MaxLength = 50
            Me.columnDescription.MaxLength = 10
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 10
            Me.columnRowVersionID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblGroupsRow() As tblGroupsRow
            Return CType(Me.NewRow,tblGroupsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblGroupsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblGroupsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblGroupsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblGroupsRowChanged(Me, New tblGroupsRowChangeEvent(CType(e.Row,tblGroupsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblGroupsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblGroupsRowChanging(Me, New tblGroupsRowChangeEvent(CType(e.Row,tblGroupsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblGroupsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblGroupsRowDeleted(Me, New tblGroupsRowChangeEvent(CType(e.Row,tblGroupsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblGroupsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblGroupsRowDeleting(Me, New tblGroupsRowChangeEvent(CType(e.Row,tblGroupsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblGroupsRow(ByVal row As tblGroupsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblGroupsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblInstitutionsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblInstitutionsRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnShortName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnCategory As Global.System.Data.DataColumn
        
        Private columnCountry As Global.System.Data.DataColumn
        
        Private columnInstitutionCode As Global.System.Data.DataColumn
        
        Private columnRegionCode As Global.System.Data.DataColumn
        
        Private columnDistrictCode As Global.System.Data.DataColumn
        
        Private columnPhysicalAddress As Global.System.Data.DataColumn
        
        Private columnPOBox As Global.System.Data.DataColumn
        
        Private columnTelNo As Global.System.Data.DataColumn
        
        Private columnFaxNo As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnParentMinistry As Global.System.Data.DataColumn
        
        Private columnOwnership As Global.System.Data.DataColumn
        
        Private columnEnrolmentCapacity As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        Private columnwebsite As Global.System.Data.DataColumn
        
        Private columnCampusLocation As Global.System.Data.DataColumn
        
        Private columnDistanceFromRoad As Global.System.Data.DataColumn
        
        Private columnBuiltArea As Global.System.Data.DataColumn
        
        Private columnUnutilizedArea As Global.System.Data.DataColumn
        
        Private columnVisionAndMission As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblInstitutions"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShortNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShortName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstitutionCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstitutionCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegionCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegionCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistrictCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistrictCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhysicalAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhysicalAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POBoxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOBox
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaxNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParentMinistryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParentMinistry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OwnershipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOwnership
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnrolmentCapacityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnrolmentCapacity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property websiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwebsite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CampusLocationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCampusLocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DistanceFromRoadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistanceFromRoad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BuiltAreaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBuiltArea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnutilizedAreaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnutilizedArea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VisionAndMissionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisionAndMission
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblInstitutionsRow
            Get
                Return CType(Me.Rows(index),tblInstitutionsRow)
            End Get
        End Property
        
        Public Event tblInstitutionsRowChanging As tblInstitutionsRowChangeEventHandler
        
        Public Event tblInstitutionsRowChanged As tblInstitutionsRowChangeEventHandler
        
        Public Event tblInstitutionsRowDeleting As tblInstitutionsRowChangeEventHandler
        
        Public Event tblInstitutionsRowDeleted As tblInstitutionsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblInstitutionsRow(ByVal row As tblInstitutionsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblInstitutionsRow( _
                    ByVal ID As System.Guid,  _
                    ByVal ShortName As String,  _
                    ByVal Description As String,  _
                    ByVal Category As String,  _
                    ByVal Country As String,  _
                    ByVal InstitutionCode As String,  _
                    ByVal RegionCode As String,  _
                    ByVal DistrictCode As String,  _
                    ByVal PhysicalAddress As String,  _
                    ByVal POBox As String,  _
                    ByVal TelNo As String,  _
                    ByVal FaxNo As String,  _
                    ByVal Email As String,  _
                    ByVal ParentMinistry As String,  _
                    ByVal Ownership As String,  _
                    ByVal EnrolmentCapacity As Integer,  _
                    ByVal RowVersionID() As Byte,  _
                    ByVal bDeleted As Boolean,  _
                    ByVal CreationDate As Long,  _
                    ByVal website As String,  _
                    ByVal CampusLocation As String,  _
                    ByVal DistanceFromRoad As String,  _
                    ByVal BuiltArea As Double,  _
                    ByVal UnutilizedArea As Double,  _
                    ByVal VisionAndMission As String) As tblInstitutionsRow
            Dim rowtblInstitutionsRow As tblInstitutionsRow = CType(Me.NewRow,tblInstitutionsRow)
            Dim columnValuesArray() As Object = New Object() {ID, ShortName, Description, Category, Country, InstitutionCode, RegionCode, DistrictCode, PhysicalAddress, POBox, TelNo, FaxNo, Email, ParentMinistry, Ownership, EnrolmentCapacity, RowVersionID, bDeleted, CreationDate, website, CampusLocation, DistanceFromRoad, BuiltArea, UnutilizedArea, VisionAndMission}
            rowtblInstitutionsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblInstitutionsRow)
            Return rowtblInstitutionsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As System.Guid) As tblInstitutionsRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblInstitutionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblInstitutionsDataTable = CType(MyBase.Clone,tblInstitutionsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblInstitutionsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnShortName = MyBase.Columns("ShortName")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnCategory = MyBase.Columns("Category")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnInstitutionCode = MyBase.Columns("InstitutionCode")
            Me.columnRegionCode = MyBase.Columns("RegionCode")
            Me.columnDistrictCode = MyBase.Columns("DistrictCode")
            Me.columnPhysicalAddress = MyBase.Columns("PhysicalAddress")
            Me.columnPOBox = MyBase.Columns("POBox")
            Me.columnTelNo = MyBase.Columns("TelNo")
            Me.columnFaxNo = MyBase.Columns("FaxNo")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnParentMinistry = MyBase.Columns("ParentMinistry")
            Me.columnOwnership = MyBase.Columns("Ownership")
            Me.columnEnrolmentCapacity = MyBase.Columns("EnrolmentCapacity")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
            Me.columnwebsite = MyBase.Columns("website")
            Me.columnCampusLocation = MyBase.Columns("CampusLocation")
            Me.columnDistanceFromRoad = MyBase.Columns("DistanceFromRoad")
            Me.columnBuiltArea = MyBase.Columns("BuiltArea")
            Me.columnUnutilizedArea = MyBase.Columns("UnutilizedArea")
            Me.columnVisionAndMission = MyBase.Columns("VisionAndMission")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnShortName = New Global.System.Data.DataColumn("ShortName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShortName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnCategory = New Global.System.Data.DataColumn("Category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory)
            Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnInstitutionCode = New Global.System.Data.DataColumn("InstitutionCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstitutionCode)
            Me.columnRegionCode = New Global.System.Data.DataColumn("RegionCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegionCode)
            Me.columnDistrictCode = New Global.System.Data.DataColumn("DistrictCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistrictCode)
            Me.columnPhysicalAddress = New Global.System.Data.DataColumn("PhysicalAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhysicalAddress)
            Me.columnPOBox = New Global.System.Data.DataColumn("POBox", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOBox)
            Me.columnTelNo = New Global.System.Data.DataColumn("TelNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelNo)
            Me.columnFaxNo = New Global.System.Data.DataColumn("FaxNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaxNo)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnParentMinistry = New Global.System.Data.DataColumn("ParentMinistry", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParentMinistry)
            Me.columnOwnership = New Global.System.Data.DataColumn("Ownership", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOwnership)
            Me.columnEnrolmentCapacity = New Global.System.Data.DataColumn("EnrolmentCapacity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnrolmentCapacity)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.columnwebsite = New Global.System.Data.DataColumn("website", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwebsite)
            Me.columnCampusLocation = New Global.System.Data.DataColumn("CampusLocation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCampusLocation)
            Me.columnDistanceFromRoad = New Global.System.Data.DataColumn("DistanceFromRoad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistanceFromRoad)
            Me.columnBuiltArea = New Global.System.Data.DataColumn("BuiltArea", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBuiltArea)
            Me.columnUnutilizedArea = New Global.System.Data.DataColumn("UnutilizedArea", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnutilizedArea)
            Me.columnVisionAndMission = New Global.System.Data.DataColumn("VisionAndMission", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisionAndMission)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnShortName.MaxLength = 50
            Me.columnDescription.MaxLength = 100
            Me.columnCategory.MaxLength = 50
            Me.columnCountry.MaxLength = 50
            Me.columnInstitutionCode.MaxLength = 50
            Me.columnRegionCode.MaxLength = 20
            Me.columnDistrictCode.MaxLength = 20
            Me.columnPhysicalAddress.MaxLength = 70
            Me.columnPOBox.MaxLength = 70
            Me.columnTelNo.MaxLength = 20
            Me.columnFaxNo.MaxLength = 20
            Me.columnEmail.MaxLength = 40
            Me.columnParentMinistry.MaxLength = 100
            Me.columnOwnership.MaxLength = 100
            Me.columnRowVersionID.ReadOnly = true
            Me.columnwebsite.MaxLength = 60
            Me.columnCampusLocation.MaxLength = 50
            Me.columnDistanceFromRoad.MaxLength = 50
            Me.columnVisionAndMission.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblInstitutionsRow() As tblInstitutionsRow
            Return CType(Me.NewRow,tblInstitutionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblInstitutionsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblInstitutionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblInstitutionsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblInstitutionsRowChanged(Me, New tblInstitutionsRowChangeEvent(CType(e.Row,tblInstitutionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblInstitutionsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblInstitutionsRowChanging(Me, New tblInstitutionsRowChangeEvent(CType(e.Row,tblInstitutionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblInstitutionsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblInstitutionsRowDeleted(Me, New tblInstitutionsRowChangeEvent(CType(e.Row,tblInstitutionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblInstitutionsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblInstitutionsRowDeleting(Me, New tblInstitutionsRowChangeEvent(CType(e.Row,tblInstitutionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblInstitutionsRow(ByVal row As tblInstitutionsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblInstitutionsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblListDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblListRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnListCode As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnCategory As Global.System.Data.DataColumn
        
        Private columnParent As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnListTag As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListTagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListTag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblListRow
            Get
                Return CType(Me.Rows(index),tblListRow)
            End Get
        End Property
        
        Public Event tblListRowChanging As tblListRowChangeEventHandler
        
        Public Event tblListRowChanged As tblListRowChangeEventHandler
        
        Public Event tblListRowDeleting As tblListRowChangeEventHandler
        
        Public Event tblListRowDeleted As tblListRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblListRow(ByVal row As tblListRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblListRow(ByVal ID As System.Guid, ByVal ListCode As String, ByVal Description As String, ByVal Category As String, ByVal Parent As String, ByVal Year As String, ByVal SourceID As String, ByVal ListTag As String, ByVal CreationDate As Long, ByVal bDeleted As Boolean, ByVal RowVersionID() As Byte) As tblListRow
            Dim rowtblListRow As tblListRow = CType(Me.NewRow,tblListRow)
            Dim columnValuesArray() As Object = New Object() {ID, ListCode, Description, Category, Parent, Year, SourceID, ListTag, CreationDate, bDeleted, RowVersionID}
            rowtblListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblListRow)
            Return rowtblListRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As System.Guid) As tblListRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblListDataTable = CType(MyBase.Clone,tblListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblListDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnListCode = MyBase.Columns("ListCode")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnCategory = MyBase.Columns("Category")
            Me.columnParent = MyBase.Columns("Parent")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnListTag = MyBase.Columns("ListTag")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnListCode = New Global.System.Data.DataColumn("ListCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListCode)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnCategory = New Global.System.Data.DataColumn("Category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory)
            Me.columnParent = New Global.System.Data.DataColumn("Parent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParent)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnListTag = New Global.System.Data.DataColumn("ListTag", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListTag)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnListCode.MaxLength = 50
            Me.columnDescription.MaxLength = 50
            Me.columnCategory.MaxLength = 50
            Me.columnParent.MaxLength = 50
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 10
            Me.columnListTag.MaxLength = 500
            Me.columnRowVersionID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblListRow() As tblListRow
            Return CType(Me.NewRow,tblListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblListRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblListRowChangedEvent) Is Nothing) Then
                RaiseEvent tblListRowChanged(Me, New tblListRowChangeEvent(CType(e.Row,tblListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblListRowChangingEvent) Is Nothing) Then
                RaiseEvent tblListRowChanging(Me, New tblListRowChangeEvent(CType(e.Row,tblListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblListRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblListRowDeleted(Me, New tblListRowChangeEvent(CType(e.Row,tblListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblListRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblListRowDeleting(Me, New tblListRowChangeEvent(CType(e.Row,tblListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblListRow(ByVal row As tblListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblEnrollmentDetailedDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblEnrollmentDetailedRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnDateOfBirth As Global.System.Data.DataColumn
        
        Private columnCategory As Global.System.Data.DataColumn
        
        Private columnFaculty As Global.System.Data.DataColumn
        
        Private columnGovernment As Global.System.Data.DataColumn
        
        Private columnPrivately As Global.System.Data.DataColumn
        
        Private columnOther As Global.System.Data.DataColumn
        
        Private columnModeOfEntry As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnFieldofStudy As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblEnrollmentDetailed"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateOfBirthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateOfBirth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacultyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaculty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GovernmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGovernment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrivatelyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrivately
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModeOfEntryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModeOfEntry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FieldofStudyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldofStudy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblEnrollmentDetailedRow
            Get
                Return CType(Me.Rows(index),tblEnrollmentDetailedRow)
            End Get
        End Property
        
        Public Event tblEnrollmentDetailedRowChanging As tblEnrollmentDetailedRowChangeEventHandler
        
        Public Event tblEnrollmentDetailedRowChanged As tblEnrollmentDetailedRowChangeEventHandler
        
        Public Event tblEnrollmentDetailedRowDeleting As tblEnrollmentDetailedRowChangeEventHandler
        
        Public Event tblEnrollmentDetailedRowDeleted As tblEnrollmentDetailedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblEnrollmentDetailedRow(ByVal row As tblEnrollmentDetailedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblEnrollmentDetailedRow( _
                    ByVal ID As System.Guid,  _
                    ByVal Name As String,  _
                    ByVal Sex As String,  _
                    ByVal DateOfBirth As String,  _
                    ByVal Category As String,  _
                    ByVal Faculty As String,  _
                    ByVal Government As String,  _
                    ByVal Privately As String,  _
                    ByVal Other As String,  _
                    ByVal ModeOfEntry As String,  _
                    ByVal Year As String,  _
                    ByVal SourceID As String,  _
                    ByVal FieldofStudy As String,  _
                    ByVal bDeleted As Boolean,  _
                    ByVal RowVersionID() As Byte,  _
                    ByVal CreationDate As Long) As tblEnrollmentDetailedRow
            Dim rowtblEnrollmentDetailedRow As tblEnrollmentDetailedRow = CType(Me.NewRow,tblEnrollmentDetailedRow)
            Dim columnValuesArray() As Object = New Object() {ID, Name, Sex, DateOfBirth, Category, Faculty, Government, Privately, Other, ModeOfEntry, Year, SourceID, FieldofStudy, bDeleted, RowVersionID, CreationDate}
            rowtblEnrollmentDetailedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblEnrollmentDetailedRow)
            Return rowtblEnrollmentDetailedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As System.Guid) As tblEnrollmentDetailedRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblEnrollmentDetailedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblEnrollmentDetailedDataTable = CType(MyBase.Clone,tblEnrollmentDetailedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblEnrollmentDetailedDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnDateOfBirth = MyBase.Columns("DateOfBirth")
            Me.columnCategory = MyBase.Columns("Category")
            Me.columnFaculty = MyBase.Columns("Faculty")
            Me.columnGovernment = MyBase.Columns("Government")
            Me.columnPrivately = MyBase.Columns("Privately")
            Me.columnOther = MyBase.Columns("Other")
            Me.columnModeOfEntry = MyBase.Columns("ModeOfEntry")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnFieldofStudy = MyBase.Columns("FieldofStudy")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnDateOfBirth = New Global.System.Data.DataColumn("DateOfBirth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateOfBirth)
            Me.columnCategory = New Global.System.Data.DataColumn("Category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory)
            Me.columnFaculty = New Global.System.Data.DataColumn("Faculty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaculty)
            Me.columnGovernment = New Global.System.Data.DataColumn("Government", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGovernment)
            Me.columnPrivately = New Global.System.Data.DataColumn("Privately", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrivately)
            Me.columnOther = New Global.System.Data.DataColumn("Other", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOther)
            Me.columnModeOfEntry = New Global.System.Data.DataColumn("ModeOfEntry", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModeOfEntry)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnFieldofStudy = New Global.System.Data.DataColumn("FieldofStudy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldofStudy)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnName.MaxLength = 255
            Me.columnSex.MaxLength = 255
            Me.columnDateOfBirth.MaxLength = 255
            Me.columnCategory.MaxLength = 255
            Me.columnFaculty.MaxLength = 255
            Me.columnGovernment.MaxLength = 255
            Me.columnPrivately.MaxLength = 255
            Me.columnOther.MaxLength = 255
            Me.columnModeOfEntry.MaxLength = 255
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 50
            Me.columnFieldofStudy.MaxLength = 200
            Me.columnRowVersionID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblEnrollmentDetailedRow() As tblEnrollmentDetailedRow
            Return CType(Me.NewRow,tblEnrollmentDetailedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblEnrollmentDetailedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblEnrollmentDetailedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblEnrollmentDetailedRowChangedEvent) Is Nothing) Then
                RaiseEvent tblEnrollmentDetailedRowChanged(Me, New tblEnrollmentDetailedRowChangeEvent(CType(e.Row,tblEnrollmentDetailedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblEnrollmentDetailedRowChangingEvent) Is Nothing) Then
                RaiseEvent tblEnrollmentDetailedRowChanging(Me, New tblEnrollmentDetailedRowChangeEvent(CType(e.Row,tblEnrollmentDetailedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblEnrollmentDetailedRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblEnrollmentDetailedRowDeleted(Me, New tblEnrollmentDetailedRowChangeEvent(CType(e.Row,tblEnrollmentDetailedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblEnrollmentDetailedRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblEnrollmentDetailedRowDeleting(Me, New tblEnrollmentDetailedRowChangeEvent(CType(e.Row,tblEnrollmentDetailedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblEnrollmentDetailedRow(ByVal row As tblEnrollmentDetailedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblEnrollmentDetailedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblRightsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblRightsRow)
        
        Private columnRightID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnBusinessObject As Global.System.Data.DataColumn
        
        Private columnMenuIndex As Global.System.Data.DataColumn
        
        Private columnMenuDescription As Global.System.Data.DataColumn
        
        Private columnMenuParentText As Global.System.Data.DataColumn
        
        Private columnComment As Global.System.Data.DataColumn
        
        Private columnMenuText As Global.System.Data.DataColumn
        
        Private columnMenuParentIndex As Global.System.Data.DataColumn
        
        Private columnControl As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblRights"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RightIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRightID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BusinessObjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBusinessObject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MenuIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMenuIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MenuDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMenuDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MenuParentTextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMenuParentText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MenuTextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMenuText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MenuParentIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMenuParentIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblRightsRow
            Get
                Return CType(Me.Rows(index),tblRightsRow)
            End Get
        End Property
        
        Public Event tblRightsRowChanging As tblRightsRowChangeEventHandler
        
        Public Event tblRightsRowChanged As tblRightsRowChangeEventHandler
        
        Public Event tblRightsRowDeleting As tblRightsRowChangeEventHandler
        
        Public Event tblRightsRowDeleted As tblRightsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblRightsRow(ByVal row As tblRightsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblRightsRow(ByVal RightID As String, ByVal Description As String, ByVal parenttblBusinessObjectRowByFK_Rights_BusinessObject1 As tblBusinessObjectRow, ByVal MenuIndex As Short, ByVal MenuDescription As String, ByVal MenuParentText As String, ByVal Comment As String, ByVal MenuText As String, ByVal MenuParentIndex As Short, ByVal Control As String, ByVal Year As String, ByVal SourceID As String, ByVal bDeleted As Boolean, ByVal RowVersionID() As Byte) As tblRightsRow
            Dim rowtblRightsRow As tblRightsRow = CType(Me.NewRow,tblRightsRow)
            Dim columnValuesArray() As Object = New Object() {RightID, Description, Nothing, MenuIndex, MenuDescription, MenuParentText, Comment, MenuText, MenuParentIndex, Control, Year, SourceID, bDeleted, RowVersionID}
            If (Not (parenttblBusinessObjectRowByFK_Rights_BusinessObject1) Is Nothing) Then
                columnValuesArray(2) = parenttblBusinessObjectRowByFK_Rights_BusinessObject1(0)
            End If
            rowtblRightsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblRightsRow)
            Return rowtblRightsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRightID(ByVal RightID As String) As tblRightsRow
            Return CType(Me.Rows.Find(New Object() {RightID}),tblRightsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblRightsDataTable = CType(MyBase.Clone,tblRightsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblRightsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRightID = MyBase.Columns("RightID")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnBusinessObject = MyBase.Columns("BusinessObject")
            Me.columnMenuIndex = MyBase.Columns("MenuIndex")
            Me.columnMenuDescription = MyBase.Columns("MenuDescription")
            Me.columnMenuParentText = MyBase.Columns("MenuParentText")
            Me.columnComment = MyBase.Columns("Comment")
            Me.columnMenuText = MyBase.Columns("MenuText")
            Me.columnMenuParentIndex = MyBase.Columns("MenuParentIndex")
            Me.columnControl = MyBase.Columns("Control")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRightID = New Global.System.Data.DataColumn("RightID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRightID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnBusinessObject = New Global.System.Data.DataColumn("BusinessObject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBusinessObject)
            Me.columnMenuIndex = New Global.System.Data.DataColumn("MenuIndex", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMenuIndex)
            Me.columnMenuDescription = New Global.System.Data.DataColumn("MenuDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMenuDescription)
            Me.columnMenuParentText = New Global.System.Data.DataColumn("MenuParentText", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMenuParentText)
            Me.columnComment = New Global.System.Data.DataColumn("Comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComment)
            Me.columnMenuText = New Global.System.Data.DataColumn("MenuText", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMenuText)
            Me.columnMenuParentIndex = New Global.System.Data.DataColumn("MenuParentIndex", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMenuParentIndex)
            Me.columnControl = New Global.System.Data.DataColumn("Control", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControl)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRightID}, true))
            Me.columnRightID.AllowDBNull = false
            Me.columnRightID.Unique = true
            Me.columnRightID.MaxLength = 50
            Me.columnDescription.MaxLength = 50
            Me.columnBusinessObject.MaxLength = 50
            Me.columnMenuDescription.MaxLength = 60
            Me.columnMenuParentText.MaxLength = 30
            Me.columnComment.MaxLength = 50
            Me.columnMenuText.MaxLength = 60
            Me.columnControl.MaxLength = 50
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 10
            Me.columnRowVersionID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblRightsRow() As tblRightsRow
            Return CType(Me.NewRow,tblRightsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblRightsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblRightsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblRightsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblRightsRowChanged(Me, New tblRightsRowChangeEvent(CType(e.Row,tblRightsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblRightsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblRightsRowChanging(Me, New tblRightsRowChangeEvent(CType(e.Row,tblRightsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblRightsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblRightsRowDeleted(Me, New tblRightsRowChangeEvent(CType(e.Row,tblRightsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblRightsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblRightsRowDeleting(Me, New tblRightsRowChangeEvent(CType(e.Row,tblRightsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblRightsRow(ByVal row As tblRightsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblRightsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblStaffsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblStaffsRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnQualification As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnRank As Global.System.Data.DataColumn
        
        Private columnCategory As Global.System.Data.DataColumn
        
        Private columnMale As Global.System.Data.DataColumn
        
        Private columnFemale As Global.System.Data.DataColumn
        
        Private columnDisabled As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblStaffs"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QualificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQualification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FemaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisabledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisabled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblStaffsRow
            Get
                Return CType(Me.Rows(index),tblStaffsRow)
            End Get
        End Property
        
        Public Event tblStaffsRowChanging As tblStaffsRowChangeEventHandler
        
        Public Event tblStaffsRowChanged As tblStaffsRowChangeEventHandler
        
        Public Event tblStaffsRowDeleting As tblStaffsRowChangeEventHandler
        
        Public Event tblStaffsRowDeleted As tblStaffsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblStaffsRow(ByVal row As tblStaffsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblStaffsRow(ByVal ID As System.Guid, ByVal Qualification As String, ByVal Age As Integer, ByVal Rank As String, ByVal Category As String, ByVal Male As Integer, ByVal Female As Integer, ByVal Disabled As Integer, ByVal Year As String, ByVal SourceID As String, ByVal bDeleted As Boolean, ByVal RowVersionID() As Byte, ByVal CreationDate As Long) As tblStaffsRow
            Dim rowtblStaffsRow As tblStaffsRow = CType(Me.NewRow,tblStaffsRow)
            Dim columnValuesArray() As Object = New Object() {ID, Qualification, Age, Rank, Category, Male, Female, Disabled, Year, SourceID, bDeleted, RowVersionID, CreationDate}
            rowtblStaffsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblStaffsRow)
            Return rowtblStaffsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As System.Guid) As tblStaffsRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblStaffsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblStaffsDataTable = CType(MyBase.Clone,tblStaffsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblStaffsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnQualification = MyBase.Columns("Qualification")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnRank = MyBase.Columns("Rank")
            Me.columnCategory = MyBase.Columns("Category")
            Me.columnMale = MyBase.Columns("Male")
            Me.columnFemale = MyBase.Columns("Female")
            Me.columnDisabled = MyBase.Columns("Disabled")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnQualification = New Global.System.Data.DataColumn("Qualification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQualification)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnRank = New Global.System.Data.DataColumn("Rank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRank)
            Me.columnCategory = New Global.System.Data.DataColumn("Category", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory)
            Me.columnMale = New Global.System.Data.DataColumn("Male", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMale)
            Me.columnFemale = New Global.System.Data.DataColumn("Female", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemale)
            Me.columnDisabled = New Global.System.Data.DataColumn("Disabled", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisabled)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnQualification.MaxLength = 50
            Me.columnRank.MaxLength = 50
            Me.columnCategory.MaxLength = 50
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 10
            Me.columnRowVersionID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblStaffsRow() As tblStaffsRow
            Return CType(Me.NewRow,tblStaffsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblStaffsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblStaffsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblStaffsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblStaffsRowChanged(Me, New tblStaffsRowChangeEvent(CType(e.Row,tblStaffsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblStaffsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblStaffsRowChanging(Me, New tblStaffsRowChangeEvent(CType(e.Row,tblStaffsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblStaffsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblStaffsRowDeleted(Me, New tblStaffsRowChangeEvent(CType(e.Row,tblStaffsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblStaffsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblStaffsRowDeleting(Me, New tblStaffsRowChangeEvent(CType(e.Row,tblStaffsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblStaffsRow(ByVal row As tblStaffsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblStaffsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblStaffsDetailedDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblStaffsDetailedRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnDateOfBirth As Global.System.Data.DataColumn
        
        Private columnFaculty As Global.System.Data.DataColumn
        
        Private columnAcademicQualifications As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnFieldOfSpecialization As Global.System.Data.DataColumn
        
        Private columnTermsOfEmployment As Global.System.Data.DataColumn
        
        Private columnNationality As Global.System.Data.DataColumn
        
        Private columnDisability As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnRoleInInstitution As Global.System.Data.DataColumn
        
        Private columnEmploymentStatus As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        Private columnDateOfFirstEmployment As Global.System.Data.DataColumn
        
        Private columnMainLevelTaught As Global.System.Data.DataColumn
        
        Private columnMainFieldTaught As Global.System.Data.DataColumn
        
        Private columnIsContactPerson As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnPhone As Global.System.Data.DataColumn
        
        Private columnPosition As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblStaffsDetailed"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateOfBirthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateOfBirth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacultyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFaculty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcademicQualificationsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcademicQualifications
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FieldOfSpecializationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldOfSpecialization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TermsOfEmploymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTermsOfEmployment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NationalityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNationality
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisabilityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisability
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RoleInInstitutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRoleInInstitution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmploymentStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmploymentStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateOfFirstEmploymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateOfFirstEmployment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MainLevelTaughtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMainLevelTaught
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MainFieldTaughtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMainFieldTaught
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsContactPersonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsContactPerson
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblStaffsDetailedRow
            Get
                Return CType(Me.Rows(index),tblStaffsDetailedRow)
            End Get
        End Property
        
        Public Event tblStaffsDetailedRowChanging As tblStaffsDetailedRowChangeEventHandler
        
        Public Event tblStaffsDetailedRowChanged As tblStaffsDetailedRowChangeEventHandler
        
        Public Event tblStaffsDetailedRowDeleting As tblStaffsDetailedRowChangeEventHandler
        
        Public Event tblStaffsDetailedRowDeleted As tblStaffsDetailedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblStaffsDetailedRow(ByVal row As tblStaffsDetailedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblStaffsDetailedRow( _
                    ByVal ID As System.Guid,  _
                    ByVal Name As String,  _
                    ByVal Sex As String,  _
                    ByVal DateOfBirth As Date,  _
                    ByVal Faculty As String,  _
                    ByVal AcademicQualifications As String,  _
                    ByVal Title As String,  _
                    ByVal FieldOfSpecialization As String,  _
                    ByVal TermsOfEmployment As String,  _
                    ByVal Nationality As String,  _
                    ByVal Disability As String,  _
                    ByVal Year As String,  _
                    ByVal SourceID As String,  _
                    ByVal bDeleted As Boolean,  _
                    ByVal RowVersionID() As Byte,  _
                    ByVal RoleInInstitution As String,  _
                    ByVal EmploymentStatus As String,  _
                    ByVal CreationDate As Long,  _
                    ByVal DateOfFirstEmployment As Date,  _
                    ByVal MainLevelTaught As String,  _
                    ByVal MainFieldTaught As String,  _
                    ByVal IsContactPerson As Boolean,  _
                    ByVal email As String,  _
                    ByVal Phone As String,  _
                    ByVal Position As String) As tblStaffsDetailedRow
            Dim rowtblStaffsDetailedRow As tblStaffsDetailedRow = CType(Me.NewRow,tblStaffsDetailedRow)
            Dim columnValuesArray() As Object = New Object() {ID, Name, Sex, DateOfBirth, Faculty, AcademicQualifications, Title, FieldOfSpecialization, TermsOfEmployment, Nationality, Disability, Year, SourceID, bDeleted, RowVersionID, RoleInInstitution, EmploymentStatus, CreationDate, DateOfFirstEmployment, MainLevelTaught, MainFieldTaught, IsContactPerson, email, Phone, Position}
            rowtblStaffsDetailedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblStaffsDetailedRow)
            Return rowtblStaffsDetailedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As System.Guid) As tblStaffsDetailedRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblStaffsDetailedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblStaffsDetailedDataTable = CType(MyBase.Clone,tblStaffsDetailedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblStaffsDetailedDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnDateOfBirth = MyBase.Columns("DateOfBirth")
            Me.columnFaculty = MyBase.Columns("Faculty")
            Me.columnAcademicQualifications = MyBase.Columns("AcademicQualifications")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnFieldOfSpecialization = MyBase.Columns("FieldOfSpecialization")
            Me.columnTermsOfEmployment = MyBase.Columns("TermsOfEmployment")
            Me.columnNationality = MyBase.Columns("Nationality")
            Me.columnDisability = MyBase.Columns("Disability")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnRoleInInstitution = MyBase.Columns("RoleInInstitution")
            Me.columnEmploymentStatus = MyBase.Columns("EmploymentStatus")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
            Me.columnDateOfFirstEmployment = MyBase.Columns("DateOfFirstEmployment")
            Me.columnMainLevelTaught = MyBase.Columns("MainLevelTaught")
            Me.columnMainFieldTaught = MyBase.Columns("MainFieldTaught")
            Me.columnIsContactPerson = MyBase.Columns("IsContactPerson")
            Me.columnemail = MyBase.Columns("email")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnPosition = MyBase.Columns("Position")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnDateOfBirth = New Global.System.Data.DataColumn("DateOfBirth", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateOfBirth)
            Me.columnFaculty = New Global.System.Data.DataColumn("Faculty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFaculty)
            Me.columnAcademicQualifications = New Global.System.Data.DataColumn("AcademicQualifications", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcademicQualifications)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnFieldOfSpecialization = New Global.System.Data.DataColumn("FieldOfSpecialization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldOfSpecialization)
            Me.columnTermsOfEmployment = New Global.System.Data.DataColumn("TermsOfEmployment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTermsOfEmployment)
            Me.columnNationality = New Global.System.Data.DataColumn("Nationality", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNationality)
            Me.columnDisability = New Global.System.Data.DataColumn("Disability", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisability)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnRoleInInstitution = New Global.System.Data.DataColumn("RoleInInstitution", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRoleInInstitution)
            Me.columnEmploymentStatus = New Global.System.Data.DataColumn("EmploymentStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmploymentStatus)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.columnDateOfFirstEmployment = New Global.System.Data.DataColumn("DateOfFirstEmployment", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateOfFirstEmployment)
            Me.columnMainLevelTaught = New Global.System.Data.DataColumn("MainLevelTaught", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMainLevelTaught)
            Me.columnMainFieldTaught = New Global.System.Data.DataColumn("MainFieldTaught", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMainFieldTaught)
            Me.columnIsContactPerson = New Global.System.Data.DataColumn("IsContactPerson", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsContactPerson)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnPosition = New Global.System.Data.DataColumn("Position", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosition)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnName.MaxLength = 255
            Me.columnSex.MaxLength = 255
            Me.columnFaculty.MaxLength = 255
            Me.columnAcademicQualifications.MaxLength = 255
            Me.columnTitle.MaxLength = 255
            Me.columnFieldOfSpecialization.MaxLength = 255
            Me.columnTermsOfEmployment.MaxLength = 255
            Me.columnNationality.MaxLength = 255
            Me.columnDisability.MaxLength = 255
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 10
            Me.columnRowVersionID.ReadOnly = true
            Me.columnRoleInInstitution.MaxLength = 50
            Me.columnEmploymentStatus.MaxLength = 50
            Me.columnMainLevelTaught.MaxLength = 50
            Me.columnMainFieldTaught.MaxLength = 50
            Me.columnemail.MaxLength = 20
            Me.columnPhone.MaxLength = 20
            Me.columnPosition.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblStaffsDetailedRow() As tblStaffsDetailedRow
            Return CType(Me.NewRow,tblStaffsDetailedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblStaffsDetailedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblStaffsDetailedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblStaffsDetailedRowChangedEvent) Is Nothing) Then
                RaiseEvent tblStaffsDetailedRowChanged(Me, New tblStaffsDetailedRowChangeEvent(CType(e.Row,tblStaffsDetailedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblStaffsDetailedRowChangingEvent) Is Nothing) Then
                RaiseEvent tblStaffsDetailedRowChanging(Me, New tblStaffsDetailedRowChangeEvent(CType(e.Row,tblStaffsDetailedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblStaffsDetailedRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblStaffsDetailedRowDeleted(Me, New tblStaffsDetailedRowChangeEvent(CType(e.Row,tblStaffsDetailedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblStaffsDetailedRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblStaffsDetailedRowDeleting(Me, New tblStaffsDetailedRowChangeEvent(CType(e.Row,tblStaffsDetailedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblStaffsDetailedRow(ByVal row As tblStaffsDetailedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblStaffsDetailedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblStudentsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblStudentsRow)
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnOtherNames As Global.System.Data.DataColumn
        
        Private columnBirthDate As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnTribe As Global.System.Data.DataColumn
        
        Private columnNationality As Global.System.Data.DataColumn
        
        Private columnContactAddress As Global.System.Data.DataColumn
        
        Private columnPhysicalAddress As Global.System.Data.DataColumn
        
        Private columnTelephone As Global.System.Data.DataColumn
        
        Private columnFax As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnDisability As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnComment As Global.System.Data.DataColumn
        
        Private columnPicture As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnAwardPreparedCode As Global.System.Data.DataColumn
        
        Private columnFieldOfSpecialization As Global.System.Data.DataColumn
        
        Private columnYearOfStudy As Global.System.Data.DataColumn
        
        Private columnRepeater As Global.System.Data.DataColumn
        
        Private columnEntryQualification As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnIsBoarding As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblStudents"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherNamesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtherNames
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BirthDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBirthDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TribeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTribe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NationalityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNationality
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhysicalAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhysicalAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelephoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelephone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisabilityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisability
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PictureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPicture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AwardPreparedCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAwardPreparedCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FieldOfSpecializationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldOfSpecialization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearOfStudyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearOfStudy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RepeaterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRepeater
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntryQualificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntryQualification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsBoardingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsBoarding
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblStudentsRow
            Get
                Return CType(Me.Rows(index),tblStudentsRow)
            End Get
        End Property
        
        Public Event tblStudentsRowChanging As tblStudentsRowChangeEventHandler
        
        Public Event tblStudentsRowChanged As tblStudentsRowChangeEventHandler
        
        Public Event tblStudentsRowDeleting As tblStudentsRowChangeEventHandler
        
        Public Event tblStudentsRowDeleted As tblStudentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblStudentsRow(ByVal row As tblStudentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblStudentsRow( _
                    ByVal StudentID As String,  _
                    ByVal FirstName As String,  _
                    ByVal OtherNames As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal Gender As String,  _
                    ByVal Tribe As String,  _
                    ByVal Nationality As String,  _
                    ByVal ContactAddress As String,  _
                    ByVal PhysicalAddress As String,  _
                    ByVal Telephone As String,  _
                    ByVal Fax As String,  _
                    ByVal Email As String,  _
                    ByVal Disability As String,  _
                    ByVal Status As String,  _
                    ByVal Comment As String,  _
                    ByVal Picture As String,  _
                    ByVal Year As String,  _
                    ByVal SourceID As String,  _
                    ByVal bDeleted As Boolean,  _
                    ByVal RowVersionID() As Byte,  _
                    ByVal AwardPreparedCode As String,  _
                    ByVal FieldOfSpecialization As String,  _
                    ByVal YearOfStudy As String,  _
                    ByVal Repeater As Boolean,  _
                    ByVal EntryQualification As String,  _
                    ByVal CreationDate As Long,  _
                    ByVal ID As System.Guid,  _
                    ByVal IsBoarding As Boolean) As tblStudentsRow
            Dim rowtblStudentsRow As tblStudentsRow = CType(Me.NewRow,tblStudentsRow)
            Dim columnValuesArray() As Object = New Object() {StudentID, FirstName, OtherNames, BirthDate, Gender, Tribe, Nationality, ContactAddress, PhysicalAddress, Telephone, Fax, Email, Disability, Status, Comment, Picture, Year, SourceID, bDeleted, RowVersionID, AwardPreparedCode, FieldOfSpecialization, YearOfStudy, Repeater, EntryQualification, CreationDate, ID, IsBoarding}
            rowtblStudentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblStudentsRow)
            Return rowtblStudentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As System.Guid) As tblStudentsRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblStudentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblStudentsDataTable = CType(MyBase.Clone,tblStudentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblStudentsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnOtherNames = MyBase.Columns("OtherNames")
            Me.columnBirthDate = MyBase.Columns("BirthDate")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnTribe = MyBase.Columns("Tribe")
            Me.columnNationality = MyBase.Columns("Nationality")
            Me.columnContactAddress = MyBase.Columns("ContactAddress")
            Me.columnPhysicalAddress = MyBase.Columns("PhysicalAddress")
            Me.columnTelephone = MyBase.Columns("Telephone")
            Me.columnFax = MyBase.Columns("Fax")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnDisability = MyBase.Columns("Disability")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnComment = MyBase.Columns("Comment")
            Me.columnPicture = MyBase.Columns("Picture")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnAwardPreparedCode = MyBase.Columns("AwardPreparedCode")
            Me.columnFieldOfSpecialization = MyBase.Columns("FieldOfSpecialization")
            Me.columnYearOfStudy = MyBase.Columns("YearOfStudy")
            Me.columnRepeater = MyBase.Columns("Repeater")
            Me.columnEntryQualification = MyBase.Columns("EntryQualification")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
            Me.columnID = MyBase.Columns("ID")
            Me.columnIsBoarding = MyBase.Columns("IsBoarding")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnOtherNames = New Global.System.Data.DataColumn("OtherNames", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtherNames)
            Me.columnBirthDate = New Global.System.Data.DataColumn("BirthDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBirthDate)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnTribe = New Global.System.Data.DataColumn("Tribe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTribe)
            Me.columnNationality = New Global.System.Data.DataColumn("Nationality", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNationality)
            Me.columnContactAddress = New Global.System.Data.DataColumn("ContactAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactAddress)
            Me.columnPhysicalAddress = New Global.System.Data.DataColumn("PhysicalAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhysicalAddress)
            Me.columnTelephone = New Global.System.Data.DataColumn("Telephone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelephone)
            Me.columnFax = New Global.System.Data.DataColumn("Fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFax)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnDisability = New Global.System.Data.DataColumn("Disability", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisability)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnComment = New Global.System.Data.DataColumn("Comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComment)
            Me.columnPicture = New Global.System.Data.DataColumn("Picture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPicture)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnAwardPreparedCode = New Global.System.Data.DataColumn("AwardPreparedCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAwardPreparedCode)
            Me.columnFieldOfSpecialization = New Global.System.Data.DataColumn("FieldOfSpecialization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldOfSpecialization)
            Me.columnYearOfStudy = New Global.System.Data.DataColumn("YearOfStudy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearOfStudy)
            Me.columnRepeater = New Global.System.Data.DataColumn("Repeater", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRepeater)
            Me.columnEntryQualification = New Global.System.Data.DataColumn("EntryQualification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntryQualification)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnIsBoarding = New Global.System.Data.DataColumn("IsBoarding", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsBoarding)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnStudentID.MaxLength = 25
            Me.columnFirstName.MaxLength = 50
            Me.columnOtherNames.MaxLength = 50
            Me.columnGender.MaxLength = 1
            Me.columnTribe.MaxLength = 20
            Me.columnNationality.MaxLength = 50
            Me.columnContactAddress.MaxLength = 50
            Me.columnPhysicalAddress.MaxLength = 50
            Me.columnTelephone.MaxLength = 25
            Me.columnFax.MaxLength = 25
            Me.columnEmail.MaxLength = 50
            Me.columnDisability.MaxLength = 50
            Me.columnStatus.MaxLength = 50
            Me.columnComment.MaxLength = 100
            Me.columnPicture.MaxLength = 2147483647
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 10
            Me.columnRowVersionID.ReadOnly = true
            Me.columnAwardPreparedCode.MaxLength = 10
            Me.columnFieldOfSpecialization.MaxLength = 10
            Me.columnYearOfStudy.MaxLength = 50
            Me.columnEntryQualification.MaxLength = 10
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblStudentsRow() As tblStudentsRow
            Return CType(Me.NewRow,tblStudentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblStudentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblStudentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblStudentsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblStudentsRowChanged(Me, New tblStudentsRowChangeEvent(CType(e.Row,tblStudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblStudentsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblStudentsRowChanging(Me, New tblStudentsRowChangeEvent(CType(e.Row,tblStudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblStudentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblStudentsRowDeleted(Me, New tblStudentsRowChangeEvent(CType(e.Row,tblStudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblStudentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblStudentsRowDeleting(Me, New tblStudentsRowChangeEvent(CType(e.Row,tblStudentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblStudentsRow(ByVal row As tblStudentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblStudentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblUserGroupDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblUserGroupRow)
        
        Private columnUserName As Global.System.Data.DataColumn
        
        Private columnGroupID As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblUserGroup"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblUserGroupRow
            Get
                Return CType(Me.Rows(index),tblUserGroupRow)
            End Get
        End Property
        
        Public Event tblUserGroupRowChanging As tblUserGroupRowChangeEventHandler
        
        Public Event tblUserGroupRowChanged As tblUserGroupRowChangeEventHandler
        
        Public Event tblUserGroupRowDeleting As tblUserGroupRowChangeEventHandler
        
        Public Event tblUserGroupRowDeleted As tblUserGroupRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblUserGroupRow(ByVal row As tblUserGroupRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblUserGroupRow(ByVal parenttblUsersRowByFK_UserGroup_Users As tblUsersRow, ByVal parenttblGroupsRowByFK_UserGroup_Groups As tblGroupsRow, ByVal Year As String, ByVal SourceID As String, ByVal bDeleted As Boolean, ByVal RowVersionID() As Byte) As tblUserGroupRow
            Dim rowtblUserGroupRow As tblUserGroupRow = CType(Me.NewRow,tblUserGroupRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Year, SourceID, bDeleted, RowVersionID}
            If (Not (parenttblUsersRowByFK_UserGroup_Users) Is Nothing) Then
                columnValuesArray(0) = parenttblUsersRowByFK_UserGroup_Users(0)
            End If
            If (Not (parenttblGroupsRowByFK_UserGroup_Groups) Is Nothing) Then
                columnValuesArray(1) = parenttblGroupsRowByFK_UserGroup_Groups(0)
            End If
            rowtblUserGroupRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblUserGroupRow)
            Return rowtblUserGroupRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUserNameGroupID(ByVal UserName As String, ByVal GroupID As String) As tblUserGroupRow
            Return CType(Me.Rows.Find(New Object() {UserName, GroupID}),tblUserGroupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblUserGroupDataTable = CType(MyBase.Clone,tblUserGroupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblUserGroupDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUserName = MyBase.Columns("UserName")
            Me.columnGroupID = MyBase.Columns("GroupID")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUserName = New Global.System.Data.DataColumn("UserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserName)
            Me.columnGroupID = New Global.System.Data.DataColumn("GroupID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupID)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUserName, Me.columnGroupID}, true))
            Me.columnUserName.AllowDBNull = false
            Me.columnUserName.MaxLength = 50
            Me.columnGroupID.AllowDBNull = false
            Me.columnGroupID.MaxLength = 50
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 10
            Me.columnRowVersionID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblUserGroupRow() As tblUserGroupRow
            Return CType(Me.NewRow,tblUserGroupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblUserGroupRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblUserGroupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblUserGroupRowChangedEvent) Is Nothing) Then
                RaiseEvent tblUserGroupRowChanged(Me, New tblUserGroupRowChangeEvent(CType(e.Row,tblUserGroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblUserGroupRowChangingEvent) Is Nothing) Then
                RaiseEvent tblUserGroupRowChanging(Me, New tblUserGroupRowChangeEvent(CType(e.Row,tblUserGroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblUserGroupRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblUserGroupRowDeleted(Me, New tblUserGroupRowChangeEvent(CType(e.Row,tblUserGroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblUserGroupRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblUserGroupRowDeleting(Me, New tblUserGroupRowChangeEvent(CType(e.Row,tblUserGroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblUserGroupRow(ByVal row As tblUserGroupRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblUserGroupDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblUsersDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblUsersRow)
        
        Private columnUserName As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblUsers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblUsersRow
            Get
                Return CType(Me.Rows(index),tblUsersRow)
            End Get
        End Property
        
        Public Event tblUsersRowChanging As tblUsersRowChangeEventHandler
        
        Public Event tblUsersRowChanged As tblUsersRowChangeEventHandler
        
        Public Event tblUsersRowDeleting As tblUsersRowChangeEventHandler
        
        Public Event tblUsersRowDeleted As tblUsersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblUsersRow(ByVal row As tblUsersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblUsersRow(ByVal UserName As String, ByVal Password() As Byte, ByVal Year As String, ByVal SourceID As String, ByVal bDeleted As Boolean, ByVal RowVersionID() As Byte) As tblUsersRow
            Dim rowtblUsersRow As tblUsersRow = CType(Me.NewRow,tblUsersRow)
            Dim columnValuesArray() As Object = New Object() {UserName, Password, Year, SourceID, bDeleted, RowVersionID}
            rowtblUsersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblUsersRow)
            Return rowtblUsersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUserName(ByVal UserName As String) As tblUsersRow
            Return CType(Me.Rows.Find(New Object() {UserName}),tblUsersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblUsersDataTable = CType(MyBase.Clone,tblUsersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblUsersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUserName = MyBase.Columns("UserName")
            Me.columnPassword = MyBase.Columns("Password")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUserName = New Global.System.Data.DataColumn("UserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserName)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUserName}, true))
            Me.columnUserName.AllowDBNull = false
            Me.columnUserName.Unique = true
            Me.columnUserName.MaxLength = 50
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 10
            Me.columnRowVersionID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblUsersRow() As tblUsersRow
            Return CType(Me.NewRow,tblUsersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblUsersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblUsersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblUsersRowChangedEvent) Is Nothing) Then
                RaiseEvent tblUsersRowChanged(Me, New tblUsersRowChangeEvent(CType(e.Row,tblUsersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblUsersRowChangingEvent) Is Nothing) Then
                RaiseEvent tblUsersRowChanging(Me, New tblUsersRowChangeEvent(CType(e.Row,tblUsersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblUsersRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblUsersRowDeleted(Me, New tblUsersRowChangeEvent(CType(e.Row,tblUsersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblUsersRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblUsersRowDeleting(Me, New tblUsersRowChangeEvent(CType(e.Row,tblUsersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblUsersRow(ByVal row As tblUsersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblUsersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblAppVersionControlDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblAppVersionControlRow)
        
        Private columnBEVersion As Global.System.Data.DataColumn
        
        Private columnCLPatchVersion As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnLastRowVersion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblAppVersionControl"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BEVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBEVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLPatchVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLPatchVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastRowVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastRowVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblAppVersionControlRow
            Get
                Return CType(Me.Rows(index),tblAppVersionControlRow)
            End Get
        End Property
        
        Public Event tblAppVersionControlRowChanging As tblAppVersionControlRowChangeEventHandler
        
        Public Event tblAppVersionControlRowChanged As tblAppVersionControlRowChangeEventHandler
        
        Public Event tblAppVersionControlRowDeleting As tblAppVersionControlRowChangeEventHandler
        
        Public Event tblAppVersionControlRowDeleted As tblAppVersionControlRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblAppVersionControlRow(ByVal row As tblAppVersionControlRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblAppVersionControlRow(ByVal BEVersion As Short, ByVal CLPatchVersion As Short, ByVal RowVersionID() As Byte, ByVal LastRowVersion As Long) As tblAppVersionControlRow
            Dim rowtblAppVersionControlRow As tblAppVersionControlRow = CType(Me.NewRow,tblAppVersionControlRow)
            Dim columnValuesArray() As Object = New Object() {BEVersion, CLPatchVersion, RowVersionID, LastRowVersion}
            rowtblAppVersionControlRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblAppVersionControlRow)
            Return rowtblAppVersionControlRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByBEVersion(ByVal BEVersion As Short) As tblAppVersionControlRow
            Return CType(Me.Rows.Find(New Object() {BEVersion}),tblAppVersionControlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblAppVersionControlDataTable = CType(MyBase.Clone,tblAppVersionControlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblAppVersionControlDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBEVersion = MyBase.Columns("BEVersion")
            Me.columnCLPatchVersion = MyBase.Columns("CLPatchVersion")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnLastRowVersion = MyBase.Columns("LastRowVersion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBEVersion = New Global.System.Data.DataColumn("BEVersion", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBEVersion)
            Me.columnCLPatchVersion = New Global.System.Data.DataColumn("CLPatchVersion", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLPatchVersion)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnLastRowVersion = New Global.System.Data.DataColumn("LastRowVersion", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastRowVersion)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnBEVersion}, true))
            Me.columnBEVersion.AllowDBNull = false
            Me.columnBEVersion.Unique = true
            Me.columnRowVersionID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblAppVersionControlRow() As tblAppVersionControlRow
            Return CType(Me.NewRow,tblAppVersionControlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblAppVersionControlRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblAppVersionControlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblAppVersionControlRowChangedEvent) Is Nothing) Then
                RaiseEvent tblAppVersionControlRowChanged(Me, New tblAppVersionControlRowChangeEvent(CType(e.Row,tblAppVersionControlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblAppVersionControlRowChangingEvent) Is Nothing) Then
                RaiseEvent tblAppVersionControlRowChanging(Me, New tblAppVersionControlRowChangeEvent(CType(e.Row,tblAppVersionControlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblAppVersionControlRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblAppVersionControlRowDeleted(Me, New tblAppVersionControlRowChangeEvent(CType(e.Row,tblAppVersionControlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblAppVersionControlRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblAppVersionControlRowDeleting(Me, New tblAppVersionControlRowChangeEvent(CType(e.Row,tblAppVersionControlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblAppVersionControlRow(ByVal row As tblAppVersionControlRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblAppVersionControlDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblSponsorShipDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblSponsorShipRow)
        
        Private columnStudentID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnOtherNames As Global.System.Data.DataColumn
        
        Private columnSemester As Global.System.Data.DataColumn
        
        Private columnSelf As Global.System.Data.DataColumn
        
        Private columnLoanBoard As Global.System.Data.DataColumn
        
        Private columnInstitution As Global.System.Data.DataColumn
        
        Private columnOther As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSourceID As Global.System.Data.DataColumn
        
        Private columnbDeleted As Global.System.Data.DataColumn
        
        Private columnRowVersionID As Global.System.Data.DataColumn
        
        Private columnCreationDate As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblSponsorShip"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherNamesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtherNames
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemesterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSemester
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoanBoardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLoanBoard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InstitutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInstitution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OtherColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOther
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bDeletedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbDeleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RowVersionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowVersionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblSponsorShipRow
            Get
                Return CType(Me.Rows(index),tblSponsorShipRow)
            End Get
        End Property
        
        Public Event tblSponsorShipRowChanging As tblSponsorShipRowChangeEventHandler
        
        Public Event tblSponsorShipRowChanged As tblSponsorShipRowChangeEventHandler
        
        Public Event tblSponsorShipRowDeleting As tblSponsorShipRowChangeEventHandler
        
        Public Event tblSponsorShipRowDeleted As tblSponsorShipRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblSponsorShipRow(ByVal row As tblSponsorShipRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblSponsorShipRow(ByVal StudentID As String, ByVal FirstName As String, ByVal OtherNames As String, ByVal Semester As String, ByVal Self As Double, ByVal LoanBoard As Double, ByVal Institution As Double, ByVal Other As Double, ByVal Year As String, ByVal SourceID As String, ByVal bDeleted As Boolean, ByVal RowVersionID() As Byte, ByVal CreationDate As Long, ByVal ID As System.Guid) As tblSponsorShipRow
            Dim rowtblSponsorShipRow As tblSponsorShipRow = CType(Me.NewRow,tblSponsorShipRow)
            Dim columnValuesArray() As Object = New Object() {StudentID, FirstName, OtherNames, Semester, Self, LoanBoard, Institution, Other, Year, SourceID, bDeleted, RowVersionID, CreationDate, ID}
            rowtblSponsorShipRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblSponsorShipRow)
            Return rowtblSponsorShipRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As System.Guid) As tblSponsorShipRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblSponsorShipRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblSponsorShipDataTable = CType(MyBase.Clone,tblSponsorShipDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblSponsorShipDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudentID = MyBase.Columns("StudentID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnOtherNames = MyBase.Columns("OtherNames")
            Me.columnSemester = MyBase.Columns("Semester")
            Me.columnSelf = MyBase.Columns("Self")
            Me.columnLoanBoard = MyBase.Columns("LoanBoard")
            Me.columnInstitution = MyBase.Columns("Institution")
            Me.columnOther = MyBase.Columns("Other")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSourceID = MyBase.Columns("SourceID")
            Me.columnbDeleted = MyBase.Columns("bDeleted")
            Me.columnRowVersionID = MyBase.Columns("RowVersionID")
            Me.columnCreationDate = MyBase.Columns("CreationDate")
            Me.columnID = MyBase.Columns("ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudentID = New Global.System.Data.DataColumn("StudentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnOtherNames = New Global.System.Data.DataColumn("OtherNames", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtherNames)
            Me.columnSemester = New Global.System.Data.DataColumn("Semester", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemester)
            Me.columnSelf = New Global.System.Data.DataColumn("Self", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelf)
            Me.columnLoanBoard = New Global.System.Data.DataColumn("LoanBoard", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLoanBoard)
            Me.columnInstitution = New Global.System.Data.DataColumn("Institution", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInstitution)
            Me.columnOther = New Global.System.Data.DataColumn("Other", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOther)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSourceID = New Global.System.Data.DataColumn("SourceID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceID)
            Me.columnbDeleted = New Global.System.Data.DataColumn("bDeleted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbDeleted)
            Me.columnRowVersionID = New Global.System.Data.DataColumn("RowVersionID", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowVersionID)
            Me.columnCreationDate = New Global.System.Data.DataColumn("CreationDate", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreationDate)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnStudentID.MaxLength = 25
            Me.columnFirstName.MaxLength = 50
            Me.columnOtherNames.MaxLength = 50
            Me.columnSemester.MaxLength = 25
            Me.columnYear.MaxLength = 9
            Me.columnSourceID.MaxLength = 10
            Me.columnRowVersionID.ReadOnly = true
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblSponsorShipRow() As tblSponsorShipRow
            Return CType(Me.NewRow,tblSponsorShipRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblSponsorShipRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblSponsorShipRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblSponsorShipRowChangedEvent) Is Nothing) Then
                RaiseEvent tblSponsorShipRowChanged(Me, New tblSponsorShipRowChangeEvent(CType(e.Row,tblSponsorShipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblSponsorShipRowChangingEvent) Is Nothing) Then
                RaiseEvent tblSponsorShipRowChanging(Me, New tblSponsorShipRowChangeEvent(CType(e.Row,tblSponsorShipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblSponsorShipRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblSponsorShipRowDeleted(Me, New tblSponsorShipRowChangeEvent(CType(e.Row,tblSponsorShipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblSponsorShipRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblSponsorShipRowDeleting(Me, New tblSponsorShipRowChangeEvent(CType(e.Row,tblSponsorShipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblSponsorShipRow(ByVal row As tblSponsorShipRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblSponsorShipDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblFormDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblFormRow)
        
        Private columnFormID As Global.System.Data.DataColumn
        
        Private columnMinistry As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnCode As Global.System.Data.DataColumn
        
        Private columnShortDetail As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblForm"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinistryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinistry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShortDetailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShortDetail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblFormRow
            Get
                Return CType(Me.Rows(index),tblFormRow)
            End Get
        End Property
        
        Public Event tblFormRowChanging As tblFormRowChangeEventHandler
        
        Public Event tblFormRowChanged As tblFormRowChangeEventHandler
        
        Public Event tblFormRowDeleting As tblFormRowChangeEventHandler
        
        Public Event tblFormRowDeleted As tblFormRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblFormRow(ByVal row As tblFormRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblFormRow(ByVal Ministry As String, ByVal Description As String, ByVal Title As String, ByVal Code As String, ByVal ShortDetail As String) As tblFormRow
            Dim rowtblFormRow As tblFormRow = CType(Me.NewRow,tblFormRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Ministry, Description, Title, Code, ShortDetail}
            rowtblFormRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblFormRow)
            Return rowtblFormRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFormID(ByVal FormID As Integer) As tblFormRow
            Return CType(Me.Rows.Find(New Object() {FormID}),tblFormRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblFormDataTable = CType(MyBase.Clone,tblFormDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblFormDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFormID = MyBase.Columns("FormID")
            Me.columnMinistry = MyBase.Columns("Ministry")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnCode = MyBase.Columns("Code")
            Me.columnShortDetail = MyBase.Columns("ShortDetail")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFormID = New Global.System.Data.DataColumn("FormID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormID)
            Me.columnMinistry = New Global.System.Data.DataColumn("Ministry", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinistry)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnCode = New Global.System.Data.DataColumn("Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCode)
            Me.columnShortDetail = New Global.System.Data.DataColumn("ShortDetail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShortDetail)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFormID}, true))
            Me.columnFormID.AutoIncrement = true
            Me.columnFormID.AutoIncrementSeed = -1
            Me.columnFormID.AutoIncrementStep = -1
            Me.columnFormID.AllowDBNull = false
            Me.columnFormID.ReadOnly = true
            Me.columnFormID.Unique = true
            Me.columnMinistry.MaxLength = 500
            Me.columnDescription.MaxLength = 1500
            Me.columnTitle.MaxLength = 100
            Me.columnCode.MaxLength = 10
            Me.columnShortDetail.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblFormRow() As tblFormRow
            Return CType(Me.NewRow,tblFormRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblFormRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblFormRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblFormRowChangedEvent) Is Nothing) Then
                RaiseEvent tblFormRowChanged(Me, New tblFormRowChangeEvent(CType(e.Row,tblFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblFormRowChangingEvent) Is Nothing) Then
                RaiseEvent tblFormRowChanging(Me, New tblFormRowChangeEvent(CType(e.Row,tblFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblFormRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblFormRowDeleted(Me, New tblFormRowChangeEvent(CType(e.Row,tblFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblFormRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblFormRowDeleting(Me, New tblFormRowChangeEvent(CType(e.Row,tblFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblFormRow(ByVal row As tblFormRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblFormDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblFormDetailsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblFormDetailsRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnFormID As Global.System.Data.DataColumn
        
        Private columnDesignation As Global.System.Data.DataColumn
        
        Private columnPivot_M1 As Global.System.Data.DataColumn
        
        Private columnPivot_F1 As Global.System.Data.DataColumn
        
        Private columnPivot_M2 As Global.System.Data.DataColumn
        
        Private columnPivot_F2 As Global.System.Data.DataColumn
        
        Private columnPivot_M3 As Global.System.Data.DataColumn
        
        Private columnPivot_F3 As Global.System.Data.DataColumn
        
        Private columnPivot_M4 As Global.System.Data.DataColumn
        
        Private columnPivot_F4 As Global.System.Data.DataColumn
        
        Private columnPivot_M5 As Global.System.Data.DataColumn
        
        Private columnPivot_F5 As Global.System.Data.DataColumn
        
        Private columnPivot_M6 As Global.System.Data.DataColumn
        
        Private columnPivot_F6 As Global.System.Data.DataColumn
        
        Private columnPivot_M7 As Global.System.Data.DataColumn
        
        Private columnPivot_F7 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblFormDetails"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DesignationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesignation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_M1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_M1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_F1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_F1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_M2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_M2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_F2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_F2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_M3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_M3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_F3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_F3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_M4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_M4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_F4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_F4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_M5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_M5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_F5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_F5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_M6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_M6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_F6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_F6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_M7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_M7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pivot_F7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPivot_F7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblFormDetailsRow
            Get
                Return CType(Me.Rows(index),tblFormDetailsRow)
            End Get
        End Property
        
        Public Event tblFormDetailsRowChanging As tblFormDetailsRowChangeEventHandler
        
        Public Event tblFormDetailsRowChanged As tblFormDetailsRowChangeEventHandler
        
        Public Event tblFormDetailsRowDeleting As tblFormDetailsRowChangeEventHandler
        
        Public Event tblFormDetailsRowDeleted As tblFormDetailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblFormDetailsRow(ByVal row As tblFormDetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblFormDetailsRow( _
                    ByVal parenttblFormRowByFK_tblFormDetails_tblForm As tblFormRow,  _
                    ByVal Designation As String,  _
                    ByVal Pivot_M1 As Integer,  _
                    ByVal Pivot_F1 As Integer,  _
                    ByVal Pivot_M2 As Integer,  _
                    ByVal Pivot_F2 As Integer,  _
                    ByVal Pivot_M3 As Integer,  _
                    ByVal Pivot_F3 As Integer,  _
                    ByVal Pivot_M4 As Integer,  _
                    ByVal Pivot_F4 As Integer,  _
                    ByVal Pivot_M5 As Integer,  _
                    ByVal Pivot_F5 As Integer,  _
                    ByVal Pivot_M6 As Integer,  _
                    ByVal Pivot_F6 As Integer,  _
                    ByVal Pivot_M7 As Integer,  _
                    ByVal Pivot_F7 As Integer) As tblFormDetailsRow
            Dim rowtblFormDetailsRow As tblFormDetailsRow = CType(Me.NewRow,tblFormDetailsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Designation, Pivot_M1, Pivot_F1, Pivot_M2, Pivot_F2, Pivot_M3, Pivot_F3, Pivot_M4, Pivot_F4, Pivot_M5, Pivot_F5, Pivot_M6, Pivot_F6, Pivot_M7, Pivot_F7}
            If (Not (parenttblFormRowByFK_tblFormDetails_tblForm) Is Nothing) Then
                columnValuesArray(1) = parenttblFormRowByFK_tblFormDetails_tblForm(0)
            End If
            rowtblFormDetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblFormDetailsRow)
            Return rowtblFormDetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As tblFormDetailsRow
            Return CType(Me.Rows.Find(New Object() {ID}),tblFormDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblFormDetailsDataTable = CType(MyBase.Clone,tblFormDetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblFormDetailsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnFormID = MyBase.Columns("FormID")
            Me.columnDesignation = MyBase.Columns("Designation")
            Me.columnPivot_M1 = MyBase.Columns("Pivot_M1")
            Me.columnPivot_F1 = MyBase.Columns("Pivot_F1")
            Me.columnPivot_M2 = MyBase.Columns("Pivot_M2")
            Me.columnPivot_F2 = MyBase.Columns("Pivot_F2")
            Me.columnPivot_M3 = MyBase.Columns("Pivot_M3")
            Me.columnPivot_F3 = MyBase.Columns("Pivot_F3")
            Me.columnPivot_M4 = MyBase.Columns("Pivot_M4")
            Me.columnPivot_F4 = MyBase.Columns("Pivot_F4")
            Me.columnPivot_M5 = MyBase.Columns("Pivot_M5")
            Me.columnPivot_F5 = MyBase.Columns("Pivot_F5")
            Me.columnPivot_M6 = MyBase.Columns("Pivot_M6")
            Me.columnPivot_F6 = MyBase.Columns("Pivot_F6")
            Me.columnPivot_M7 = MyBase.Columns("Pivot_M7")
            Me.columnPivot_F7 = MyBase.Columns("Pivot_F7")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnFormID = New Global.System.Data.DataColumn("FormID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormID)
            Me.columnDesignation = New Global.System.Data.DataColumn("Designation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesignation)
            Me.columnPivot_M1 = New Global.System.Data.DataColumn("Pivot_M1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_M1)
            Me.columnPivot_F1 = New Global.System.Data.DataColumn("Pivot_F1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_F1)
            Me.columnPivot_M2 = New Global.System.Data.DataColumn("Pivot_M2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_M2)
            Me.columnPivot_F2 = New Global.System.Data.DataColumn("Pivot_F2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_F2)
            Me.columnPivot_M3 = New Global.System.Data.DataColumn("Pivot_M3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_M3)
            Me.columnPivot_F3 = New Global.System.Data.DataColumn("Pivot_F3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_F3)
            Me.columnPivot_M4 = New Global.System.Data.DataColumn("Pivot_M4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_M4)
            Me.columnPivot_F4 = New Global.System.Data.DataColumn("Pivot_F4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_F4)
            Me.columnPivot_M5 = New Global.System.Data.DataColumn("Pivot_M5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_M5)
            Me.columnPivot_F5 = New Global.System.Data.DataColumn("Pivot_F5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_F5)
            Me.columnPivot_M6 = New Global.System.Data.DataColumn("Pivot_M6", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_M6)
            Me.columnPivot_F6 = New Global.System.Data.DataColumn("Pivot_F6", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_F6)
            Me.columnPivot_M7 = New Global.System.Data.DataColumn("Pivot_M7", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_M7)
            Me.columnPivot_F7 = New Global.System.Data.DataColumn("Pivot_F7", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPivot_F7)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignation.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblFormDetailsRow() As tblFormDetailsRow
            Return CType(Me.NewRow,tblFormDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblFormDetailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblFormDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblFormDetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblFormDetailsRowChanged(Me, New tblFormDetailsRowChangeEvent(CType(e.Row,tblFormDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblFormDetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblFormDetailsRowChanging(Me, New tblFormDetailsRowChangeEvent(CType(e.Row,tblFormDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblFormDetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblFormDetailsRowDeleted(Me, New tblFormDetailsRowChangeEvent(CType(e.Row,tblFormDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblFormDetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblFormDetailsRowDeleting(Me, New tblFormDetailsRowChangeEvent(CType(e.Row,tblFormDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblFormDetailsRow(ByVal row As tblFormDetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As HEMISDataSet = New HEMISDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblFormDetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblAcademicYearsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblAcademicYears As tblAcademicYearsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblAcademicYears = CType(Me.Table,tblAcademicYearsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcademicYear() As String
            Get
                Return CType(Me(Me.tabletblAcademicYears.AcademicYearColumn),String)
            End Get
            Set
                Me(Me.tabletblAcademicYears.AcademicYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartDate() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAcademicYears.StartDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartDate' in table 'tblAcademicYears' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAcademicYears.StartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndDate() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAcademicYears.EndDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EndDate' in table 'tblAcademicYears' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAcademicYears.EndDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OpenYear() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblAcademicYears.OpenYearColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OpenYear' in table 'tblAcademicYears' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAcademicYears.OpenYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrentYear() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblAcademicYears.CurrentYearColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrentYear' in table 'tblAcademicYears' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAcademicYears.CurrentYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAcademicYears.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblAcademicYears' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAcademicYears.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAcademicYears.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblAcademicYears' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAcademicYears.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblAcademicYears.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblAcademicYears' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAcademicYears.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblAcademicYears.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblAcademicYears' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAcademicYears.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tabletblAcademicYears.StartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStartDateNull()
            Me(Me.tabletblAcademicYears.StartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tabletblAcademicYears.EndDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndDateNull()
            Me(Me.tabletblAcademicYears.EndDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOpenYearNull() As Boolean
            Return Me.IsNull(Me.tabletblAcademicYears.OpenYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOpenYearNull()
            Me(Me.tabletblAcademicYears.OpenYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrentYearNull() As Boolean
            Return Me.IsNull(Me.tabletblAcademicYears.CurrentYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrentYearNull()
            Me(Me.tabletblAcademicYears.CurrentYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblAcademicYears.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblAcademicYears.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblAcademicYears.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblAcademicYears.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblAcademicYears.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblAcademicYears.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblAcademicYears.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblAcademicYears.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblAppColumnsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblAppColumns As tblAppColumnsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblAppColumns = CType(Me.Table,tblAppColumnsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As System.Guid
            Get
                Return CType(Me(Me.tabletblAppColumns.IDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblAppColumns.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.ColumnNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnName' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.ColumnNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnSize() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.ColumnSizeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnSize' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.ColumnSizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DisplayIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.DisplayIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DisplayIndex' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.DisplayIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Caption() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.CaptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Caption' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.CaptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColumnType() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.ColumnTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnType' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.ColumnTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Display() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.DisplayColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Display' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.DisplayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjectName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.ObjectNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ObjectName' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.ObjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlType() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.ControlTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ControlType' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.ControlTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tag() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.TagColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tag' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.TagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExcelColumnName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.ExcelColumnNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExcelColumnName' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.ExcelColumnNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UniqueColumn() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.UniqueColumnColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UniqueColumn' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.UniqueColumnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsRequired() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.IsRequiredColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsRequired' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.IsRequiredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAppColumns.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblAppColumns' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppColumns.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnNameNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.ColumnNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnNameNull()
            Me(Me.tabletblAppColumns.ColumnNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnSizeNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.ColumnSizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnSizeNull()
            Me(Me.tabletblAppColumns.ColumnSizeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisplayIndexNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.DisplayIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisplayIndexNull()
            Me(Me.tabletblAppColumns.DisplayIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCaptionNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.CaptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCaptionNull()
            Me(Me.tabletblAppColumns.CaptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnTypeNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.ColumnTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnTypeNull()
            Me(Me.tabletblAppColumns.ColumnTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisplayNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.DisplayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisplayNull()
            Me(Me.tabletblAppColumns.DisplayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjectNameNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.ObjectNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjectNameNull()
            Me(Me.tabletblAppColumns.ObjectNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlTypeNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.ControlTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlTypeNull()
            Me(Me.tabletblAppColumns.ControlTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTagNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.TagColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTagNull()
            Me(Me.tabletblAppColumns.TagColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExcelColumnNameNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.ExcelColumnNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExcelColumnNameNull()
            Me(Me.tabletblAppColumns.ExcelColumnNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUniqueColumnNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.UniqueColumnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUniqueColumnNull()
            Me(Me.tabletblAppColumns.UniqueColumnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsRequiredNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.IsRequiredColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsRequiredNull()
            Me(Me.tabletblAppColumns.IsRequiredColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblAppColumns.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblAppColumns.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblAppColumns.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblAppColumns.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblAppColumns.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblAssetUtilizationRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblAssetUtilization As tblAssetUtilizationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblAssetUtilization = CType(Me.Table,tblAssetUtilizationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As System.Guid
            Get
                Return CType(Me(Me.tabletblAssetUtilization.IDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblAssetUtilization.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Faculty() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.FacultyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Faculty' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.FacultyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoOfRooms() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.NoOfRoomsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoOfRooms' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.NoOfRoomsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RoomName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.RoomNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RoomName' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.RoomNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoOfSeats() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.NoOfSeatsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoOfSeats' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.NoOfSeatsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoOfSessionsPerDay() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.NoOfSessionsPerDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoOfSessionsPerDay' in table 'tblAssetUtilization' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.NoOfSessionsPerDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoOfSessionsPerWeek() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.NoOfSessionsPerWeekColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoOfSessionsPerWeek' in table 'tblAssetUtilization' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.NoOfSessionsPerWeekColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FieldOfStufy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.FieldOfStufyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldOfStufy' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.FieldOfStufyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssetType() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.AssetTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssetType' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.AssetTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssetGroup() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.AssetGroupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssetGroup' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.AssetGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AreaCoverage() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.AreaCoverageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AreaCoverage' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.AreaCoverageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacity() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblAssetUtilization.CapacityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Capacity' in table 'tblAssetUtilization' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAssetUtilization.CapacityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacultyNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.FacultyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacultyNull()
            Me(Me.tabletblAssetUtilization.FacultyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoOfRoomsNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.NoOfRoomsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoOfRoomsNull()
            Me(Me.tabletblAssetUtilization.NoOfRoomsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRoomNameNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.RoomNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRoomNameNull()
            Me(Me.tabletblAssetUtilization.RoomNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoOfSeatsNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.NoOfSeatsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoOfSeatsNull()
            Me(Me.tabletblAssetUtilization.NoOfSeatsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoOfSessionsPerDayNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.NoOfSessionsPerDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoOfSessionsPerDayNull()
            Me(Me.tabletblAssetUtilization.NoOfSessionsPerDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoOfSessionsPerWeekNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.NoOfSessionsPerWeekColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoOfSessionsPerWeekNull()
            Me(Me.tabletblAssetUtilization.NoOfSessionsPerWeekColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFieldOfStufyNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.FieldOfStufyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFieldOfStufyNull()
            Me(Me.tabletblAssetUtilization.FieldOfStufyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblAssetUtilization.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblAssetUtilization.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblAssetUtilization.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblAssetUtilization.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblAssetUtilization.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssetTypeNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.AssetTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssetTypeNull()
            Me(Me.tabletblAssetUtilization.AssetTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssetGroupNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.AssetGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssetGroupNull()
            Me(Me.tabletblAssetUtilization.AssetGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAreaCoverageNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.AreaCoverageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAreaCoverageNull()
            Me(Me.tabletblAssetUtilization.AreaCoverageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCapacityNull() As Boolean
            Return Me.IsNull(Me.tabletblAssetUtilization.CapacityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCapacityNull()
            Me(Me.tabletblAssetUtilization.CapacityColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblBusinessObjectRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblBusinessObject As tblBusinessObjectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblBusinessObject = CType(Me.Table,tblBusinessObjectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjectName() As String
            Get
                Return CType(Me(Me.tabletblBusinessObject.ObjectNameColumn),String)
            End Get
            Set
                Me(Me.tabletblBusinessObject.ObjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBusinessObject.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'tblBusinessObject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBusinessObject.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBusinessObject.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblBusinessObject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBusinessObject.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBusinessObject.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblBusinessObject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBusinessObject.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblBusinessObject.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblBusinessObject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBusinessObject.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblBusinessObject.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblBusinessObject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBusinessObject.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblBusinessObject.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblBusinessObject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBusinessObject.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblBusinessObject.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tabletblBusinessObject.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblBusinessObject.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblBusinessObject.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblBusinessObject.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblBusinessObject.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblBusinessObject.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblBusinessObject.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblBusinessObject.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblBusinessObject.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblBusinessObject.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblBusinessObject.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GettblRightsRows() As tblRightsRow()
            If (Me.Table.ChildRelations("FK_Rights_BusinessObject1") Is Nothing) Then
                Return New tblRightsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Rights_BusinessObject1")),tblRightsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblFundingRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblFunding As tblFundingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblFunding = CType(Me.Table,tblFundingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As System.Guid
            Get
                Return CType(Me(Me.tabletblFunding.IDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblFunding.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Government() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.GovernmentColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Government' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.GovernmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Externals() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.ExternalsColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Externals' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.ExternalsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Institution() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.InstitutionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Institution' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.InstitutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocalGovernment() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.LocalGovernmentColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocalGovernment' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.LocalGovernmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchoolFees() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.SchoolFeesColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SchoolFees' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.SchoolFeesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OwnGenRevenue() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.OwnGenRevenueColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OwnGenRevenue' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.OwnGenRevenueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Other() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.OtherColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Other' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.OtherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Salaries() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.SalariesColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Salaries' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.SalariesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OtherExpenditure() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.OtherExpenditureColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OtherExpenditure' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.OtherExpenditureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Investments() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.InvestmentsColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Investments' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.InvestmentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblFunding.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblFunding' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFunding.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGovernmentNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.GovernmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGovernmentNull()
            Me(Me.tabletblFunding.GovernmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExternalsNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.ExternalsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExternalsNull()
            Me(Me.tabletblFunding.ExternalsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInstitutionNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.InstitutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInstitutionNull()
            Me(Me.tabletblFunding.InstitutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocalGovernmentNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.LocalGovernmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocalGovernmentNull()
            Me(Me.tabletblFunding.LocalGovernmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchoolFeesNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.SchoolFeesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchoolFeesNull()
            Me(Me.tabletblFunding.SchoolFeesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOwnGenRevenueNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.OwnGenRevenueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOwnGenRevenueNull()
            Me(Me.tabletblFunding.OwnGenRevenueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.OtherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherNull()
            Me(Me.tabletblFunding.OtherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalariesNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.SalariesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalariesNull()
            Me(Me.tabletblFunding.SalariesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherExpenditureNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.OtherExpenditureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherExpenditureNull()
            Me(Me.tabletblFunding.OtherExpenditureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvestmentsNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.InvestmentsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvestmentsNull()
            Me(Me.tabletblFunding.InvestmentsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblFunding.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblFunding.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblFunding.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblFunding.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblFunding.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblFunding.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblEnrollmentRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblEnrollment As tblEnrollmentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblEnrollment = CType(Me.Table,tblEnrollmentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As System.Guid
            Get
                Return CType(Me(Me.tabletblEnrollment.IDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblEnrollment.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Male() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollment.MaleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Male' in table 'tblEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollment.MaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Female() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollment.FemaleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Female' in table 'tblEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollment.FemaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sponsorship() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollment.SponsorshipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sponsorship' in table 'tblEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollment.SponsorshipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollment.AmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'tblEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollment.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollment.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'tblEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollment.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nationality() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollment.NationalityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nationality' in table 'tblEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollment.NationalityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Disabled() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollment.DisabledColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Disabled' in table 'tblEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollment.DisabledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollment.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollment.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollment.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollment.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FieldOfStudy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollment.FieldOfStudyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldOfStudy' in table 'tblEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollment.FieldOfStudyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollment.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollment.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollment.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollment.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollment.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblEnrollment' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollment.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaleNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollment.MaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaleNull()
            Me(Me.tabletblEnrollment.MaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFemaleNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollment.FemaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFemaleNull()
            Me(Me.tabletblEnrollment.FemaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSponsorshipNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollment.SponsorshipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSponsorshipNull()
            Me(Me.tabletblEnrollment.SponsorshipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollment.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAmountNull()
            Me(Me.tabletblEnrollment.AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollment.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tabletblEnrollment.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNationalityNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollment.NationalityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNationalityNull()
            Me(Me.tabletblEnrollment.NationalityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisabledNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollment.DisabledColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisabledNull()
            Me(Me.tabletblEnrollment.DisabledColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollment.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblEnrollment.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollment.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblEnrollment.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFieldOfStudyNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollment.FieldOfStudyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFieldOfStudyNull()
            Me(Me.tabletblEnrollment.FieldOfStudyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollment.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblEnrollment.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollment.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblEnrollment.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollment.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblEnrollment.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblGradDataRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblGradData As tblGradDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblGradData = CType(Me.Table,tblGradDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As System.Guid
            Get
                Return CType(Me(Me.tabletblGradData.IDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblGradData.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AwardPreparedCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGradData.AwardPreparedCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AwardPreparedCode' in table 'tblGradData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradData.AwardPreparedCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FieldOfSpecialization() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGradData.FieldOfSpecializationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldOfSpecialization' in table 'tblGradData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradData.FieldOfSpecializationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGradData.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblGradData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradData.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGradData.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblGradData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradData.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblGradData.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblGradData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradData.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblGradData.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblGradData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradData.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblGradData.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblGradData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradData.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GradGroup() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGradData.GradGroupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GradGroup' in table 'tblGradData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradData.GradGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Male() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblGradData.MaleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Male' in table 'tblGradData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradData.MaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Female() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblGradData.FemaleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Female' in table 'tblGradData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradData.FemaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AwardGroup() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGradData.AwardGroupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AwardGroup' in table 'tblGradData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradData.AwardGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAwardPreparedCodeNull() As Boolean
            Return Me.IsNull(Me.tabletblGradData.AwardPreparedCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAwardPreparedCodeNull()
            Me(Me.tabletblGradData.AwardPreparedCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFieldOfSpecializationNull() As Boolean
            Return Me.IsNull(Me.tabletblGradData.FieldOfSpecializationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFieldOfSpecializationNull()
            Me(Me.tabletblGradData.FieldOfSpecializationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblGradData.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblGradData.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblGradData.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblGradData.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblGradData.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblGradData.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblGradData.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblGradData.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblGradData.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblGradData.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGradGroupNull() As Boolean
            Return Me.IsNull(Me.tabletblGradData.GradGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGradGroupNull()
            Me(Me.tabletblGradData.GradGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaleNull() As Boolean
            Return Me.IsNull(Me.tabletblGradData.MaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaleNull()
            Me(Me.tabletblGradData.MaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFemaleNull() As Boolean
            Return Me.IsNull(Me.tabletblGradData.FemaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFemaleNull()
            Me(Me.tabletblGradData.FemaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAwardGroupNull() As Boolean
            Return Me.IsNull(Me.tabletblGradData.AwardGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAwardGroupNull()
            Me(Me.tabletblGradData.AwardGroupColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblGroupRightsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblGroupRights As tblGroupRightsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblGroupRights = CType(Me.Table,tblGroupRightsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RightID() As String
            Get
                Return CType(Me(Me.tabletblGroupRights.RightIDColumn),String)
            End Get
            Set
                Me(Me.tabletblGroupRights.RightIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGroupRights.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'tblGroupRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGroupRights.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupID() As String
            Get
                Return CType(Me(Me.tabletblGroupRights.GroupIDColumn),String)
            End Get
            Set
                Me(Me.tabletblGroupRights.GroupIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGroupRights.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblGroupRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGroupRights.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGroupRights.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblGroupRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGroupRights.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblGroupRights.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblGroupRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGroupRights.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblGroupRights.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblGroupRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGroupRights.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Allow() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblGroupRights.AllowColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Allow' in table 'tblGroupRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGroupRights.AllowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Add() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblGroupRights.AddColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Add' in table 'tblGroupRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGroupRights.AddColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Edit() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblGroupRights.EditColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Edit' in table 'tblGroupRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGroupRights.EditColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shadows Property Delete() As Boolean
            Get
                Try
                    Return CType(Me(Me.tabletblGroupRights.DeleteColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Delete' in table 'tblGroupRights' is DBNull.", e)
                End Try
            End Get
            Set(value As Boolean)
                Me(Me.tabletblGroupRights.DeleteColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property RightGroup() As String
            Get
                Try
                    Return CType(Me(Me.tabletblGroupRights.RightGroupColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RightGroup' in table 'tblGroupRights' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tabletblGroupRights.RightGroupColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property tblGroupsRow() As tblGroupsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_GroupRight_Groups")), tblGroupsRow)
            End Get
            Set(value As tblGroupsRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_GroupRight_Groups"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property tblRightsRow() As tblRightsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblGroupRights_tblRights")), tblRightsRow)
            End Get
            Set(value As tblRightsRow)
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblGroupRights_tblRights"))
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblGroupRights.DescriptionColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDescriptionNull()
            Me(Me.tabletblGroupRights.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblGroupRights.YearColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetYearNull()
            Me(Me.tabletblGroupRights.YearColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblGroupRights.SourceIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblGroupRights.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblGroupRights.bDeletedColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblGroupRights.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblGroupRights.RowVersionIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblGroupRights.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsAllowNull() As Boolean
            Return Me.IsNull(Me.tabletblGroupRights.AllowColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetAllowNull()
            Me(Me.tabletblGroupRights.AllowColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsAddNull() As Boolean
            Return Me.IsNull(Me.tabletblGroupRights.AddColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetAddNull()
            Me(Me.tabletblGroupRights.AddColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsEditNull() As Boolean
            Return Me.IsNull(Me.tabletblGroupRights.EditColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetEditNull()
            Me(Me.tabletblGroupRights.EditColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDeleteNull() As Boolean
            Return Me.IsNull(Me.tabletblGroupRights.DeleteColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDeleteNull()
            Me(Me.tabletblGroupRights.DeleteColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsRightGroupNull() As Boolean
            Return Me.IsNull(Me.tabletblGroupRights.RightGroupColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetRightGroupNull()
            Me(Me.tabletblGroupRights.RightGroupColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblGradDataDetailedRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblGradDataDetailed As tblGradDataDetailedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblGradDataDetailed = CType(Me.Table,tblGradDataDetailedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As System.Guid
            Get
                Return CType(Me(Me.tabletblGradDataDetailed.IDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblGradDataDetailed.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FKID() As System.Guid
            Get
                Return CType(Me(Me.tabletblGradDataDetailed.FKIDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblGradDataDetailed.FKIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GradGroup() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGradDataDetailed.GradGroupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GradGroup' in table 'tblGradDataDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradDataDetailed.GradGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Male() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblGradDataDetailed.MaleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Male' in table 'tblGradDataDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradDataDetailed.MaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Female() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblGradDataDetailed.FemaleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Female' in table 'tblGradDataDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradDataDetailed.FemaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblGradDataDetailed.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblGradDataDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradDataDetailed.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblGradDataDetailed.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblGradDataDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradDataDetailed.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblGradDataDetailed.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblGradDataDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGradDataDetailed.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGradGroupNull() As Boolean
            Return Me.IsNull(Me.tabletblGradDataDetailed.GradGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGradGroupNull()
            Me(Me.tabletblGradDataDetailed.GradGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaleNull() As Boolean
            Return Me.IsNull(Me.tabletblGradDataDetailed.MaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaleNull()
            Me(Me.tabletblGradDataDetailed.MaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFemaleNull() As Boolean
            Return Me.IsNull(Me.tabletblGradDataDetailed.FemaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFemaleNull()
            Me(Me.tabletblGradDataDetailed.FemaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblGradDataDetailed.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblGradDataDetailed.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblGradDataDetailed.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblGradDataDetailed.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblGradDataDetailed.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblGradDataDetailed.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblGroupsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblGroups As tblGroupsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblGroups = CType(Me.Table,tblGroupsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupID() As String
            Get
                Return CType(Me(Me.tabletblGroups.GroupIDColumn),String)
            End Get
            Set
                Me(Me.tabletblGroups.GroupIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGroups.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'tblGroups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGroups.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGroups.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblGroups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGroups.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblGroups.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblGroups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGroups.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblGroups.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblGroups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGroups.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblGroups.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblGroups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblGroups.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblGroups.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tabletblGroups.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblGroups.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblGroups.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblGroups.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblGroups.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblGroups.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblGroups.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblGroups.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblGroups.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GettblGroupRightsRows() As tblGroupRightsRow()
            If (Me.Table.ChildRelations("FK_GroupRight_Groups") Is Nothing) Then
                Return New tblGroupRightsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_GroupRight_Groups")),tblGroupRightsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GettblUserGroupRows() As tblUserGroupRow()
            If (Me.Table.ChildRelations("FK_UserGroup_Groups") Is Nothing) Then
                Return New tblUserGroupRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_UserGroup_Groups")),tblUserGroupRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblInstitutionsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblInstitutions As tblInstitutionsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblInstitutions = CType(Me.Table,tblInstitutionsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As System.Guid
            Get
                Return CType(Me(Me.tabletblInstitutions.IDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblInstitutions.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShortName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.ShortNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShortName' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.ShortNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Category() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.CategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Category' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.CategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Country() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.CountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InstitutionCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.InstitutionCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InstitutionCode' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.InstitutionCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegionCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.RegionCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RegionCode' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.RegionCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DistrictCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.DistrictCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DistrictCode' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.DistrictCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhysicalAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.PhysicalAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PhysicalAddress' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.PhysicalAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POBox() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.POBoxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POBox' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.POBoxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.TelNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TelNo' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.TelNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FaxNo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.FaxNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FaxNo' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.FaxNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParentMinistry() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.ParentMinistryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParentMinistry' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.ParentMinistryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ownership() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.OwnershipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ownership' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.OwnershipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnrolmentCapacity() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.EnrolmentCapacityColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EnrolmentCapacity' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.EnrolmentCapacityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property website() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.websiteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'website' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.websiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CampusLocation() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.CampusLocationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CampusLocation' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.CampusLocationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DistanceFromRoad() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.DistanceFromRoadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DistanceFromRoad' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.DistanceFromRoadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BuiltArea() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.BuiltAreaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BuiltArea' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.BuiltAreaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnutilizedArea() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.UnutilizedAreaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnutilizedArea' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.UnutilizedAreaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VisionAndMission() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblInstitutions.VisionAndMissionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VisionAndMission' in table 'tblInstitutions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblInstitutions.VisionAndMissionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShortNameNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.ShortNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShortNameNull()
            Me(Me.tabletblInstitutions.ShortNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tabletblInstitutions.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategoryNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.CategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategoryNull()
            Me(Me.tabletblInstitutions.CategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountryNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.CountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountryNull()
            Me(Me.tabletblInstitutions.CountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInstitutionCodeNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.InstitutionCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInstitutionCodeNull()
            Me(Me.tabletblInstitutions.InstitutionCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegionCodeNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.RegionCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegionCodeNull()
            Me(Me.tabletblInstitutions.RegionCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistrictCodeNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.DistrictCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistrictCodeNull()
            Me(Me.tabletblInstitutions.DistrictCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhysicalAddressNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.PhysicalAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhysicalAddressNull()
            Me(Me.tabletblInstitutions.PhysicalAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOBoxNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.POBoxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOBoxNull()
            Me(Me.tabletblInstitutions.POBoxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelNoNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.TelNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelNoNull()
            Me(Me.tabletblInstitutions.TelNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNoNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.FaxNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNoNull()
            Me(Me.tabletblInstitutions.FaxNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tabletblInstitutions.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParentMinistryNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.ParentMinistryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParentMinistryNull()
            Me(Me.tabletblInstitutions.ParentMinistryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOwnershipNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.OwnershipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOwnershipNull()
            Me(Me.tabletblInstitutions.OwnershipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnrolmentCapacityNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.EnrolmentCapacityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnrolmentCapacityNull()
            Me(Me.tabletblInstitutions.EnrolmentCapacityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblInstitutions.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblInstitutions.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblInstitutions.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IswebsiteNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.websiteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetwebsiteNull()
            Me(Me.tabletblInstitutions.websiteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCampusLocationNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.CampusLocationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCampusLocationNull()
            Me(Me.tabletblInstitutions.CampusLocationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDistanceFromRoadNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.DistanceFromRoadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDistanceFromRoadNull()
            Me(Me.tabletblInstitutions.DistanceFromRoadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBuiltAreaNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.BuiltAreaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBuiltAreaNull()
            Me(Me.tabletblInstitutions.BuiltAreaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnutilizedAreaNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.UnutilizedAreaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnutilizedAreaNull()
            Me(Me.tabletblInstitutions.UnutilizedAreaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVisionAndMissionNull() As Boolean
            Return Me.IsNull(Me.tabletblInstitutions.VisionAndMissionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVisionAndMissionNull()
            Me(Me.tabletblInstitutions.VisionAndMissionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblListRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblList As tblListDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblList = CType(Me.Table,tblListDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As System.Guid
            Get
                Return CType(Me(Me.tabletblList.IDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblList.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblList.ListCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListCode' in table 'tblList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblList.ListCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblList.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'tblList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblList.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Category() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblList.CategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Category' in table 'tblList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblList.CategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Parent() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblList.ParentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Parent' in table 'tblList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblList.ParentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblList.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblList.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblList.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblList.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListTag() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblList.ListTagColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListTag' in table 'tblList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblList.ListTagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblList.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblList.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblList.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblList.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblList.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblList.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListCodeNull() As Boolean
            Return Me.IsNull(Me.tabletblList.ListCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListCodeNull()
            Me(Me.tabletblList.ListCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblList.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tabletblList.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategoryNull() As Boolean
            Return Me.IsNull(Me.tabletblList.CategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategoryNull()
            Me(Me.tabletblList.CategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParentNull() As Boolean
            Return Me.IsNull(Me.tabletblList.ParentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParentNull()
            Me(Me.tabletblList.ParentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblList.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblList.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblList.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblList.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListTagNull() As Boolean
            Return Me.IsNull(Me.tabletblList.ListTagColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListTagNull()
            Me(Me.tabletblList.ListTagColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblList.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblList.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblList.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblList.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblList.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblList.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblEnrollmentDetailedRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblEnrollmentDetailed As tblEnrollmentDetailedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblEnrollmentDetailed = CType(Me.Table,tblEnrollmentDetailedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As System.Guid
            Get
                Return CType(Me(Me.tabletblEnrollmentDetailed.IDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateOfBirth() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.DateOfBirthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateOfBirth' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.DateOfBirthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Category() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.CategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Category' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.CategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Faculty() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.FacultyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Faculty' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.FacultyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Government() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.GovernmentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Government' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.GovernmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Privately() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.PrivatelyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Privately' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.PrivatelyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Other() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.OtherColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Other' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.OtherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModeOfEntry() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.ModeOfEntryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModeOfEntry' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.ModeOfEntryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FieldofStudy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.FieldofStudyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldofStudy' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.FieldofStudyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblEnrollmentDetailed.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblEnrollmentDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblEnrollmentDetailed.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tabletblEnrollmentDetailed.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tabletblEnrollmentDetailed.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateOfBirthNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.DateOfBirthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateOfBirthNull()
            Me(Me.tabletblEnrollmentDetailed.DateOfBirthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategoryNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.CategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategoryNull()
            Me(Me.tabletblEnrollmentDetailed.CategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacultyNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.FacultyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacultyNull()
            Me(Me.tabletblEnrollmentDetailed.FacultyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGovernmentNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.GovernmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGovernmentNull()
            Me(Me.tabletblEnrollmentDetailed.GovernmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrivatelyNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.PrivatelyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrivatelyNull()
            Me(Me.tabletblEnrollmentDetailed.PrivatelyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.OtherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherNull()
            Me(Me.tabletblEnrollmentDetailed.OtherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModeOfEntryNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.ModeOfEntryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModeOfEntryNull()
            Me(Me.tabletblEnrollmentDetailed.ModeOfEntryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblEnrollmentDetailed.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblEnrollmentDetailed.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFieldofStudyNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.FieldofStudyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFieldofStudyNull()
            Me(Me.tabletblEnrollmentDetailed.FieldofStudyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblEnrollmentDetailed.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblEnrollmentDetailed.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblEnrollmentDetailed.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblEnrollmentDetailed.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblRightsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblRights As tblRightsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblRights = CType(Me.Table,tblRightsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RightID() As String
            Get
                Return CType(Me(Me.tabletblRights.RightIDColumn),String)
            End Get
            Set
                Me(Me.tabletblRights.RightIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblRights.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'tblRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRights.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BusinessObject() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblRights.BusinessObjectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BusinessObject' in table 'tblRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRights.BusinessObjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MenuIndex() As Short
            Get
                Try 
                    Return CType(Me(Me.tabletblRights.MenuIndexColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MenuIndex' in table 'tblRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRights.MenuIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MenuDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblRights.MenuDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MenuDescription' in table 'tblRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRights.MenuDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MenuParentText() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblRights.MenuParentTextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MenuParentText' in table 'tblRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRights.MenuParentTextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comment() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblRights.CommentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comment' in table 'tblRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRights.CommentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MenuText() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblRights.MenuTextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MenuText' in table 'tblRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRights.MenuTextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MenuParentIndex() As Short
            Get
                Try 
                    Return CType(Me(Me.tabletblRights.MenuParentIndexColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MenuParentIndex' in table 'tblRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRights.MenuParentIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Control() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblRights.ControlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Control' in table 'tblRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRights.ControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblRights.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRights.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblRights.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRights.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblRights.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRights.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblRights.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblRights' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRights.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tblBusinessObjectRow() As tblBusinessObjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Rights_BusinessObject1")),tblBusinessObjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Rights_BusinessObject1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblRights.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tabletblRights.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBusinessObjectNull() As Boolean
            Return Me.IsNull(Me.tabletblRights.BusinessObjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBusinessObjectNull()
            Me(Me.tabletblRights.BusinessObjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMenuIndexNull() As Boolean
            Return Me.IsNull(Me.tabletblRights.MenuIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMenuIndexNull()
            Me(Me.tabletblRights.MenuIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMenuDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblRights.MenuDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMenuDescriptionNull()
            Me(Me.tabletblRights.MenuDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMenuParentTextNull() As Boolean
            Return Me.IsNull(Me.tabletblRights.MenuParentTextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMenuParentTextNull()
            Me(Me.tabletblRights.MenuParentTextColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentNull() As Boolean
            Return Me.IsNull(Me.tabletblRights.CommentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentNull()
            Me(Me.tabletblRights.CommentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMenuTextNull() As Boolean
            Return Me.IsNull(Me.tabletblRights.MenuTextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMenuTextNull()
            Me(Me.tabletblRights.MenuTextColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMenuParentIndexNull() As Boolean
            Return Me.IsNull(Me.tabletblRights.MenuParentIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMenuParentIndexNull()
            Me(Me.tabletblRights.MenuParentIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsControlNull() As Boolean
            Return Me.IsNull(Me.tabletblRights.ControlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetControlNull()
            Me(Me.tabletblRights.ControlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblRights.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblRights.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblRights.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblRights.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblRights.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblRights.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblRights.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblRights.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GettblGroupRightsRows() As tblGroupRightsRow()
            If (Me.Table.ChildRelations("FK_tblGroupRights_tblRights") Is Nothing) Then
                Return New tblGroupRightsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblGroupRights_tblRights")),tblGroupRightsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblStaffsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblStaffs As tblStaffsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblStaffs = CType(Me.Table,tblStaffsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As System.Guid
            Get
                Return CType(Me(Me.tabletblStaffs.IDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblStaffs.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qualification() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffs.QualificationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qualification' in table 'tblStaffs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffs.QualificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffs.AgeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'tblStaffs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffs.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rank() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffs.RankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rank' in table 'tblStaffs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffs.RankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Category() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffs.CategoryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Category' in table 'tblStaffs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffs.CategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Male() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffs.MaleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Male' in table 'tblStaffs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffs.MaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Female() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffs.FemaleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Female' in table 'tblStaffs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffs.FemaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Disabled() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffs.DisabledColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Disabled' in table 'tblStaffs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffs.DisabledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffs.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblStaffs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffs.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffs.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblStaffs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffs.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffs.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblStaffs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffs.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffs.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblStaffs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffs.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffs.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblStaffs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffs.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQualificationNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffs.QualificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQualificationNull()
            Me(Me.tabletblStaffs.QualificationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffs.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tabletblStaffs.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRankNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffs.RankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRankNull()
            Me(Me.tabletblStaffs.RankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategoryNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffs.CategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategoryNull()
            Me(Me.tabletblStaffs.CategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaleNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffs.MaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaleNull()
            Me(Me.tabletblStaffs.MaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFemaleNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffs.FemaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFemaleNull()
            Me(Me.tabletblStaffs.FemaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisabledNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffs.DisabledColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisabledNull()
            Me(Me.tabletblStaffs.DisabledColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffs.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblStaffs.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffs.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblStaffs.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffs.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblStaffs.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffs.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblStaffs.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffs.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblStaffs.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblStaffsDetailedRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblStaffsDetailed As tblStaffsDetailedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblStaffsDetailed = CType(Me.Table,tblStaffsDetailedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As System.Guid
            Get
                Return CType(Me(Me.tabletblStaffsDetailed.IDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateOfBirth() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.DateOfBirthColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateOfBirth' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.DateOfBirthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Faculty() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.FacultyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Faculty' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.FacultyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AcademicQualifications() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.AcademicQualificationsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AcademicQualifications' in table 'tblStaffsDetailed' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.AcademicQualificationsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.TitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FieldOfSpecialization() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.FieldOfSpecializationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldOfSpecialization' in table 'tblStaffsDetailed' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.FieldOfSpecializationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TermsOfEmployment() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.TermsOfEmploymentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TermsOfEmployment' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.TermsOfEmploymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nationality() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.NationalityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nationality' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.NationalityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Disability() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.DisabilityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Disability' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.DisabilityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RoleInInstitution() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.RoleInInstitutionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RoleInInstitution' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.RoleInInstitutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmploymentStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.EmploymentStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmploymentStatus' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.EmploymentStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateOfFirstEmployment() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.DateOfFirstEmploymentColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateOfFirstEmployment' in table 'tblStaffsDetailed' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.DateOfFirstEmploymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MainLevelTaught() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.MainLevelTaughtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MainLevelTaught' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.MainLevelTaughtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MainFieldTaught() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.MainFieldTaughtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MainFieldTaught' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.MainFieldTaughtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsContactPerson() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.IsContactPersonColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsContactPerson' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.IsContactPersonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'email' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.PhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Phone' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.PhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Position() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStaffsDetailed.PositionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Position' in table 'tblStaffsDetailed' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStaffsDetailed.PositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tabletblStaffsDetailed.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tabletblStaffsDetailed.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateOfBirthNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.DateOfBirthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateOfBirthNull()
            Me(Me.tabletblStaffsDetailed.DateOfBirthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacultyNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.FacultyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacultyNull()
            Me(Me.tabletblStaffsDetailed.FacultyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcademicQualificationsNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.AcademicQualificationsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcademicQualificationsNull()
            Me(Me.tabletblStaffsDetailed.AcademicQualificationsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.TitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTitleNull()
            Me(Me.tabletblStaffsDetailed.TitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFieldOfSpecializationNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.FieldOfSpecializationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFieldOfSpecializationNull()
            Me(Me.tabletblStaffsDetailed.FieldOfSpecializationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTermsOfEmploymentNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.TermsOfEmploymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTermsOfEmploymentNull()
            Me(Me.tabletblStaffsDetailed.TermsOfEmploymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNationalityNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.NationalityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNationalityNull()
            Me(Me.tabletblStaffsDetailed.NationalityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisabilityNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.DisabilityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisabilityNull()
            Me(Me.tabletblStaffsDetailed.DisabilityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblStaffsDetailed.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblStaffsDetailed.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblStaffsDetailed.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblStaffsDetailed.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRoleInInstitutionNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.RoleInInstitutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRoleInInstitutionNull()
            Me(Me.tabletblStaffsDetailed.RoleInInstitutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmploymentStatusNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.EmploymentStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmploymentStatusNull()
            Me(Me.tabletblStaffsDetailed.EmploymentStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblStaffsDetailed.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateOfFirstEmploymentNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.DateOfFirstEmploymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateOfFirstEmploymentNull()
            Me(Me.tabletblStaffsDetailed.DateOfFirstEmploymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMainLevelTaughtNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.MainLevelTaughtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMainLevelTaughtNull()
            Me(Me.tabletblStaffsDetailed.MainLevelTaughtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMainFieldTaughtNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.MainFieldTaughtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMainFieldTaughtNull()
            Me(Me.tabletblStaffsDetailed.MainFieldTaughtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsContactPersonNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.IsContactPersonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsContactPersonNull()
            Me(Me.tabletblStaffsDetailed.IsContactPersonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemailNull()
            Me(Me.tabletblStaffsDetailed.emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhoneNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.PhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhoneNull()
            Me(Me.tabletblStaffsDetailed.PhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPositionNull() As Boolean
            Return Me.IsNull(Me.tabletblStaffsDetailed.PositionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPositionNull()
            Me(Me.tabletblStaffsDetailed.PositionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblStudentsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblStudents As tblStudentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblStudents = CType(Me.Table,tblStudentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.StudentIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentID' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OtherNames() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.OtherNamesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OtherNames' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.OtherNamesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BirthDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.BirthDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BirthDate' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.BirthDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tribe() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.TribeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tribe' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.TribeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nationality() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.NationalityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nationality' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.NationalityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.ContactAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContactAddress' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.ContactAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhysicalAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.PhysicalAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PhysicalAddress' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.PhysicalAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telephone() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.TelephoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telephone' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.TelephoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fax() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.FaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fax' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.FaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Disability() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.DisabilityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Disability' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.DisabilityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comment() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.CommentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Comment' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.CommentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Picture() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.PictureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Picture' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.PictureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AwardPreparedCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.AwardPreparedCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AwardPreparedCode' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.AwardPreparedCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FieldOfSpecialization() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.FieldOfSpecializationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FieldOfSpecialization' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.FieldOfSpecializationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YearOfStudy() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.YearOfStudyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YearOfStudy' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.YearOfStudyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Repeater() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.RepeaterColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Repeater' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.RepeaterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntryQualification() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.EntryQualificationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EntryQualification' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.EntryQualificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As System.Guid
            Get
                Return CType(Me(Me.tabletblStudents.IDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblStudents.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsBoarding() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblStudents.IsBoardingColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsBoarding' in table 'tblStudents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStudents.IsBoardingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentIDNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.StudentIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentIDNull()
            Me(Me.tabletblStudents.StudentIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tabletblStudents.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherNamesNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.OtherNamesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherNamesNull()
            Me(Me.tabletblStudents.OtherNamesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBirthDateNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.BirthDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBirthDateNull()
            Me(Me.tabletblStudents.BirthDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tabletblStudents.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTribeNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.TribeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTribeNull()
            Me(Me.tabletblStudents.TribeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNationalityNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.NationalityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNationalityNull()
            Me(Me.tabletblStudents.NationalityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactAddressNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.ContactAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactAddressNull()
            Me(Me.tabletblStudents.ContactAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhysicalAddressNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.PhysicalAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhysicalAddressNull()
            Me(Me.tabletblStudents.PhysicalAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelephoneNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.TelephoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelephoneNull()
            Me(Me.tabletblStudents.TelephoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.FaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFaxNull()
            Me(Me.tabletblStudents.FaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tabletblStudents.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisabilityNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.DisabilityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisabilityNull()
            Me(Me.tabletblStudents.DisabilityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tabletblStudents.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.CommentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentNull()
            Me(Me.tabletblStudents.CommentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPictureNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.PictureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPictureNull()
            Me(Me.tabletblStudents.PictureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblStudents.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblStudents.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblStudents.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblStudents.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAwardPreparedCodeNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.AwardPreparedCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAwardPreparedCodeNull()
            Me(Me.tabletblStudents.AwardPreparedCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFieldOfSpecializationNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.FieldOfSpecializationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFieldOfSpecializationNull()
            Me(Me.tabletblStudents.FieldOfSpecializationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearOfStudyNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.YearOfStudyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearOfStudyNull()
            Me(Me.tabletblStudents.YearOfStudyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRepeaterNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.RepeaterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRepeaterNull()
            Me(Me.tabletblStudents.RepeaterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntryQualificationNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.EntryQualificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntryQualificationNull()
            Me(Me.tabletblStudents.EntryQualificationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblStudents.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsBoardingNull() As Boolean
            Return Me.IsNull(Me.tabletblStudents.IsBoardingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsBoardingNull()
            Me(Me.tabletblStudents.IsBoardingColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblUserGroupRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblUserGroup As tblUserGroupDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblUserGroup = CType(Me.Table,tblUserGroupDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserName() As String
            Get
                Return CType(Me(Me.tabletblUserGroup.UserNameColumn),String)
            End Get
            Set
                Me(Me.tabletblUserGroup.UserNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupID() As String
            Get
                Return CType(Me(Me.tabletblUserGroup.GroupIDColumn),String)
            End Get
            Set
                Me(Me.tabletblUserGroup.GroupIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUserGroup.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblUserGroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUserGroup.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUserGroup.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblUserGroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUserGroup.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblUserGroup.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblUserGroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUserGroup.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblUserGroup.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblUserGroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUserGroup.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tblGroupsRow() As tblGroupsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_UserGroup_Groups")),tblGroupsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_UserGroup_Groups"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tblUsersRow() As tblUsersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_UserGroup_Users")),tblUsersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_UserGroup_Users"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblUserGroup.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblUserGroup.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblUserGroup.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblUserGroup.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblUserGroup.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblUserGroup.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblUserGroup.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblUserGroup.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblUsersRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblUsers As tblUsersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblUsers = CType(Me.Table,tblUsersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserName() As String
            Get
                Return CType(Me(Me.tabletblUsers.UserNameColumn),String)
            End Get
            Set
                Me(Me.tabletblUsers.UserNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Password() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.PasswordColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Password' in table 'tblUsers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblUsers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblUsers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblUsers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblUsers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.PasswordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPasswordNull()
            Me(Me.tabletblUsers.PasswordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblUsers.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblUsers.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblUsers.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblUsers.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GettblUserGroupRows() As tblUserGroupRow()
            If (Me.Table.ChildRelations("FK_UserGroup_Users") Is Nothing) Then
                Return New tblUserGroupRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_UserGroup_Users")),tblUserGroupRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblAppVersionControlRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblAppVersionControl As tblAppVersionControlDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblAppVersionControl = CType(Me.Table,tblAppVersionControlDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BEVersion() As Short
            Get
                Return CType(Me(Me.tabletblAppVersionControl.BEVersionColumn),Short)
            End Get
            Set
                Me(Me.tabletblAppVersionControl.BEVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLPatchVersion() As Short
            Get
                Try 
                    Return CType(Me(Me.tabletblAppVersionControl.CLPatchVersionColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLPatchVersion' in table 'tblAppVersionControl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppVersionControl.CLPatchVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblAppVersionControl.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblAppVersionControl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppVersionControl.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastRowVersion() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblAppVersionControl.LastRowVersionColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastRowVersion' in table 'tblAppVersionControl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblAppVersionControl.LastRowVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLPatchVersionNull() As Boolean
            Return Me.IsNull(Me.tabletblAppVersionControl.CLPatchVersionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLPatchVersionNull()
            Me(Me.tabletblAppVersionControl.CLPatchVersionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblAppVersionControl.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblAppVersionControl.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastRowVersionNull() As Boolean
            Return Me.IsNull(Me.tabletblAppVersionControl.LastRowVersionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastRowVersionNull()
            Me(Me.tabletblAppVersionControl.LastRowVersionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblSponsorShipRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblSponsorShip As tblSponsorShipDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblSponsorShip = CType(Me.Table,tblSponsorShipDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudentID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSponsorShip.StudentIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StudentID' in table 'tblSponsorShip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSponsorShip.StudentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSponsorShip.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'tblSponsorShip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSponsorShip.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OtherNames() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSponsorShip.OtherNamesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OtherNames' in table 'tblSponsorShip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSponsorShip.OtherNamesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semester() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSponsorShip.SemesterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Semester' in table 'tblSponsorShip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSponsorShip.SemesterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Self() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblSponsorShip.SelfColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Self' in table 'tblSponsorShip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSponsorShip.SelfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LoanBoard() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblSponsorShip.LoanBoardColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LoanBoard' in table 'tblSponsorShip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSponsorShip.LoanBoardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Institution() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblSponsorShip.InstitutionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Institution' in table 'tblSponsorShip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSponsorShip.InstitutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Other() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblSponsorShip.OtherColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Other' in table 'tblSponsorShip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSponsorShip.OtherColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSponsorShip.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'tblSponsorShip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSponsorShip.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSponsorShip.SourceIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SourceID' in table 'tblSponsorShip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSponsorShip.SourceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblSponsorShip.bDeletedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bDeleted' in table 'tblSponsorShip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSponsorShip.bDeletedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RowVersionID() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblSponsorShip.RowVersionIDColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersionID' in table 'tblSponsorShip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSponsorShip.RowVersionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreationDate() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletblSponsorShip.CreationDateColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreationDate' in table 'tblSponsorShip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSponsorShip.CreationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As System.Guid
            Get
                Return CType(Me(Me.tabletblSponsorShip.IDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletblSponsorShip.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStudentIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSponsorShip.StudentIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStudentIDNull()
            Me(Me.tabletblSponsorShip.StudentIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tabletblSponsorShip.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tabletblSponsorShip.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherNamesNull() As Boolean
            Return Me.IsNull(Me.tabletblSponsorShip.OtherNamesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherNamesNull()
            Me(Me.tabletblSponsorShip.OtherNamesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemesterNull() As Boolean
            Return Me.IsNull(Me.tabletblSponsorShip.SemesterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemesterNull()
            Me(Me.tabletblSponsorShip.SemesterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelfNull() As Boolean
            Return Me.IsNull(Me.tabletblSponsorShip.SelfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelfNull()
            Me(Me.tabletblSponsorShip.SelfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoanBoardNull() As Boolean
            Return Me.IsNull(Me.tabletblSponsorShip.LoanBoardColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoanBoardNull()
            Me(Me.tabletblSponsorShip.LoanBoardColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInstitutionNull() As Boolean
            Return Me.IsNull(Me.tabletblSponsorShip.InstitutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInstitutionNull()
            Me(Me.tabletblSponsorShip.InstitutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOtherNull() As Boolean
            Return Me.IsNull(Me.tabletblSponsorShip.OtherColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOtherNull()
            Me(Me.tabletblSponsorShip.OtherColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tabletblSponsorShip.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYearNull()
            Me(Me.tabletblSponsorShip.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSponsorShip.SourceIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceIDNull()
            Me(Me.tabletblSponsorShip.SourceIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbDeletedNull() As Boolean
            Return Me.IsNull(Me.tabletblSponsorShip.bDeletedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbDeletedNull()
            Me(Me.tabletblSponsorShip.bDeletedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRowVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSponsorShip.RowVersionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRowVersionIDNull()
            Me(Me.tabletblSponsorShip.RowVersionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreationDateNull() As Boolean
            Return Me.IsNull(Me.tabletblSponsorShip.CreationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreationDateNull()
            Me(Me.tabletblSponsorShip.CreationDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblFormRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblForm As tblFormDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblForm = CType(Me.Table,tblFormDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormID() As Integer
            Get
                Return CType(Me(Me.tabletblForm.FormIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblForm.FormIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ministry() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblForm.MinistryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ministry' in table 'tblForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblForm.MinistryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblForm.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'tblForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblForm.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblForm.TitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'tblForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblForm.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Code() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblForm.CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Code' in table 'tblForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblForm.CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShortDetail() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblForm.ShortDetailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShortDetail' in table 'tblForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblForm.ShortDetailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMinistryNull() As Boolean
            Return Me.IsNull(Me.tabletblForm.MinistryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMinistryNull()
            Me(Me.tabletblForm.MinistryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblForm.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tabletblForm.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tabletblForm.TitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTitleNull()
            Me(Me.tabletblForm.TitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeNull() As Boolean
            Return Me.IsNull(Me.tabletblForm.CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeNull()
            Me(Me.tabletblForm.CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShortDetailNull() As Boolean
            Return Me.IsNull(Me.tabletblForm.ShortDetailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShortDetailNull()
            Me(Me.tabletblForm.ShortDetailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GettblFormDetailsRows() As tblFormDetailsRow()
            If (Me.Table.ChildRelations("FK_tblFormDetails_tblForm") Is Nothing) Then
                Return New tblFormDetailsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tblFormDetails_tblForm")),tblFormDetailsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblFormDetailsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblFormDetails As tblFormDetailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblFormDetails = CType(Me.Table,tblFormDetailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tabletblFormDetails.IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblFormDetails.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.FormIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FormID' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.FormIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Designation() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.DesignationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Designation' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.DesignationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_M1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_M1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_M1' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_M1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_F1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_F1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_F1' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_F1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_M2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_M2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_M2' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_M2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_F2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_F2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_F2' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_F2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_M3() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_M3Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_M3' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_M3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_F3() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_F3Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_F3' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_F3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_M4() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_M4Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_M4' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_M4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_F4() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_F4Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_F4' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_F4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_M5() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_M5Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_M5' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_M5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_F5() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_F5Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_F5' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_F5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_M6() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_M6Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_M6' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_M6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_F6() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_F6Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_F6' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_F6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_M7() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_M7Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_M7' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_M7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pivot_F7() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblFormDetails.Pivot_F7Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pivot_F7' in table 'tblFormDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormDetails.Pivot_F7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tblFormRow() As tblFormRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tblFormDetails_tblForm")),tblFormRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tblFormDetails_tblForm"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormIDNull() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.FormIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormIDNull()
            Me(Me.tabletblFormDetails.FormIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesignationNull() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.DesignationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesignationNull()
            Me(Me.tabletblFormDetails.DesignationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_M1Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_M1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_M1Null()
            Me(Me.tabletblFormDetails.Pivot_M1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_F1Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_F1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_F1Null()
            Me(Me.tabletblFormDetails.Pivot_F1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_M2Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_M2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_M2Null()
            Me(Me.tabletblFormDetails.Pivot_M2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_F2Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_F2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_F2Null()
            Me(Me.tabletblFormDetails.Pivot_F2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_M3Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_M3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_M3Null()
            Me(Me.tabletblFormDetails.Pivot_M3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_F3Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_F3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_F3Null()
            Me(Me.tabletblFormDetails.Pivot_F3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_M4Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_M4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_M4Null()
            Me(Me.tabletblFormDetails.Pivot_M4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_F4Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_F4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_F4Null()
            Me(Me.tabletblFormDetails.Pivot_F4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_M5Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_M5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_M5Null()
            Me(Me.tabletblFormDetails.Pivot_M5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_F5Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_F5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_F5Null()
            Me(Me.tabletblFormDetails.Pivot_F5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_M6Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_M6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_M6Null()
            Me(Me.tabletblFormDetails.Pivot_M6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_F6Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_F6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_F6Null()
            Me(Me.tabletblFormDetails.Pivot_F6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_M7Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_M7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_M7Null()
            Me(Me.tabletblFormDetails.Pivot_M7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPivot_F7Null() As Boolean
            Return Me.IsNull(Me.tabletblFormDetails.Pivot_F7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPivot_F7Null()
            Me(Me.tabletblFormDetails.Pivot_F7Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblAcademicYearsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblAcademicYearsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblAcademicYearsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblAcademicYearsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblAppColumnsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblAppColumnsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblAppColumnsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblAppColumnsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblAssetUtilizationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblAssetUtilizationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblAssetUtilizationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblAssetUtilizationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblBusinessObjectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblBusinessObjectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblBusinessObjectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblBusinessObjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblFundingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblFundingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblFundingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblFundingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblEnrollmentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblEnrollmentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblEnrollmentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblEnrollmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblGradDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblGradDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblGradDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblGradDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblGroupRightsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblGroupRightsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblGroupRightsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblGroupRightsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblGradDataDetailedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblGradDataDetailedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblGradDataDetailedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblGradDataDetailedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblGroupsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblGroupsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblGroupsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblGroupsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblInstitutionsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblInstitutionsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblInstitutionsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblInstitutionsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblListRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblListRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblEnrollmentDetailedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblEnrollmentDetailedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblEnrollmentDetailedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblEnrollmentDetailedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblRightsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblRightsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblRightsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblRightsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblStaffsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblStaffsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblStaffsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblStaffsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblStaffsDetailedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblStaffsDetailedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblStaffsDetailedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblStaffsDetailedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblStudentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblStudentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblStudentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblStudentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblUserGroupRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblUserGroupRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblUserGroupRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblUserGroupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblUsersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblUsersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblUsersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblUsersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblAppVersionControlRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblAppVersionControlRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblAppVersionControlRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblAppVersionControlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblSponsorShipRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblSponsorShipRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblSponsorShipRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblSponsorShipRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblFormRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblFormRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblFormRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblFormRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblFormDetailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblFormDetailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblFormDetailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblFormDetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
